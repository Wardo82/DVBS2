-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\psk_demodulate_block\hard_decision_demod.vhd
-- Created: 2020-12-26 18:15:59
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: hard_decision_demod
-- Source Path: psk_demodulate_block/HDL_DUT/hard_decision_demod
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY hard_decision_demod IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        angle                             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        index                             :   OUT   std_logic_vector(8 DOWNTO 0)  -- ufix9
        );
END hard_decision_demod;


ARCHITECTURE rtl OF hard_decision_demod IS

  -- Component Declarations
  COMPONENT value_within
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          higher_bound                    :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          value                           :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          lower_bound                     :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          flag                            :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT value_within3
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          lower_bound                     :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          value                           :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          higher_bound                    :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          flag                            :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT value_within_pi
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          lower_bound                     :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          value                           :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          higher_bound                    :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          flag                            :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : value_within
    USE ENTITY work.value_within(rtl);

  FOR ALL : value_within3
    USE ENTITY work.value_within3(rtl);

  FOR ALL : value_within_pi
    USE ENTITY work.value_within_pi(rtl);

  -- Signals
  SIGNAL Constant1_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant2_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL value_within_out1                : std_logic;
  SIGNAL value_within_out1_1              : std_logic;
  SIGNAL Constant3_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant4_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL value_within1_out1               : std_logic;
  SIGNAL Gain_cast                        : unsigned(1 DOWNTO 0);  -- ufix2_E1
  SIGNAL Gain_out1                        : std_logic;  -- ufix1_E1
  SIGNAL Gain_out1_1                      : std_logic;  -- ufix1_E1
  SIGNAL kconst                           : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Constant5_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant6_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL value_within2_out1               : std_logic;
  SIGNAL Gain1_out1                       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Gain1_out1_1                     : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Constant7_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant8_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL value_within3_out1               : std_logic;
  SIGNAL Gain2_cast                       : unsigned(1 DOWNTO 0);  -- ufix2_E2
  SIGNAL Gain2_out1                       : std_logic;  -- ufix1_E2
  SIGNAL Gain2_out1_1                     : std_logic;  -- ufix1_E2
  SIGNAL kconst_1                         : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Constant9_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant10_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL value_within_pi_out1             : std_logic;
  SIGNAL Gain3_out1                       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Gain3_out1_1                     : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL kconst_2                         : unsigned(1 DOWNTO 0);  -- ufix2_E1
  SIGNAL Constant11_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant12_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL value_within5_out1               : std_logic;
  SIGNAL Gain4_in1                        : unsigned(1 DOWNTO 0);  -- ufix2_E1
  SIGNAL Gain4_cast                       : unsigned(2 DOWNTO 0);  -- ufix3_E1
  SIGNAL Gain4_out1                       : unsigned(1 DOWNTO 0);  -- ufix2_E1
  SIGNAL Gain4_out1_1                     : unsigned(1 DOWNTO 0);  -- ufix2_E1
  SIGNAL kconst_3                         : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Constant13_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant14_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL value_within6_out1               : std_logic;
  SIGNAL Gain5_out1                       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Gain5_out1_1                     : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Constant15_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant16_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL value_within7_out1               : std_logic;
  SIGNAL Gain6_cast                       : unsigned(1 DOWNTO 0);  -- ufix2_E3
  SIGNAL Gain6_out1                       : std_logic;  -- ufix1_E3
  SIGNAL Gain6_out1_1                     : std_logic;  -- ufix1_E3
  SIGNAL Sum_of_Elements_add_cast         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Sum_of_Elements_add_cast_1       : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Sum_of_Elements_add_temp         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Sum_of_Elements_add_temp_1       : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Sum_of_Elements_add_cast_2       : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Sum_of_Elements_add_temp_2       : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Sum_of_Elements_add_temp_3       : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Sum_of_Elements_add_cast_3       : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Sum_of_Elements_add_temp_4       : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Sum_of_Elements_add_temp_5       : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Sum_of_Elements_add_cast_4       : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Sum_of_Elements_out1             : unsigned(8 DOWNTO 0);  -- ufix9

BEGIN
  u_value_within : value_within
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              higher_bound => Constant1_out1,  -- single
              value => angle,  -- single
              lower_bound => Constant2_out1,  -- single
              flag => value_within_out1
              );

  u_value_within1 : value_within
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              higher_bound => Constant3_out1,  -- single
              value => angle,  -- single
              lower_bound => Constant4_out1,  -- single
              flag => value_within1_out1
              );

  u_value_within2 : value_within
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              higher_bound => Constant5_out1,  -- single
              value => angle,  -- single
              lower_bound => Constant6_out1,  -- single
              flag => value_within2_out1
              );

  u_value_within3 : value_within3
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              lower_bound => Constant7_out1,  -- single
              value => angle,  -- single
              higher_bound => Constant8_out1,  -- single
              flag => value_within3_out1
              );

  u_value_within_pi : value_within_pi
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              lower_bound => Constant9_out1,  -- single
              value => angle,  -- single
              higher_bound => Constant10_out1,  -- single
              flag => value_within_pi_out1
              );

  u_value_within5 : value_within
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              higher_bound => Constant11_out1,  -- single
              value => angle,  -- single
              lower_bound => Constant12_out1,  -- single
              flag => value_within5_out1
              );

  u_value_within6 : value_within
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              higher_bound => Constant13_out1,  -- single
              value => angle,  -- single
              lower_bound => Constant14_out1,  -- single
              flag => value_within6_out1
              );

  u_value_within7 : value_within
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              higher_bound => Constant15_out1,  -- single
              value => angle,  -- single
              lower_bound => Constant16_out1,  -- single
              flag => value_within7_out1
              );

  Constant1_out1 <= X"3ec90fdb";

  Constant2_out1 <= X"bec90fdb";

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        value_within_out1_1 <= '0';
      ELSIF enb = '1' THEN
        value_within_out1_1 <= value_within_out1;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  Constant3_out1 <= X"3f96cbe4";

  Constant4_out1 <= X"3ec90fdb";

  Gain_cast <= '0' & value_within1_out1;
  Gain_out1 <= Gain_cast(0);

  delayMatch1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Gain_out1_1 <= '0';
      ELSIF enb = '1' THEN
        Gain_out1_1 <= Gain_out1;
      END IF;
    END IF;
  END PROCESS delayMatch1_process;


  kconst <= to_unsigned(16#3#, 2);

  Constant5_out1 <= X"3ffb53d1";

  Constant6_out1 <= X"3f96cbe4";

  
  Gain1_out1 <= kconst WHEN value_within2_out1 = '1' ELSE
      to_unsigned(16#0#, 2);

  PipelineRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Gain1_out1_1 <= to_unsigned(16#0#, 2);
      ELSIF enb = '1' THEN
        Gain1_out1_1 <= Gain1_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;


  Constant7_out1 <= X"402feddf";

  Constant8_out1 <= X"3ffb53d1";

  Gain2_cast <= '0' & value_within3_out1;
  Gain2_out1 <= Gain2_cast(0);

  delayMatch2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Gain2_out1_1 <= '0';
      ELSIF enb = '1' THEN
        Gain2_out1_1 <= Gain2_out1;
      END IF;
    END IF;
  END PROCESS delayMatch2_process;


  kconst_1 <= to_unsigned(16#5#, 3);

  Constant9_out1 <= X"c02feddf";

  Constant10_out1 <= X"402feddf";

  
  Gain3_out1 <= kconst_1 WHEN value_within_pi_out1 = '1' ELSE
      to_unsigned(16#0#, 3);

  PipelineRegister1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Gain3_out1_1 <= to_unsigned(16#0#, 3);
      ELSIF enb = '1' THEN
        Gain3_out1_1 <= Gain3_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister1_process;


  kconst_2 <= to_unsigned(16#3#, 2);

  Constant11_out1 <= X"bffb53d1";

  Constant12_out1 <= X"c02feddf";

  
  Gain4_in1 <= kconst_2 WHEN value_within5_out1 = '1' ELSE
      to_unsigned(16#0#, 2);
  Gain4_cast <= resize(Gain4_in1, 3);
  Gain4_out1 <= Gain4_cast(1 DOWNTO 0);

  PipelineRegister2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Gain4_out1_1 <= to_unsigned(16#0#, 2);
      ELSIF enb = '1' THEN
        Gain4_out1_1 <= Gain4_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister2_process;


  kconst_3 <= to_unsigned(16#7#, 3);

  Constant13_out1 <= X"bf96cbe4";

  Constant14_out1 <= X"bffb53d1";

  
  Gain5_out1 <= kconst_3 WHEN value_within6_out1 = '1' ELSE
      to_unsigned(16#0#, 3);

  PipelineRegister3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Gain5_out1_1 <= to_unsigned(16#0#, 3);
      ELSIF enb = '1' THEN
        Gain5_out1_1 <= Gain5_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister3_process;


  Constant15_out1 <= X"bec90fdb";

  Constant16_out1 <= X"bf96cbe4";

  Gain6_cast <= '0' & value_within7_out1;
  Gain6_out1 <= Gain6_cast(0);

  delayMatch3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Gain6_out1_1 <= '0';
      ELSIF enb = '1' THEN
        Gain6_out1_1 <= Gain6_out1;
      END IF;
    END IF;
  END PROCESS delayMatch3_process;


  Sum_of_Elements_add_cast <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & value_within_out1_1;
  Sum_of_Elements_add_cast_1 <= resize(unsigned'(Gain_out1_1 & '0'), 9);
  Sum_of_Elements_add_temp <= Sum_of_Elements_add_cast + Sum_of_Elements_add_cast_1;
  Sum_of_Elements_add_temp_1 <= Sum_of_Elements_add_temp + resize(Gain1_out1_1, 9);
  Sum_of_Elements_add_cast_2 <= resize(unsigned'(Gain2_out1_1 & '0' & '0'), 9);
  Sum_of_Elements_add_temp_2 <= Sum_of_Elements_add_temp_1 + Sum_of_Elements_add_cast_2;
  Sum_of_Elements_add_temp_3 <= Sum_of_Elements_add_temp_2 + resize(Gain3_out1_1, 9);
  Sum_of_Elements_add_cast_3 <= resize(Gain4_out1_1 & '0', 9);
  Sum_of_Elements_add_temp_4 <= Sum_of_Elements_add_temp_3 + Sum_of_Elements_add_cast_3;
  Sum_of_Elements_add_temp_5 <= Sum_of_Elements_add_temp_4 + resize(Gain5_out1_1, 9);
  Sum_of_Elements_add_cast_4 <= resize(unsigned'(Gain6_out1_1 & '0' & '0' & '0'), 9);
  Sum_of_Elements_out1 <= Sum_of_Elements_add_temp_5 + Sum_of_Elements_add_cast_4;

  index <= std_logic_vector(Sum_of_Elements_out1);

END rtl;


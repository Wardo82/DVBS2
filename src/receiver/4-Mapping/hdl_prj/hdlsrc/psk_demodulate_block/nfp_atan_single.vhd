-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\psk_demodulate_block\nfp_atan_single.vhd
-- Created: 2020-12-26 18:15:59
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: nfp_atan_single
-- Source Path: psk_demodulate_block/HDL_DUT/nfp_atan_single
-- Hierarchy Level: 1
-- 
-- {Latency Strategy = "Max"}
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.HDL_DUT_pac.ALL;

ENTITY nfp_atan_single IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        nfp_in                            :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        nfp_out                           :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
        );
END nfp_atan_single;


ARCHITECTURE rtl OF nfp_atan_single IS

  -- Signals
  SIGNAL nfp_in_unsigned                  : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL S                                : std_logic;  -- ufix1
  SIGNAL E                                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL M                                : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Delay12_reg                      : std_logic_vector(0 TO 35);  -- ufix1 [36]
  SIGNAL Delay12_reg_next                 : std_logic_vector(0 TO 35);  -- ufix1 [36]
  SIGNAL Delay12_out1                     : std_logic;
  SIGNAL Constant8_out1                   : std_logic;  -- ufix1
  SIGNAL Constant7_out1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Relational_Operator_relop1       : std_logic;
  SIGNAL Delay4_out1                      : std_logic;
  SIGNAL Logical_Operator2_out1           : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;  -- ufix1
  SIGNAL Add_out1                         : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay3_out1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Add_add_cast                     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant3_out1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay14_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL Delay15_out1                     : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Compare_To_Zero_out1             : std_logic;
  SIGNAL Logical_Operator_out1_1          : std_logic;
  SIGNAL Delay16_out1                     : std_logic;
  SIGNAL Compare_To_Zero1_out1            : std_logic;
  SIGNAL Delay17_out1                     : std_logic;
  SIGNAL Logical_Operator3_out1           : std_logic;
  SIGNAL Delay25_reg                      : std_logic_vector(0 TO 32);  -- ufix1 [33]
  SIGNAL Delay25_reg_next                 : std_logic_vector(0 TO 32);  -- ufix1 [33]
  SIGNAL Delay25_out1                     : std_logic;
  SIGNAL Constant4_out1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Constant4_out1_dtc               : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL Constant3_out1_1                 : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Constant3_out1_dtc               : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL Switch1_out1                     : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL Sum_sub_cast                     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Sum_sub_temp                     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Sum_out1                         : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL Delay1_out1                      : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL Compare_To_Constant_out1_1       : std_logic;
  SIGNAL Delay2_reg                       : std_logic_vector(0 TO 13);  -- ufix1 [14]
  SIGNAL Delay2_reg_next                  : std_logic_vector(0 TO 13);  -- ufix1 [14]
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL reduced_reg                      : vector_of_signed9(0 TO 12);  -- sfix9 [13]
  SIGNAL reduced_reg_next                 : vector_of_signed9(0 TO 12);  -- sfix9 [13]
  SIGNAL NormalizedMantissa_out1          : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL NormalizedMantissa_out1_1        : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL Constant6_out1                   : std_logic;
  SIGNAL Constant_out1                    : std_logic;
  SIGNAL Switch5_out1                     : std_logic;
  SIGNAL Bit_Concat_out1                  : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Delay3_out1_1                    : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Data_Type_Conversion_out1        : unsigned(23 DOWNTO 0);  -- ufix24_En23
  SIGNAL BitSlice_out1                    : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL DTC_out1                         : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL coeffs_table_out1                : vector_of_signed27(0 TO 31);  -- sfix27_En25 [32]
  SIGNAL coeffs_table_domain_out1         : signed(26 DOWNTO 0);  -- sfix27_En25
  SIGNAL Delay3_out1_2                    : signed(26 DOWNTO 0);  -- sfix27_En25
  SIGNAL DTC1_out1                        : signed(26 DOWNTO 0);  -- sfix27_En25
  SIGNAL Delay4_out1_1                    : signed(26 DOWNTO 0);  -- sfix27_En25
  SIGNAL res_x_mul_temp                   : signed(53 DOWNTO 0);  -- sfix54_En50
  SIGNAL res_x_out1                       : signed(26 DOWNTO 0);  -- sfix27_En25
  SIGNAL Delay5_reg                       : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL Delay5_reg_next                  : vector_of_signed27(0 TO 1);  -- sfix27_En25 [2]
  SIGNAL Delay5_out1                      : signed(26 DOWNTO 0);  -- sfix27_En25
  SIGNAL Delay1_out1_1                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL coeffs_table1_out1               : vector_of_signed27(0 TO 31);  -- sfix27_En25 [32]
  SIGNAL coeffs_table_domain_1_out1       : signed(26 DOWNTO 0);  -- sfix27_En25
  SIGNAL Delay6_reg                       : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL Delay6_reg_next                  : vector_of_signed27(0 TO 1);  -- sfix27_En25 [2]
  SIGNAL Delay6_out1                      : signed(26 DOWNTO 0);  -- sfix27_En25
  SIGNAL res_x_coeffs_2_1_add_cast        : signed(31 DOWNTO 0);  -- sfix32_En25
  SIGNAL res_x_coeffs_2_1_add_cast_1      : signed(31 DOWNTO 0);  -- sfix32_En25
  SIGNAL res_x_coeffs_2_1_add_temp        : signed(31 DOWNTO 0);  -- sfix32_En25
  SIGNAL res_x_coeffs_2_1_out1            : signed(26 DOWNTO 0);  -- sfix27_En26
  SIGNAL Delay8_out1                      : signed(26 DOWNTO 0);  -- sfix27_En26
  SIGNAL Delay13_reg                      : vector_of_signed27(0 TO 2);  -- sfix27 [3]
  SIGNAL Delay13_reg_next                 : vector_of_signed27(0 TO 2);  -- sfix27_En26 [3]
  SIGNAL Delay13_out1                     : signed(26 DOWNTO 0);  -- sfix27_En26
  SIGNAL fi_2_0_2_0_fm_out1               : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Delay7_reg                       : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL Delay7_reg_next                  : vector_of_signed27(0 TO 1);  -- sfix27_En25 [2]
  SIGNAL Delay7_out1                      : signed(26 DOWNTO 0);  -- sfix27_En25
  SIGNAL DTC5_out1                        : unsigned(26 DOWNTO 0);  -- ufix27_En26
  SIGNAL Delay9_out1                      : unsigned(26 DOWNTO 0);  -- ufix27_En26
  SIGNAL res_d_cast                       : signed(27 DOWNTO 0);  -- sfix28_En26
  SIGNAL res_d_mul_temp                   : signed(54 DOWNTO 0);  -- sfix55_En52
  SIGNAL res_d_cast_1                     : signed(53 DOWNTO 0);  -- sfix54_En52
  SIGNAL res_d_out1                       : unsigned(26 DOWNTO 0);  -- ufix27_En26
  SIGNAL Delay10_reg                      : vector_of_unsigned27(0 TO 1);  -- ufix27 [2]
  SIGNAL Delay10_reg_next                 : vector_of_unsigned27(0 TO 1);  -- ufix27_En26 [2]
  SIGNAL Delay10_out1                     : unsigned(26 DOWNTO 0);  -- ufix27_En26
  SIGNAL fi_2_0_2_0_fm_res_d_sub_cast     : signed(31 DOWNTO 0);  -- sfix32_En26
  SIGNAL fi_2_0_2_0_fm_res_d_sub_cast_1   : signed(31 DOWNTO 0);  -- sfix32_En26
  SIGNAL fi_2_0_2_0_fm_res_d_sub_temp     : signed(31 DOWNTO 0);  -- sfix32_En26
  SIGNAL fi_2_0_2_0_fm_res_d_out1         : unsigned(26 DOWNTO 0);  -- ufix27_En26
  SIGNAL Delay14_out1_1                   : unsigned(26 DOWNTO 0);  -- ufix27_En26
  SIGNAL res_fi_2_0_2_0_fm_res_cast       : signed(27 DOWNTO 0);  -- sfix28_En26
  SIGNAL res_fi_2_0_2_0_fm_res_mul_temp   : signed(54 DOWNTO 0);  -- sfix55_En52
  SIGNAL res_fi_2_0_2_0_fm_res_cast_1     : signed(53 DOWNTO 0);  -- sfix54_En52
  SIGNAL res_fi_2_0_2_0_fm_res_out1       : unsigned(26 DOWNTO 0);  -- ufix27_En26
  SIGNAL Delay12_reg_1                    : vector_of_unsigned27(0 TO 1);  -- ufix27 [2]
  SIGNAL Delay12_reg_next_1               : vector_of_unsigned27(0 TO 1);  -- ufix27_En26 [2]
  SIGNAL Delay12_out1_1                   : unsigned(26 DOWNTO 0);  -- ufix27_En26
  SIGNAL Abs_y                            : unsigned(27 DOWNTO 0);  -- ufix28_En26
  SIGNAL Abs_out1                         : unsigned(26 DOWNTO 0);  -- ufix27_En26
  SIGNAL Data_Type_Conversion_out1_1      : unsigned(26 DOWNTO 0);  -- ufix27
  SIGNAL Delay5_reg_1                     : vector_of_unsigned27(0 TO 1);  -- ufix27 [2]
  SIGNAL Delay5_reg_next_1                : vector_of_unsigned27(0 TO 1);  -- ufix27 [2]
  SIGNAL Delay5_out1_1                    : unsigned(26 DOWNTO 0);  -- ufix27
  SIGNAL Bit_Slice32_out1                 : std_logic;  -- ufix1
  SIGNAL Constant32_out1                  : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Bit_Slice33_out1                 : std_logic;  -- ufix1
  SIGNAL Constant33_out1                  : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Switch32_out1                    : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Bit_Slice34_out1                 : std_logic;  -- ufix1
  SIGNAL Constant34_out1                  : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Switch33_out1                    : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Constant35_out1                  : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Switch34_out1                    : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Delay3_out1_3                    : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Compare_To_Constant3_out1        : std_logic;
  SIGNAL Bit_Slice25_out1                 : std_logic;  -- ufix1
  SIGNAL Constant3_out1_2                 : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Bit_Slice24_out1                 : std_logic;  -- ufix1
  SIGNAL Constant2_out1                   : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Switch2_out1                     : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Bit_Slice27_out1                 : std_logic;  -- ufix1
  SIGNAL Constant1_out1                   : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Switch1_out1_1                   : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Bit_Slice15_out1                 : std_logic;  -- ufix1
  SIGNAL Constant124_out1                 : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Switch116_out1                   : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Bit_Slice16_out1                 : std_logic;  -- ufix1
  SIGNAL Constant28_out1                  : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Switch17_out1                    : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Bit_Slice17_out1                 : std_logic;  -- ufix1
  SIGNAL Constant26_out1                  : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Switch18_out1                    : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Bit_Slice28_out1                 : std_logic;  -- ufix1
  SIGNAL Constant27_out1                  : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Switch19_out1                    : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Bit_Slice29_out1                 : std_logic;  -- ufix1
  SIGNAL Constant29_out1                  : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Switch28_out1                    : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Constant30_out1                  : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Switch29_out1                    : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Delay5_out1_2                    : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Switch3_out1                     : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Compare_To_Constant5_out1        : std_logic;
  SIGNAL Bit_Slice29_out1_1               : std_logic;  -- ufix1
  SIGNAL Constant29_out1_1                : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Bit_Slice30_out1                 : std_logic;  -- ufix1
  SIGNAL Constant30_out1_1                : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Switch29_out1_1                  : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Bit_Slice31_out1                 : std_logic;  -- ufix1
  SIGNAL Constant31_out1                  : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Switch30_out1                    : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Bit_Slice32_out1_1               : std_logic;  -- ufix1
  SIGNAL Constant32_out1_1                : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Switch31_out1                    : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Bit_Slice33_out1_1               : std_logic;  -- ufix1
  SIGNAL Constant33_out1_1                : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Switch32_out1_1                  : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Bit_Slice34_out1_1               : std_logic;  -- ufix1
  SIGNAL Constant34_out1_1                : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Switch33_out1_1                  : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Bit_Slice35_out1                 : std_logic;  -- ufix1
  SIGNAL Constant35_out1_1                : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Switch34_out1_1                  : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Bit_Slice26_out1                 : std_logic;  -- ufix1
  SIGNAL Constant36_out1                  : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Switch35_out1                    : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Constant3_out1_3                 : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Switch3_out1_1                   : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Delay6_out1_1                    : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Compare_To_Constant4_out1        : std_logic;
  SIGNAL Bit_Slice26_out1_1               : std_logic;  -- ufix1
  SIGNAL Constant4_out1_1                 : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Bit_Slice25_out1_1               : std_logic;  -- ufix1
  SIGNAL Constant3_out1_4                 : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Switch3_out1_2                   : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Bit_Slice24_out1_1               : std_logic;  -- ufix1
  SIGNAL Constant2_out1_1                 : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Switch2_out1_1                   : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Bit_Slice27_out1_1               : std_logic;  -- ufix1
  SIGNAL Constant1_out1_1                 : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Switch1_out1_2                   : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Bit_Slice15_out1_1               : std_logic;  -- ufix1
  SIGNAL Constant124_out1_1               : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Switch116_out1_1                 : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Bit_Slice16_out1_1               : std_logic;  -- ufix1
  SIGNAL Constant28_out1_1                : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Switch17_out1_1                  : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Bit_Slice17_out1_1               : std_logic;  -- ufix1
  SIGNAL Constant26_out1_1                : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Switch18_out1_1                  : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Bit_Slice28_out1_1               : std_logic;  -- ufix1
  SIGNAL Constant27_out1_1                : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Switch19_out1_1                  : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Constant29_out1_2                : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Switch28_out1_1                  : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Delay8_out1_1                    : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Switch4_out1                     : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Switch5_out1_1                   : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Delay3_out1_4                    : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Shift_Arithmetic_out1            : unsigned(26 DOWNTO 0);  -- ufix27
  SIGNAL Delay7_out1_1                    : unsigned(26 DOWNTO 0);  -- ufix27
  SIGNAL Bit_Slice2_out1                  : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Bit_Slice4_out1                  : std_logic;  -- ufix1
  SIGNAL Bit_Slice5_out1                  : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1                  : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1                  : std_logic;  -- ufix1
  SIGNAL Bit_Reduce_out1                  : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1           : std_logic;
  SIGNAL Logical_Operator_out1_2          : std_logic;
  SIGNAL Bit_Slice1_out1_1                : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Bit_Slice1_out1_dtc              : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Constant2_out1_2                 : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Add1_out1                        : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Switch2_out1_2                   : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Bit_Slice5_out1_1                : std_logic;  -- ufix1
  SIGNAL Delay4_out1_2                    : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Sum2_sub_cast                    : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Sum2_sub_cast_1                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Sum2_sub_temp                    : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Sum2_out1                        : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL Delay2_out1_1                    : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL y_e_fi_exp_fimath_y_e_sub_temp   : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL y_e_fi_exp_fimath_y_e_out1       : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL Delay15_out1_1                   : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL if_exp_1_out1                    : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL Delay6_reg_1                     : vector_of_signed9(0 TO 1);  -- sfix9 [2]
  SIGNAL Delay6_reg_next_1                : vector_of_signed9(0 TO 1);  -- sfix9 [2]
  SIGNAL Delay6_out1_2                    : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL Delay7_reg_1                     : vector_of_signed9(0 TO 8);  -- sfix9 [9]
  SIGNAL Delay7_reg_next_1                : vector_of_signed9(0 TO 8);  -- sfix9 [9]
  SIGNAL Delay7_out1_2                    : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL exp_12_out1                      : std_logic;
  SIGNAL Delay28_reg                      : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL Delay28_reg_next                 : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL Delay28_out1                     : std_logic;
  SIGNAL Delay11_out1                     : std_logic;
  SIGNAL C1_out1                          : std_logic;
  SIGNAL C_out1                           : std_logic;
  SIGNAL if_exp_0_out1                    : std_logic;
  SIGNAL Delay12_out1_2                   : std_logic;
  SIGNAL Delay27_reg                      : std_logic_vector(0 TO 12);  -- ufix1 [13]
  SIGNAL Delay27_reg_next                 : std_logic_vector(0 TO 12);  -- ufix1 [13]
  SIGNAL Delay27_out1                     : std_logic;
  SIGNAL alphaadjustment_out1             : std_logic;
  SIGNAL exp_12_adjustment_out1           : std_logic;
  SIGNAL reduced_reg_1                    : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL reduced_reg_next_1               : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL exp_12_adjustment_out1_1         : std_logic;
  SIGNAL exp_2_out1                       : std_logic;
  SIGNAL reduced_reg_2                    : vector_of_unsigned24(0 TO 13);  -- ufix24 [14]
  SIGNAL reduced_reg_next_2               : vector_of_unsigned24(0 TO 13);  -- ufix24_En23 [14]
  SIGNAL NormalizedMantissa_out2          : unsigned(23 DOWNTO 0);  -- ufix24_En23
  SIGNAL reduced_reg_3                    : vector_of_unsigned24(0 TO 10);  -- ufix24 [11]
  SIGNAL reduced_reg_next_3               : vector_of_unsigned24(0 TO 10);  -- ufix24_En23 [11]
  SIGNAL NormalizedMantissa_out2_1        : unsigned(23 DOWNTO 0);  -- ufix24_En23
  SIGNAL x_m_1_out1                       : std_logic;
  SIGNAL Logical_Operator_out1_3          : std_logic;
  SIGNAL Delay11_reg                      : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay11_reg_next                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay11_out1_1                   : std_logic;
  SIGNAL exp_36_out1                      : std_logic;
  SIGNAL Delay4_reg                       : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay4_reg_next                  : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay4_out1_3                    : std_logic;
  SIGNAL C2_out1                          : unsigned(36 DOWNTO 0);  -- ufix37_En36
  SIGNAL alpha1_out1                      : std_logic;  -- ufix1
  SIGNAL Bit_Slice6_out1                  : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Bit_Shift2_out1                  : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Switch3_out1_3                   : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Delay11_out1_2                   : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Bit_Concat_out1_1                : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL reinterpretcast_y_m_numericty_out1 : unsigned(23 DOWNTO 0);  -- ufix24_En23
  SIGNAL Delay16_out1_1                   : unsigned(23 DOWNTO 0);  -- ufix24_En23
  SIGNAL if_exp_2_out1                    : unsigned(23 DOWNTO 0);  -- ufix24_En23
  SIGNAL DTC_out1_1                       : unsigned(36 DOWNTO 0);  -- ufix37_En36
  SIGNAL alphaexp_in0                     : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL alphaexp_out1                    : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL Delay8_out1_2                    : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL shift_arithmetic_zerosig         : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL shift_arithmetic_selsig          : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL Delay9_out1_1                    : unsigned(36 DOWNTO 0);  -- ufix37_En36
  SIGNAL dynamic_shift_zerosig            : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL dynamic_shift_selsig             : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL dynamic_shift_cast               : signed(15 DOWNTO 0);  -- int16
  SIGNAL Shift_Arithmetic_out1_1          : unsigned(36 DOWNTO 0);  -- ufix37_En36
  SIGNAL Delay7_out1_3                    : unsigned(36 DOWNTO 0);  -- ufix37_En36
  SIGNAL if_exp_36_out1                   : unsigned(36 DOWNTO 0);  -- ufix37_En36
  SIGNAL DTC_out1_2                       : unsigned(23 DOWNTO 0);  -- ufix24_En23
  SIGNAL DTC2_out1                        : signed(26 DOWNTO 0);  -- sfix27_En25
  SIGNAL Delay6_out1_3                    : signed(26 DOWNTO 0);  -- sfix27_En25
  SIGNAL Delay16_reg                      : vector_of_signed27(0 TO 2);  -- sfix27 [3]
  SIGNAL Delay16_reg_next                 : vector_of_signed27(0 TO 2);  -- sfix27_En25 [3]
  SIGNAL Delay16_out1_2                   : signed(26 DOWNTO 0);  -- sfix27_En25
  SIGNAL BitSlice_out1_1                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL DTC1_out1_1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL coeffs_table1_out1_1             : vector_of_signed27(0 TO 63);  -- sfix27_En25 [64]
  SIGNAL coeffs_table_domain_1_out1_1     : signed(26 DOWNTO 0);  -- sfix27_En25
  SIGNAL Delay7_out1_4                    : signed(26 DOWNTO 0);  -- sfix27_En25
  SIGNAL res_x_mul_temp_1                 : signed(53 DOWNTO 0);  -- sfix54_En50
  SIGNAL res_x_out1_1                     : signed(26 DOWNTO 0);  -- sfix27_En25
  SIGNAL Delay11_reg_1                    : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL Delay11_reg_next_1               : vector_of_signed27(0 TO 1);  -- sfix27_En25 [2]
  SIGNAL Delay11_out1_3                   : signed(26 DOWNTO 0);  -- sfix27_En25
  SIGNAL Delay8_out1_3                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL coeffs_table2_out1               : vector_of_signed27(0 TO 63);  -- sfix27_En25 [64]
  SIGNAL coeffs_table_domain_2_out1       : signed(26 DOWNTO 0);  -- sfix27_En25
  SIGNAL Delay13_reg_1                    : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL Delay13_reg_next_1               : vector_of_signed27(0 TO 1);  -- sfix27_En25 [2]
  SIGNAL Delay13_out1_1                   : signed(26 DOWNTO 0);  -- sfix27_En25
  SIGNAL res_x_coeffs_3_1_add_cast        : signed(31 DOWNTO 0);  -- sfix32_En25
  SIGNAL res_x_coeffs_3_1_add_cast_1      : signed(31 DOWNTO 0);  -- sfix32_En25
  SIGNAL res_x_coeffs_3_1_add_temp        : signed(31 DOWNTO 0);  -- sfix32_En25
  SIGNAL res_x_coeffs_3_1_out1            : signed(26 DOWNTO 0);  -- sfix27_En25
  SIGNAL Delay17_out1_1                   : signed(26 DOWNTO 0);  -- sfix27_En25
  SIGNAL res_x_mul_temp_2                 : signed(53 DOWNTO 0);  -- sfix54_En50
  SIGNAL res_x_out1_2                     : signed(26 DOWNTO 0);  -- sfix27_En25
  SIGNAL Delay20_reg                      : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL Delay20_reg_next                 : vector_of_signed27(0 TO 1);  -- sfix27_En25 [2]
  SIGNAL Delay20_out1                     : signed(26 DOWNTO 0);  -- sfix27_En25
  SIGNAL Delay14_reg                      : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL Delay14_reg_next                 : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL Delay14_out1_2                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL coeffs_table3_out1               : vector_of_signed27(0 TO 63);  -- sfix27_En25 [64]
  SIGNAL coeffs_table_domain_3_out1       : signed(26 DOWNTO 0);  -- sfix27_En25
  SIGNAL Delay21_reg                      : vector_of_signed27(0 TO 2);  -- sfix27 [3]
  SIGNAL Delay21_reg_next                 : vector_of_signed27(0 TO 2);  -- sfix27_En25 [3]
  SIGNAL Delay21_out1                     : signed(26 DOWNTO 0);  -- sfix27_En25
  SIGNAL res_x_coeffs_2_1_add_cast_2      : signed(31 DOWNTO 0);  -- sfix32_En25
  SIGNAL res_x_coeffs_2_1_add_cast_3      : signed(31 DOWNTO 0);  -- sfix32_En25
  SIGNAL res_x_coeffs_2_1_add_temp_1      : signed(31 DOWNTO 0);  -- sfix32_En25
  SIGNAL res_x_coeffs_2_1_out1_1          : signed(26 DOWNTO 0);  -- sfix27_En25
  SIGNAL Delay23_out1                     : signed(26 DOWNTO 0);  -- sfix27_En25
  SIGNAL Delay25_reg_1                    : vector_of_unsigned37(0 TO 6);  -- ufix37 [7]
  SIGNAL Delay25_reg_next_1               : vector_of_unsigned37(0 TO 6);  -- ufix37_En36 [7]
  SIGNAL Delay25_out1_1                   : unsigned(36 DOWNTO 0);  -- ufix37_En36
  SIGNAL res_x_cast                       : signed(37 DOWNTO 0);  -- sfix38_En36
  SIGNAL res_x_mul_temp_3                 : signed(64 DOWNTO 0);  -- sfix65_En61
  SIGNAL res_x_out1_3                     : signed(63 DOWNTO 0);  -- sfix64_En61
  SIGNAL Delay24_reg                      : vector_of_signed64(0 TO 1);  -- sfix64 [2]
  SIGNAL Delay24_reg_next                 : vector_of_signed64(0 TO 1);  -- sfix64_En61 [2]
  SIGNAL Delay24_out1                     : signed(63 DOWNTO 0);  -- sfix64_En61
  SIGNAL Delay9_reg                       : vector_of_signed64(0 TO 1);  -- sfix64 [2]
  SIGNAL Delay9_reg_next                  : vector_of_signed64(0 TO 1);  -- sfix64_En61 [2]
  SIGNAL Delay9_out1_2                    : signed(63 DOWNTO 0);  -- sfix64_En61
  SIGNAL alphaexp_in0_1                   : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL alphaexp_out1_1                  : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL Delay2_out1_2                    : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL alphaexp_res_WordLength_out1     : std_logic;
  SIGNAL Delay13_out1_2                   : std_logic;
  SIGNAL C2_out1_1                        : signed(63 DOWNTO 0);  -- sfix64_En61
  SIGNAL Delay13_reg_2                    : vector_of_unsigned24(0 TO 1);  -- ufix24 [2]
  SIGNAL Delay13_reg_next_2               : vector_of_unsigned24(0 TO 1);  -- ufix24_En23 [2]
  SIGNAL Delay13_out1_3                   : unsigned(23 DOWNTO 0);  -- ufix24_En23
  SIGNAL Delay4_reg_1                     : vector_of_unsigned24(0 TO 8);  -- ufix24 [9]
  SIGNAL Delay4_reg_next_1                : vector_of_unsigned24(0 TO 8);  -- ufix24_En23 [9]
  SIGNAL Delay4_out1_4                    : unsigned(23 DOWNTO 0);  -- ufix24_En23
  SIGNAL dtc_out1_3                       : signed(63 DOWNTO 0);  -- sfix64_En61
  SIGNAL alphaexp1_in0                    : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL alphaexp1_out1                   : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL Delay1_out1_2                    : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL shift_arithmetic_zerosig_1       : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL shift_arithmetic_selsig_1        : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL Delay_out1                       : signed(63 DOWNTO 0);  -- sfix64_En61
  SIGNAL dynamic_shift_zerosig_1          : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL dynamic_shift_selsig_1           : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL dynamic_shift_cast_1             : signed(15 DOWNTO 0);  -- int16
  SIGNAL Shift_Arithmetic_out1_2          : signed(63 DOWNTO 0);  -- sfix64_En61
  SIGNAL Delay12_reg_2                    : vector_of_signed9(0 TO 1);  -- sfix9 [2]
  SIGNAL Delay12_reg_next_2               : vector_of_signed9(0 TO 1);  -- sfix9 [2]
  SIGNAL Delay12_out1_3                   : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL exp_1_out1                       : std_logic;
  SIGNAL C_out1_1                         : signed(63 DOWNTO 0);  -- sfix64_En61
  SIGNAL if_x_m_1_out1                    : signed(63 DOWNTO 0);  -- sfix64_En61
  SIGNAL Delay14_out1_3                   : signed(63 DOWNTO 0);  -- sfix64_En61
  SIGNAL if_exp_res_WordLength_out1       : signed(63 DOWNTO 0);  -- sfix64_En61
  SIGNAL if_exp_12_out1                   : signed(63 DOWNTO 0);  -- sfix64_En61
  SIGNAL Delay21_out1_1                   : signed(63 DOWNTO 0);  -- sfix64_En61
  SIGNAL Delay25_out1_2                   : signed(63 DOWNTO 0);  -- sfix64_En61
  SIGNAL alpha1_5707963267948966_out1     : signed(63 DOWNTO 0);  -- sfix64_En62
  SIGNAL alpha1_5_res_sub_cast            : signed(63 DOWNTO 0);  -- sfix64_En61
  SIGNAL alpha1_5_res_out1                : signed(63 DOWNTO 0);  -- sfix64_En61
  SIGNAL Delay24_out1_1                   : signed(63 DOWNTO 0);  -- sfix64_En61
  SIGNAL if_adjustment_out1               : signed(63 DOWNTO 0);  -- sfix64_En61
  SIGNAL DTC1_out1_2                      : unsigned(61 DOWNTO 0);  -- ufix62_En61
  SIGNAL Abs_y_1                          : unsigned(62 DOWNTO 0);  -- ufix63_En61
  SIGNAL Abs_out1_1                       : unsigned(61 DOWNTO 0);  -- ufix62_En61
  SIGNAL Data_Type_Conversion_out1_2      : unsigned(61 DOWNTO 0);  -- ufix62
  SIGNAL Delay5_reg_2                     : vector_of_unsigned62(0 TO 1);  -- ufix62 [2]
  SIGNAL Delay5_reg_next_2                : vector_of_unsigned62(0 TO 1);  -- ufix62 [2]
  SIGNAL Delay5_out1_3                    : unsigned(61 DOWNTO 0);  -- ufix62
  SIGNAL Bit_Slice32_out1_2               : std_logic;  -- ufix1
  SIGNAL Constant32_out1_2                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice33_out1_2               : std_logic;  -- ufix1
  SIGNAL Constant33_out1_2                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch32_out1_2                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice34_out1_2               : std_logic;  -- ufix1
  SIGNAL Constant34_out1_2                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch33_out1_2                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice15_out1_2               : std_logic;  -- ufix1
  SIGNAL Constant35_out1_2                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch34_out1_2                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice16_out1_2               : std_logic;  -- ufix1
  SIGNAL Constant28_out1_2                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch17_out1_2                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice17_out1_2               : std_logic;  -- ufix1
  SIGNAL Constant26_out1_2                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch18_out1_2                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant27_out1_2                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch19_out1_2                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Delay1_out1_3                    : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Compare_To_Constant1_out1        : std_logic;
  SIGNAL Bit_Slice25_out1_2               : std_logic;  -- ufix1
  SIGNAL Constant3_out1_5                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice24_out1_2               : std_logic;  -- ufix1
  SIGNAL Constant2_out1_3                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch2_out1_3                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice27_out1_2               : std_logic;  -- ufix1
  SIGNAL Constant1_out1_2                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch1_out1_3                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice15_out1_3               : std_logic;  -- ufix1
  SIGNAL Constant124_out1_2               : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch116_out1_2                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice16_out1_3               : std_logic;  -- ufix1
  SIGNAL Constant28_out1_3                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch17_out1_3                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice17_out1_3               : std_logic;  -- ufix1
  SIGNAL Constant26_out1_3                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch18_out1_3                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice28_out1_2               : std_logic;  -- ufix1
  SIGNAL Constant27_out1_3                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch19_out1_3                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice29_out1_2               : std_logic;  -- ufix1
  SIGNAL Constant29_out1_3                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch28_out1_2                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant30_out1_2                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch29_out1_2                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Delay2_out1_3                    : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch1_out1_4                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Compare_To_Constant7_out1        : std_logic;
  SIGNAL Bit_Slice29_out1_3               : std_logic;  -- ufix1
  SIGNAL Constant29_out1_4                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice30_out1_1               : std_logic;  -- ufix1
  SIGNAL Constant30_out1_3                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch29_out1_3                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice31_out1_1               : std_logic;  -- ufix1
  SIGNAL Constant31_out1_1                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch30_out1_1                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice32_out1_3               : std_logic;  -- ufix1
  SIGNAL Constant32_out1_3                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch31_out1_1                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice33_out1_3               : std_logic;  -- ufix1
  SIGNAL Constant33_out1_3                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch32_out1_3                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice34_out1_3               : std_logic;  -- ufix1
  SIGNAL Constant34_out1_3                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch33_out1_3                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice35_out1_1               : std_logic;  -- ufix1
  SIGNAL Constant35_out1_3                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch34_out1_3                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice26_out1_2               : std_logic;  -- ufix1
  SIGNAL Constant36_out1_1                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch35_out1_1                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant3_out1_6                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch3_out1_4                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Delay4_out1_5                    : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Compare_To_Constant2_out1        : std_logic;
  SIGNAL Bit_Slice26_out1_3               : std_logic;  -- ufix1
  SIGNAL Constant4_out1_2                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice25_out1_3               : std_logic;  -- ufix1
  SIGNAL Constant3_out1_7                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch3_out1_5                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice24_out1_3               : std_logic;  -- ufix1
  SIGNAL Constant2_out1_4                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch2_out1_4                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice27_out1_3               : std_logic;  -- ufix1
  SIGNAL Constant1_out1_3                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch1_out1_5                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice15_out1_4               : std_logic;  -- ufix1
  SIGNAL Constant124_out1_3               : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch116_out1_3                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice16_out1_4               : std_logic;  -- ufix1
  SIGNAL Constant28_out1_4                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch17_out1_4                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice17_out1_4               : std_logic;  -- ufix1
  SIGNAL Constant26_out1_4                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch18_out1_4                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice28_out1_3               : std_logic;  -- ufix1
  SIGNAL Constant27_out1_4                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch19_out1_4                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant29_out1_5                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch28_out1_3                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Delay7_out1_5                    : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch2_out1_5                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch6_out1                     : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Compare_To_Constant6_out1        : std_logic;
  SIGNAL Bit_Slice32_out1_4               : std_logic;  -- ufix1
  SIGNAL Constant32_out1_4                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice33_out1_4               : std_logic;  -- ufix1
  SIGNAL Constant33_out1_4                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch32_out1_4                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice34_out1_4               : std_logic;  -- ufix1
  SIGNAL Constant34_out1_4                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch33_out1_4                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice15_out1_5               : std_logic;  -- ufix1
  SIGNAL Constant35_out1_4                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch34_out1_4                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice16_out1_5               : std_logic;  -- ufix1
  SIGNAL Constant28_out1_5                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch17_out1_5                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice17_out1_5               : std_logic;  -- ufix1
  SIGNAL Constant26_out1_5                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch18_out1_5                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice28_out1_4               : std_logic;  -- ufix1
  SIGNAL Constant27_out1_5                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch19_out1_5                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice29_out1_4               : std_logic;  -- ufix1
  SIGNAL Constant29_out1_6                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch28_out1_4                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant30_out1_4                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch29_out1_4                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Delay3_out1_5                    : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Compare_To_Constant3_out1_1      : std_logic;
  SIGNAL Bit_Slice25_out1_4               : std_logic;  -- ufix1
  SIGNAL Constant3_out1_8                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice24_out1_4               : std_logic;  -- ufix1
  SIGNAL Constant2_out1_5                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch2_out1_6                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice27_out1_4               : std_logic;  -- ufix1
  SIGNAL Constant1_out1_4                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch1_out1_6                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice15_out1_6               : std_logic;  -- ufix1
  SIGNAL Constant124_out1_4               : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch116_out1_4                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice16_out1_6               : std_logic;  -- ufix1
  SIGNAL Constant28_out1_6                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch17_out1_6                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice17_out1_6               : std_logic;  -- ufix1
  SIGNAL Constant26_out1_6                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch18_out1_6                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice28_out1_5               : std_logic;  -- ufix1
  SIGNAL Constant27_out1_6                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch19_out1_6                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice29_out1_5               : std_logic;  -- ufix1
  SIGNAL Constant29_out1_7                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch28_out1_5                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant30_out1_5                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch29_out1_5                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Delay5_out1_4                    : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch3_out1_6                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Compare_To_Constant5_out1_1      : std_logic;
  SIGNAL Bit_Slice29_out1_6               : std_logic;  -- ufix1
  SIGNAL Constant29_out1_8                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice30_out1_2               : std_logic;  -- ufix1
  SIGNAL Constant30_out1_6                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch29_out1_6                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice31_out1_2               : std_logic;  -- ufix1
  SIGNAL Constant31_out1_2                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch30_out1_2                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice32_out1_5               : std_logic;  -- ufix1
  SIGNAL Constant32_out1_5                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch31_out1_2                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice33_out1_5               : std_logic;  -- ufix1
  SIGNAL Constant33_out1_5                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch32_out1_5                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice34_out1_5               : std_logic;  -- ufix1
  SIGNAL Constant34_out1_5                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch33_out1_5                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice35_out1_2               : std_logic;  -- ufix1
  SIGNAL Constant35_out1_5                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch34_out1_5                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice26_out1_4               : std_logic;  -- ufix1
  SIGNAL Constant36_out1_2                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch35_out1_2                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant3_out1_9                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch3_out1_7                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Delay6_out1_4                    : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Compare_To_Constant4_out1_1      : std_logic;
  SIGNAL Bit_Slice26_out1_5               : std_logic;  -- ufix1
  SIGNAL Constant4_out1_3                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice25_out1_5               : std_logic;  -- ufix1
  SIGNAL Constant3_out1_10                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch3_out1_8                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice24_out1_5               : std_logic;  -- ufix1
  SIGNAL Constant2_out1_6                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch2_out1_7                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice27_out1_5               : std_logic;  -- ufix1
  SIGNAL Constant1_out1_5                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch1_out1_7                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice15_out1_7               : std_logic;  -- ufix1
  SIGNAL Constant124_out1_5               : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch116_out1_5                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice16_out1_7               : std_logic;  -- ufix1
  SIGNAL Constant28_out1_7                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch17_out1_7                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice17_out1_7               : std_logic;  -- ufix1
  SIGNAL Constant26_out1_7                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch18_out1_7                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice28_out1_6               : std_logic;  -- ufix1
  SIGNAL Constant27_out1_7                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch19_out1_7                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant29_out1_9                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch28_out1_6                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Delay8_out1_4                    : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch4_out1_1                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch5_out1_2                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch7_out1                     : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Delay3_out1_6                    : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Shift_Arithmetic_out1_3          : unsigned(61 DOWNTO 0);  -- ufix62
  SIGNAL Delay7_out1_6                    : unsigned(61 DOWNTO 0);  -- ufix62
  SIGNAL Bit_Slice2_out1_1                : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Bit_Slice4_out1_1                : std_logic;  -- ufix1
  SIGNAL Bit_Slice5_out1_2                : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_1                : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_2                : unsigned(35 DOWNTO 0);  -- ufix36
  SIGNAL Bit_Reduce_out1_1                : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_1         : std_logic;
  SIGNAL Logical_Operator_out1_4          : std_logic;
  SIGNAL Bit_Slice1_out1_3                : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Bit_Slice1_out1_dtc_1            : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Constant2_out1_7                 : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Add1_out1_1                      : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Switch2_out1_8                   : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Bit_Slice5_out1_3                : std_logic;  -- ufix1
  SIGNAL C1_out1_1                        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Sum1_sub_cast                    : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Sum1_sub_cast_1                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Sum1_sub_temp                    : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Sum1_out1                        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay2_out1_4                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Sum2_add_cast                    : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum2_out1_1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay6_out1_5                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL reinterpretcast_exp_numericty_out1 : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay29_reg                      : vector_of_unsigned8(0 TO 3);  -- ufix8 [4]
  SIGNAL Delay29_reg_next                 : vector_of_unsigned8(0 TO 3);  -- ufix8 [4]
  SIGNAL Delay29_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL C1_out1_2                        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL exp_127_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay32_reg                      : vector_of_unsigned8(0 TO 3);  -- ufix8 [4]
  SIGNAL Delay32_reg_next                 : vector_of_unsigned8(0 TO 3);  -- ufix8 [4]
  SIGNAL Delay32_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL if_exp_12_adjustment1_out1       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Constant5_out1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Constant4_out1_4                 : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Switch5_out1_3                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay26_reg                      : vector_of_unsigned8(0 TO 32);  -- ufix8 [33]
  SIGNAL Delay26_reg_next                 : vector_of_unsigned8(0 TO 32);  -- ufix8 [33]
  SIGNAL Delay26_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Switch1_out1_8                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Switch3_out1_9                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay11_out1_4                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Constant2_out1_8                 : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Bit_Slice6_out1_1                : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Bit_Shift2_out1_1                : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Switch3_out1_10                  : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Delay4_out1_6                    : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Delay26_reg_1                    : vector_of_unsigned24(0 TO 3);  -- ufix24 [4]
  SIGNAL Delay26_reg_next_1               : vector_of_unsigned24(0 TO 3);  -- ufix24_En23 [4]
  SIGNAL Delay26_out1_1                   : unsigned(23 DOWNTO 0);  -- ufix24_En23
  SIGNAL BitSlice_out1_2                  : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Delay33_reg                      : vector_of_unsigned23(0 TO 3);  -- ufix23 [4]
  SIGNAL Delay33_reg_next                 : vector_of_unsigned23(0 TO 3);  -- ufix23 [4]
  SIGNAL Delay33_out1                     : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL if_exp_12_adjustment2_out1       : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Delay18_out1                     : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Constant6_out1_1                 : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Switch6_out1_1                   : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Delay27_reg_1                    : vector_of_unsigned23(0 TO 32);  -- ufix23 [33]
  SIGNAL Delay27_reg_next_1               : vector_of_unsigned23(0 TO 32);  -- ufix23 [33]
  SIGNAL Delay27_out1_1                   : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Switch_out1                      : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Switch2_out1_9                   : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Delay10_out1_1                   : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL nfp_out_pack                     : unsigned(31 DOWNTO 0);  -- ufix32

BEGIN
  -- 
  -- 
  -- 4
  -- 
  -- 4
  -- 
  -- 4

  nfp_in_unsigned <= unsigned(nfp_in);

  -- Split 32 bit word into FP sign, exponent, mantissa
  S <= nfp_in_unsigned(31);
  E <= nfp_in_unsigned(30 DOWNTO 23);
  M <= nfp_in_unsigned(22 DOWNTO 0);

  Delay12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay12_reg(0) <= '0';
        Delay12_reg(1) <= '0';
        Delay12_reg(2) <= '0';
        Delay12_reg(3) <= '0';
        Delay12_reg(4) <= '0';
        Delay12_reg(5) <= '0';
        Delay12_reg(6) <= '0';
        Delay12_reg(7) <= '0';
        Delay12_reg(8) <= '0';
        Delay12_reg(9) <= '0';
        Delay12_reg(10) <= '0';
        Delay12_reg(11) <= '0';
        Delay12_reg(12) <= '0';
        Delay12_reg(13) <= '0';
        Delay12_reg(14) <= '0';
        Delay12_reg(15) <= '0';
        Delay12_reg(16) <= '0';
        Delay12_reg(17) <= '0';
        Delay12_reg(18) <= '0';
        Delay12_reg(19) <= '0';
        Delay12_reg(20) <= '0';
        Delay12_reg(21) <= '0';
        Delay12_reg(22) <= '0';
        Delay12_reg(23) <= '0';
        Delay12_reg(24) <= '0';
        Delay12_reg(25) <= '0';
        Delay12_reg(26) <= '0';
        Delay12_reg(27) <= '0';
        Delay12_reg(28) <= '0';
        Delay12_reg(29) <= '0';
        Delay12_reg(30) <= '0';
        Delay12_reg(31) <= '0';
        Delay12_reg(32) <= '0';
        Delay12_reg(33) <= '0';
        Delay12_reg(34) <= '0';
        Delay12_reg(35) <= '0';
      ELSIF enb = '1' THEN
        Delay12_reg(0) <= Delay12_reg_next(0);
        Delay12_reg(1) <= Delay12_reg_next(1);
        Delay12_reg(2) <= Delay12_reg_next(2);
        Delay12_reg(3) <= Delay12_reg_next(3);
        Delay12_reg(4) <= Delay12_reg_next(4);
        Delay12_reg(5) <= Delay12_reg_next(5);
        Delay12_reg(6) <= Delay12_reg_next(6);
        Delay12_reg(7) <= Delay12_reg_next(7);
        Delay12_reg(8) <= Delay12_reg_next(8);
        Delay12_reg(9) <= Delay12_reg_next(9);
        Delay12_reg(10) <= Delay12_reg_next(10);
        Delay12_reg(11) <= Delay12_reg_next(11);
        Delay12_reg(12) <= Delay12_reg_next(12);
        Delay12_reg(13) <= Delay12_reg_next(13);
        Delay12_reg(14) <= Delay12_reg_next(14);
        Delay12_reg(15) <= Delay12_reg_next(15);
        Delay12_reg(16) <= Delay12_reg_next(16);
        Delay12_reg(17) <= Delay12_reg_next(17);
        Delay12_reg(18) <= Delay12_reg_next(18);
        Delay12_reg(19) <= Delay12_reg_next(19);
        Delay12_reg(20) <= Delay12_reg_next(20);
        Delay12_reg(21) <= Delay12_reg_next(21);
        Delay12_reg(22) <= Delay12_reg_next(22);
        Delay12_reg(23) <= Delay12_reg_next(23);
        Delay12_reg(24) <= Delay12_reg_next(24);
        Delay12_reg(25) <= Delay12_reg_next(25);
        Delay12_reg(26) <= Delay12_reg_next(26);
        Delay12_reg(27) <= Delay12_reg_next(27);
        Delay12_reg(28) <= Delay12_reg_next(28);
        Delay12_reg(29) <= Delay12_reg_next(29);
        Delay12_reg(30) <= Delay12_reg_next(30);
        Delay12_reg(31) <= Delay12_reg_next(31);
        Delay12_reg(32) <= Delay12_reg_next(32);
        Delay12_reg(33) <= Delay12_reg_next(33);
        Delay12_reg(34) <= Delay12_reg_next(34);
        Delay12_reg(35) <= Delay12_reg_next(35);
      END IF;
    END IF;
  END PROCESS Delay12_process;

  Delay12_out1 <= Delay12_reg(35);
  Delay12_reg_next(0) <= S;
  Delay12_reg_next(1) <= Delay12_reg(0);
  Delay12_reg_next(2) <= Delay12_reg(1);
  Delay12_reg_next(3) <= Delay12_reg(2);
  Delay12_reg_next(4) <= Delay12_reg(3);
  Delay12_reg_next(5) <= Delay12_reg(4);
  Delay12_reg_next(6) <= Delay12_reg(5);
  Delay12_reg_next(7) <= Delay12_reg(6);
  Delay12_reg_next(8) <= Delay12_reg(7);
  Delay12_reg_next(9) <= Delay12_reg(8);
  Delay12_reg_next(10) <= Delay12_reg(9);
  Delay12_reg_next(11) <= Delay12_reg(10);
  Delay12_reg_next(12) <= Delay12_reg(11);
  Delay12_reg_next(13) <= Delay12_reg(12);
  Delay12_reg_next(14) <= Delay12_reg(13);
  Delay12_reg_next(15) <= Delay12_reg(14);
  Delay12_reg_next(16) <= Delay12_reg(15);
  Delay12_reg_next(17) <= Delay12_reg(16);
  Delay12_reg_next(18) <= Delay12_reg(17);
  Delay12_reg_next(19) <= Delay12_reg(18);
  Delay12_reg_next(20) <= Delay12_reg(19);
  Delay12_reg_next(21) <= Delay12_reg(20);
  Delay12_reg_next(22) <= Delay12_reg(21);
  Delay12_reg_next(23) <= Delay12_reg(22);
  Delay12_reg_next(24) <= Delay12_reg(23);
  Delay12_reg_next(25) <= Delay12_reg(24);
  Delay12_reg_next(26) <= Delay12_reg(25);
  Delay12_reg_next(27) <= Delay12_reg(26);
  Delay12_reg_next(28) <= Delay12_reg(27);
  Delay12_reg_next(29) <= Delay12_reg(28);
  Delay12_reg_next(30) <= Delay12_reg(29);
  Delay12_reg_next(31) <= Delay12_reg(30);
  Delay12_reg_next(32) <= Delay12_reg(31);
  Delay12_reg_next(33) <= Delay12_reg(32);
  Delay12_reg_next(34) <= Delay12_reg(33);
  Delay12_reg_next(35) <= Delay12_reg(34);

  Constant8_out1 <= '1';

  Constant7_out1 <= to_unsigned(16#23#, 8);

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay4_out1 <= Relational_Operator_relop1;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  Logical_Operator2_out1 <=  NOT Delay4_out1;

  Logical_Operator_out1 <= Constant8_out1 AND Logical_Operator2_out1;

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay3_out1 <= Add_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  Add_add_cast <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & Logical_Operator_out1;
  Add_out1 <= Delay3_out1 + Add_add_cast;

  
  Relational_Operator_relop1 <= '1' WHEN Add_out1 > Constant7_out1 ELSE
      '0';

  Constant3_out1 <= to_unsigned(16#00#, 8);

  Delay14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay14_out1 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay14_out1 <= E;
      END IF;
    END IF;
  END PROCESS Delay14_process;


  
  Compare_To_Constant_out1 <= '1' WHEN Delay14_out1 = to_unsigned(16#FF#, 8) ELSE
      '0';

  Delay15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay15_out1 <= to_unsigned(16#000000#, 23);
      ELSIF enb = '1' THEN
        Delay15_out1 <= M;
      END IF;
    END IF;
  END PROCESS Delay15_process;


  
  Compare_To_Zero_out1 <= '1' WHEN Delay15_out1 > to_unsigned(16#000000#, 23) ELSE
      '0';

  Logical_Operator_out1_1 <= Compare_To_Constant_out1 AND Compare_To_Zero_out1;

  Delay16_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay16_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay16_out1 <= Logical_Operator_out1_1;
      END IF;
    END IF;
  END PROCESS Delay16_process;


  
  Compare_To_Zero1_out1 <= '1' WHEN Delay14_out1 = to_unsigned(16#00#, 8) ELSE
      '0';

  Delay17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay17_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay17_out1 <= Compare_To_Zero1_out1;
      END IF;
    END IF;
  END PROCESS Delay17_process;


  Logical_Operator3_out1 <= Delay16_out1 OR Delay17_out1;

  Delay25_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay25_reg(0) <= '0';
        Delay25_reg(1) <= '0';
        Delay25_reg(2) <= '0';
        Delay25_reg(3) <= '0';
        Delay25_reg(4) <= '0';
        Delay25_reg(5) <= '0';
        Delay25_reg(6) <= '0';
        Delay25_reg(7) <= '0';
        Delay25_reg(8) <= '0';
        Delay25_reg(9) <= '0';
        Delay25_reg(10) <= '0';
        Delay25_reg(11) <= '0';
        Delay25_reg(12) <= '0';
        Delay25_reg(13) <= '0';
        Delay25_reg(14) <= '0';
        Delay25_reg(15) <= '0';
        Delay25_reg(16) <= '0';
        Delay25_reg(17) <= '0';
        Delay25_reg(18) <= '0';
        Delay25_reg(19) <= '0';
        Delay25_reg(20) <= '0';
        Delay25_reg(21) <= '0';
        Delay25_reg(22) <= '0';
        Delay25_reg(23) <= '0';
        Delay25_reg(24) <= '0';
        Delay25_reg(25) <= '0';
        Delay25_reg(26) <= '0';
        Delay25_reg(27) <= '0';
        Delay25_reg(28) <= '0';
        Delay25_reg(29) <= '0';
        Delay25_reg(30) <= '0';
        Delay25_reg(31) <= '0';
        Delay25_reg(32) <= '0';
      ELSIF enb = '1' THEN
        Delay25_reg(0) <= Delay25_reg_next(0);
        Delay25_reg(1) <= Delay25_reg_next(1);
        Delay25_reg(2) <= Delay25_reg_next(2);
        Delay25_reg(3) <= Delay25_reg_next(3);
        Delay25_reg(4) <= Delay25_reg_next(4);
        Delay25_reg(5) <= Delay25_reg_next(5);
        Delay25_reg(6) <= Delay25_reg_next(6);
        Delay25_reg(7) <= Delay25_reg_next(7);
        Delay25_reg(8) <= Delay25_reg_next(8);
        Delay25_reg(9) <= Delay25_reg_next(9);
        Delay25_reg(10) <= Delay25_reg_next(10);
        Delay25_reg(11) <= Delay25_reg_next(11);
        Delay25_reg(12) <= Delay25_reg_next(12);
        Delay25_reg(13) <= Delay25_reg_next(13);
        Delay25_reg(14) <= Delay25_reg_next(14);
        Delay25_reg(15) <= Delay25_reg_next(15);
        Delay25_reg(16) <= Delay25_reg_next(16);
        Delay25_reg(17) <= Delay25_reg_next(17);
        Delay25_reg(18) <= Delay25_reg_next(18);
        Delay25_reg(19) <= Delay25_reg_next(19);
        Delay25_reg(20) <= Delay25_reg_next(20);
        Delay25_reg(21) <= Delay25_reg_next(21);
        Delay25_reg(22) <= Delay25_reg_next(22);
        Delay25_reg(23) <= Delay25_reg_next(23);
        Delay25_reg(24) <= Delay25_reg_next(24);
        Delay25_reg(25) <= Delay25_reg_next(25);
        Delay25_reg(26) <= Delay25_reg_next(26);
        Delay25_reg(27) <= Delay25_reg_next(27);
        Delay25_reg(28) <= Delay25_reg_next(28);
        Delay25_reg(29) <= Delay25_reg_next(29);
        Delay25_reg(30) <= Delay25_reg_next(30);
        Delay25_reg(31) <= Delay25_reg_next(31);
        Delay25_reg(32) <= Delay25_reg_next(32);
      END IF;
    END IF;
  END PROCESS Delay25_process;

  Delay25_out1 <= Delay25_reg(32);
  Delay25_reg_next(0) <= Logical_Operator3_out1;
  Delay25_reg_next(1) <= Delay25_reg(0);
  Delay25_reg_next(2) <= Delay25_reg(1);
  Delay25_reg_next(3) <= Delay25_reg(2);
  Delay25_reg_next(4) <= Delay25_reg(3);
  Delay25_reg_next(5) <= Delay25_reg(4);
  Delay25_reg_next(6) <= Delay25_reg(5);
  Delay25_reg_next(7) <= Delay25_reg(6);
  Delay25_reg_next(8) <= Delay25_reg(7);
  Delay25_reg_next(9) <= Delay25_reg(8);
  Delay25_reg_next(10) <= Delay25_reg(9);
  Delay25_reg_next(11) <= Delay25_reg(10);
  Delay25_reg_next(12) <= Delay25_reg(11);
  Delay25_reg_next(13) <= Delay25_reg(12);
  Delay25_reg_next(14) <= Delay25_reg(13);
  Delay25_reg_next(15) <= Delay25_reg(14);
  Delay25_reg_next(16) <= Delay25_reg(15);
  Delay25_reg_next(17) <= Delay25_reg(16);
  Delay25_reg_next(18) <= Delay25_reg(17);
  Delay25_reg_next(19) <= Delay25_reg(18);
  Delay25_reg_next(20) <= Delay25_reg(19);
  Delay25_reg_next(21) <= Delay25_reg(20);
  Delay25_reg_next(22) <= Delay25_reg(21);
  Delay25_reg_next(23) <= Delay25_reg(22);
  Delay25_reg_next(24) <= Delay25_reg(23);
  Delay25_reg_next(25) <= Delay25_reg(24);
  Delay25_reg_next(26) <= Delay25_reg(25);
  Delay25_reg_next(27) <= Delay25_reg(26);
  Delay25_reg_next(28) <= Delay25_reg(27);
  Delay25_reg_next(29) <= Delay25_reg(28);
  Delay25_reg_next(30) <= Delay25_reg(29);
  Delay25_reg_next(31) <= Delay25_reg(30);
  Delay25_reg_next(32) <= Delay25_reg(31);

  Constant4_out1 <= to_unsigned(16#7E#, 8);

  Constant4_out1_dtc <= signed(resize(Constant4_out1, 9));

  Constant3_out1_1 <= to_unsigned(16#7F#, 8);

  Constant3_out1_dtc <= signed(resize(Constant3_out1_1, 9));

  
  Switch1_out1 <= Constant4_out1_dtc WHEN Delay14_out1 = to_unsigned(16#00#, 8) ELSE
      Constant3_out1_dtc;

  Sum_sub_cast <= signed(resize(Delay14_out1, 32));
  Sum_sub_temp <= Sum_sub_cast - resize(Switch1_out1, 32);
  Sum_out1 <= Sum_sub_temp(8 DOWNTO 0);

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1 <= to_signed(16#000#, 9);
      ELSIF enb = '1' THEN
        Delay1_out1 <= Sum_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  
  Compare_To_Constant_out1_1 <= '1' WHEN Delay1_out1 >= to_signed(16#000#, 9) ELSE
      '0';

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_reg(0) <= '0';
        Delay2_reg(1) <= '0';
        Delay2_reg(2) <= '0';
        Delay2_reg(3) <= '0';
        Delay2_reg(4) <= '0';
        Delay2_reg(5) <= '0';
        Delay2_reg(6) <= '0';
        Delay2_reg(7) <= '0';
        Delay2_reg(8) <= '0';
        Delay2_reg(9) <= '0';
        Delay2_reg(10) <= '0';
        Delay2_reg(11) <= '0';
        Delay2_reg(12) <= '0';
        Delay2_reg(13) <= '0';
      ELSIF enb = '1' THEN
        Delay2_reg(0) <= Delay2_reg_next(0);
        Delay2_reg(1) <= Delay2_reg_next(1);
        Delay2_reg(2) <= Delay2_reg_next(2);
        Delay2_reg(3) <= Delay2_reg_next(3);
        Delay2_reg(4) <= Delay2_reg_next(4);
        Delay2_reg(5) <= Delay2_reg_next(5);
        Delay2_reg(6) <= Delay2_reg_next(6);
        Delay2_reg(7) <= Delay2_reg_next(7);
        Delay2_reg(8) <= Delay2_reg_next(8);
        Delay2_reg(9) <= Delay2_reg_next(9);
        Delay2_reg(10) <= Delay2_reg_next(10);
        Delay2_reg(11) <= Delay2_reg_next(11);
        Delay2_reg(12) <= Delay2_reg_next(12);
        Delay2_reg(13) <= Delay2_reg_next(13);
      END IF;
    END IF;
  END PROCESS Delay2_process;

  Delay2_out1 <= Delay2_reg(13);
  Delay2_reg_next(0) <= Compare_To_Constant_out1_1;
  Delay2_reg_next(1) <= Delay2_reg(0);
  Delay2_reg_next(2) <= Delay2_reg(1);
  Delay2_reg_next(3) <= Delay2_reg(2);
  Delay2_reg_next(4) <= Delay2_reg(3);
  Delay2_reg_next(5) <= Delay2_reg(4);
  Delay2_reg_next(6) <= Delay2_reg(5);
  Delay2_reg_next(7) <= Delay2_reg(6);
  Delay2_reg_next(8) <= Delay2_reg(7);
  Delay2_reg_next(9) <= Delay2_reg(8);
  Delay2_reg_next(10) <= Delay2_reg(9);
  Delay2_reg_next(11) <= Delay2_reg(10);
  Delay2_reg_next(12) <= Delay2_reg(11);
  Delay2_reg_next(13) <= Delay2_reg(12);

  reduced_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        reduced_reg(0) <= to_signed(16#000#, 9);
        reduced_reg(1) <= to_signed(16#000#, 9);
        reduced_reg(2) <= to_signed(16#000#, 9);
        reduced_reg(3) <= to_signed(16#000#, 9);
        reduced_reg(4) <= to_signed(16#000#, 9);
        reduced_reg(5) <= to_signed(16#000#, 9);
        reduced_reg(6) <= to_signed(16#000#, 9);
        reduced_reg(7) <= to_signed(16#000#, 9);
        reduced_reg(8) <= to_signed(16#000#, 9);
        reduced_reg(9) <= to_signed(16#000#, 9);
        reduced_reg(10) <= to_signed(16#000#, 9);
        reduced_reg(11) <= to_signed(16#000#, 9);
        reduced_reg(12) <= to_signed(16#000#, 9);
      ELSIF enb = '1' THEN
        reduced_reg(0) <= reduced_reg_next(0);
        reduced_reg(1) <= reduced_reg_next(1);
        reduced_reg(2) <= reduced_reg_next(2);
        reduced_reg(3) <= reduced_reg_next(3);
        reduced_reg(4) <= reduced_reg_next(4);
        reduced_reg(5) <= reduced_reg_next(5);
        reduced_reg(6) <= reduced_reg_next(6);
        reduced_reg(7) <= reduced_reg_next(7);
        reduced_reg(8) <= reduced_reg_next(8);
        reduced_reg(9) <= reduced_reg_next(9);
        reduced_reg(10) <= reduced_reg_next(10);
        reduced_reg(11) <= reduced_reg_next(11);
        reduced_reg(12) <= reduced_reg_next(12);
      END IF;
    END IF;
  END PROCESS reduced_process;

  NormalizedMantissa_out1 <= reduced_reg(12);
  reduced_reg_next(0) <= Delay1_out1;
  reduced_reg_next(1) <= reduced_reg(0);
  reduced_reg_next(2) <= reduced_reg(1);
  reduced_reg_next(3) <= reduced_reg(2);
  reduced_reg_next(4) <= reduced_reg(3);
  reduced_reg_next(5) <= reduced_reg(4);
  reduced_reg_next(6) <= reduced_reg(5);
  reduced_reg_next(7) <= reduced_reg(6);
  reduced_reg_next(8) <= reduced_reg(7);
  reduced_reg_next(9) <= reduced_reg(8);
  reduced_reg_next(10) <= reduced_reg(9);
  reduced_reg_next(11) <= reduced_reg(10);
  reduced_reg_next(12) <= reduced_reg(11);

  reduced_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        NormalizedMantissa_out1_1 <= to_signed(16#000#, 9);
      ELSIF enb = '1' THEN
        NormalizedMantissa_out1_1 <= NormalizedMantissa_out1;
      END IF;
    END IF;
  END PROCESS reduced_1_process;


  Constant6_out1 <= '0';

  Constant_out1 <= '1';

  
  Switch5_out1 <= Constant6_out1 WHEN Delay14_out1 = to_unsigned(16#00#, 8) ELSE
      Constant_out1;

  Bit_Concat_out1 <= Switch5_out1 & Delay15_out1;

  Delay3_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1_1 <= to_unsigned(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay3_out1_1 <= Bit_Concat_out1;
      END IF;
    END IF;
  END PROCESS Delay3_1_process;


  Data_Type_Conversion_out1 <= Delay3_out1_1;

  BitSlice_out1 <= Data_Type_Conversion_out1(22 DOWNTO 18);

  DTC_out1 <= resize(BitSlice_out1, 8);

  coeffs_table_out1(0) <= to_signed(-16#1F07C1F#, 27);
  coeffs_table_out1(1) <= to_signed(-16#1D347A5#, 27);
  coeffs_table_out1(2) <= to_signed(-16#1B89402#, 27);
  coeffs_table_out1(3) <= to_signed(-16#1A01A02#, 27);
  coeffs_table_out1(4) <= to_signed(-16#1899C0F#, 27);
  coeffs_table_out1(5) <= to_signed(-16#174E4B0#, 27);
  coeffs_table_out1(6) <= to_signed(-16#161C545#, 27);
  coeffs_table_out1(7) <= to_signed(-16#1501501#, 27);
  coeffs_table_out1(8) <= to_signed(-16#13FB014#, 27);
  coeffs_table_out1(9) <= to_signed(-16#13076EE#, 27);
  coeffs_table_out1(10) <= to_signed(-16#1224DAE#, 27);
  coeffs_table_out1(11) <= to_signed(-16#1151B9A#, 27);
  coeffs_table_out1(12) <= to_signed(-16#108CABB#, 27);
  coeffs_table_out1(13) <= to_signed(-16#0FD477B#, 27);
  coeffs_table_out1(14) <= to_signed(-16#0F2805B#, 27);
  coeffs_table_out1(15) <= to_signed(-16#0E865AC#, 27);
  coeffs_table_out1(16) <= to_signed(-16#0DEE95C#, 27);
  coeffs_table_out1(17) <= to_signed(-16#0D5FEBF#, 27);
  coeffs_table_out1(18) <= to_signed(-16#0CD9A67#, 27);
  coeffs_table_out1(19) <= to_signed(-16#0C5B201#, 27);
  coeffs_table_out1(20) <= to_signed(-16#0BE3C31#, 27);
  coeffs_table_out1(21) <= to_signed(-16#0B7307B#, 27);
  coeffs_table_out1(22) <= to_signed(-16#0B08727#, 27);
  coeffs_table_out1(23) <= to_signed(-16#0AA392F#, 27);
  coeffs_table_out1(24) <= to_signed(-16#0A44029#, 27);
  coeffs_table_out1(25) <= to_signed(-16#09E9639#, 27);
  coeffs_table_out1(26) <= to_signed(-16#0993603#, 27);
  coeffs_table_out1(27) <= to_signed(-16#0941A9D#, 27);
  coeffs_table_out1(28) <= to_signed(-16#08F3F83#, 27);
  coeffs_table_out1(29) <= to_signed(-16#08AA08F#, 27);
  coeffs_table_out1(30) <= to_signed(-16#08639F0#, 27);
  coeffs_table_out1(31) <= to_signed(-16#0820821#, 27);

  
  coeffs_table_domain_out1 <= coeffs_table_out1(0) WHEN DTC_out1 = to_unsigned(16#00#, 8) ELSE
      coeffs_table_out1(1) WHEN DTC_out1 = to_unsigned(16#01#, 8) ELSE
      coeffs_table_out1(2) WHEN DTC_out1 = to_unsigned(16#02#, 8) ELSE
      coeffs_table_out1(3) WHEN DTC_out1 = to_unsigned(16#03#, 8) ELSE
      coeffs_table_out1(4) WHEN DTC_out1 = to_unsigned(16#04#, 8) ELSE
      coeffs_table_out1(5) WHEN DTC_out1 = to_unsigned(16#05#, 8) ELSE
      coeffs_table_out1(6) WHEN DTC_out1 = to_unsigned(16#06#, 8) ELSE
      coeffs_table_out1(7) WHEN DTC_out1 = to_unsigned(16#07#, 8) ELSE
      coeffs_table_out1(8) WHEN DTC_out1 = to_unsigned(16#08#, 8) ELSE
      coeffs_table_out1(9) WHEN DTC_out1 = to_unsigned(16#09#, 8) ELSE
      coeffs_table_out1(10) WHEN DTC_out1 = to_unsigned(16#0A#, 8) ELSE
      coeffs_table_out1(11) WHEN DTC_out1 = to_unsigned(16#0B#, 8) ELSE
      coeffs_table_out1(12) WHEN DTC_out1 = to_unsigned(16#0C#, 8) ELSE
      coeffs_table_out1(13) WHEN DTC_out1 = to_unsigned(16#0D#, 8) ELSE
      coeffs_table_out1(14) WHEN DTC_out1 = to_unsigned(16#0E#, 8) ELSE
      coeffs_table_out1(15) WHEN DTC_out1 = to_unsigned(16#0F#, 8) ELSE
      coeffs_table_out1(16) WHEN DTC_out1 = to_unsigned(16#10#, 8) ELSE
      coeffs_table_out1(17) WHEN DTC_out1 = to_unsigned(16#11#, 8) ELSE
      coeffs_table_out1(18) WHEN DTC_out1 = to_unsigned(16#12#, 8) ELSE
      coeffs_table_out1(19) WHEN DTC_out1 = to_unsigned(16#13#, 8) ELSE
      coeffs_table_out1(20) WHEN DTC_out1 = to_unsigned(16#14#, 8) ELSE
      coeffs_table_out1(21) WHEN DTC_out1 = to_unsigned(16#15#, 8) ELSE
      coeffs_table_out1(22) WHEN DTC_out1 = to_unsigned(16#16#, 8) ELSE
      coeffs_table_out1(23) WHEN DTC_out1 = to_unsigned(16#17#, 8) ELSE
      coeffs_table_out1(24) WHEN DTC_out1 = to_unsigned(16#18#, 8) ELSE
      coeffs_table_out1(25) WHEN DTC_out1 = to_unsigned(16#19#, 8) ELSE
      coeffs_table_out1(26) WHEN DTC_out1 = to_unsigned(16#1A#, 8) ELSE
      coeffs_table_out1(27) WHEN DTC_out1 = to_unsigned(16#1B#, 8) ELSE
      coeffs_table_out1(28) WHEN DTC_out1 = to_unsigned(16#1C#, 8) ELSE
      coeffs_table_out1(29) WHEN DTC_out1 = to_unsigned(16#1D#, 8) ELSE
      coeffs_table_out1(30) WHEN DTC_out1 = to_unsigned(16#1E#, 8) ELSE
      coeffs_table_out1(31);

  Delay3_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1_2 <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Delay3_out1_2 <= coeffs_table_domain_out1;
      END IF;
    END IF;
  END PROCESS Delay3_2_process;


  DTC1_out1 <= signed(resize(Data_Type_Conversion_out1 & '0' & '0', 27));

  Delay4_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_out1_1 <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Delay4_out1_1 <= DTC1_out1;
      END IF;
    END IF;
  END PROCESS Delay4_1_process;


  res_x_mul_temp <= Delay3_out1_2 * Delay4_out1_1;
  res_x_out1 <= res_x_mul_temp(51 DOWNTO 25);

  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay5_reg(0) <= to_signed(16#0000000#, 27);
        Delay5_reg(1) <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Delay5_reg(0) <= Delay5_reg_next(0);
        Delay5_reg(1) <= Delay5_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay5_process;

  Delay5_out1 <= Delay5_reg(1);
  Delay5_reg_next(0) <= res_x_out1;
  Delay5_reg_next(1) <= Delay5_reg(0);

  Delay1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1_1 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay1_out1_1 <= DTC_out1;
      END IF;
    END IF;
  END PROCESS Delay1_1_process;


  coeffs_table1_out1(0) <= to_signed(16#3F06CD8#, 27);
  coeffs_table1_out1(1) <= to_signed(16#3D2500E#, 27);
  coeffs_table1_out1(2) <= to_signed(16#3B5F25E#, 27);
  coeffs_table1_out1(3) <= to_signed(16#39B2DFB#, 27);
  coeffs_table1_out1(4) <= to_signed(16#381E13A#, 27);
  coeffs_table1_out1(5) <= to_signed(16#369EE0B#, 27);
  coeffs_table1_out1(6) <= to_signed(16#353397D#, 27);
  coeffs_table1_out1(7) <= to_signed(16#33DAB59#, 27);
  coeffs_table1_out1(8) <= to_signed(16#3292DCE#, 27);
  coeffs_table1_out1(9) <= to_signed(16#315AD24#, 27);
  coeffs_table1_out1(10) <= to_signed(16#3031781#, 27);
  coeffs_table1_out1(11) <= to_signed(16#2F15CAD#, 27);
  coeffs_table1_out1(12) <= to_signed(16#2E06DE5#, 27);
  coeffs_table1_out1(13) <= to_signed(16#2D03DB6#, 27);
  coeffs_table1_out1(14) <= to_signed(16#2C0BFD1#, 27);
  coeffs_table1_out1(15) <= to_signed(16#2B1E8F4#, 27);
  coeffs_table1_out1(16) <= to_signed(16#2A3AEC7#, 27);
  coeffs_table1_out1(17) <= to_signed(16#29607CC#, 27);
  coeffs_table1_out1(18) <= to_signed(16#288EB43#, 27);
  coeffs_table1_out1(19) <= to_signed(16#27C511C#, 27);
  coeffs_table1_out1(20) <= to_signed(16#27031E1#, 27);
  coeffs_table1_out1(21) <= to_signed(16#26486AF#, 27);
  coeffs_table1_out1(22) <= to_signed(16#2594921#, 27);
  coeffs_table1_out1(23) <= to_signed(16#24E734B#, 27);
  coeffs_table1_out1(24) <= to_signed(16#243FFA9#, 27);
  coeffs_table1_out1(25) <= to_signed(16#239E91C#, 27);
  coeffs_table1_out1(26) <= to_signed(16#2302ADE#, 27);
  coeffs_table1_out1(27) <= to_signed(16#226C07A#, 27);
  coeffs_table1_out1(28) <= to_signed(16#21DA5C8#, 27);
  coeffs_table1_out1(29) <= to_signed(16#214D6E4#, 27);
  coeffs_table1_out1(30) <= to_signed(16#20C502C#, 27);
  coeffs_table1_out1(31) <= to_signed(16#2040E35#, 27);

  
  coeffs_table_domain_1_out1 <= coeffs_table1_out1(0) WHEN Delay1_out1_1 = to_unsigned(16#00#, 8) ELSE
      coeffs_table1_out1(1) WHEN Delay1_out1_1 = to_unsigned(16#01#, 8) ELSE
      coeffs_table1_out1(2) WHEN Delay1_out1_1 = to_unsigned(16#02#, 8) ELSE
      coeffs_table1_out1(3) WHEN Delay1_out1_1 = to_unsigned(16#03#, 8) ELSE
      coeffs_table1_out1(4) WHEN Delay1_out1_1 = to_unsigned(16#04#, 8) ELSE
      coeffs_table1_out1(5) WHEN Delay1_out1_1 = to_unsigned(16#05#, 8) ELSE
      coeffs_table1_out1(6) WHEN Delay1_out1_1 = to_unsigned(16#06#, 8) ELSE
      coeffs_table1_out1(7) WHEN Delay1_out1_1 = to_unsigned(16#07#, 8) ELSE
      coeffs_table1_out1(8) WHEN Delay1_out1_1 = to_unsigned(16#08#, 8) ELSE
      coeffs_table1_out1(9) WHEN Delay1_out1_1 = to_unsigned(16#09#, 8) ELSE
      coeffs_table1_out1(10) WHEN Delay1_out1_1 = to_unsigned(16#0A#, 8) ELSE
      coeffs_table1_out1(11) WHEN Delay1_out1_1 = to_unsigned(16#0B#, 8) ELSE
      coeffs_table1_out1(12) WHEN Delay1_out1_1 = to_unsigned(16#0C#, 8) ELSE
      coeffs_table1_out1(13) WHEN Delay1_out1_1 = to_unsigned(16#0D#, 8) ELSE
      coeffs_table1_out1(14) WHEN Delay1_out1_1 = to_unsigned(16#0E#, 8) ELSE
      coeffs_table1_out1(15) WHEN Delay1_out1_1 = to_unsigned(16#0F#, 8) ELSE
      coeffs_table1_out1(16) WHEN Delay1_out1_1 = to_unsigned(16#10#, 8) ELSE
      coeffs_table1_out1(17) WHEN Delay1_out1_1 = to_unsigned(16#11#, 8) ELSE
      coeffs_table1_out1(18) WHEN Delay1_out1_1 = to_unsigned(16#12#, 8) ELSE
      coeffs_table1_out1(19) WHEN Delay1_out1_1 = to_unsigned(16#13#, 8) ELSE
      coeffs_table1_out1(20) WHEN Delay1_out1_1 = to_unsigned(16#14#, 8) ELSE
      coeffs_table1_out1(21) WHEN Delay1_out1_1 = to_unsigned(16#15#, 8) ELSE
      coeffs_table1_out1(22) WHEN Delay1_out1_1 = to_unsigned(16#16#, 8) ELSE
      coeffs_table1_out1(23) WHEN Delay1_out1_1 = to_unsigned(16#17#, 8) ELSE
      coeffs_table1_out1(24) WHEN Delay1_out1_1 = to_unsigned(16#18#, 8) ELSE
      coeffs_table1_out1(25) WHEN Delay1_out1_1 = to_unsigned(16#19#, 8) ELSE
      coeffs_table1_out1(26) WHEN Delay1_out1_1 = to_unsigned(16#1A#, 8) ELSE
      coeffs_table1_out1(27) WHEN Delay1_out1_1 = to_unsigned(16#1B#, 8) ELSE
      coeffs_table1_out1(28) WHEN Delay1_out1_1 = to_unsigned(16#1C#, 8) ELSE
      coeffs_table1_out1(29) WHEN Delay1_out1_1 = to_unsigned(16#1D#, 8) ELSE
      coeffs_table1_out1(30) WHEN Delay1_out1_1 = to_unsigned(16#1E#, 8) ELSE
      coeffs_table1_out1(31);

  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay6_reg(0) <= to_signed(16#0000000#, 27);
        Delay6_reg(1) <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Delay6_reg(0) <= Delay6_reg_next(0);
        Delay6_reg(1) <= Delay6_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay6_process;

  Delay6_out1 <= Delay6_reg(1);
  Delay6_reg_next(0) <= coeffs_table_domain_1_out1;
  Delay6_reg_next(1) <= Delay6_reg(0);

  res_x_coeffs_2_1_add_cast <= resize(Delay5_out1, 32);
  res_x_coeffs_2_1_add_cast_1 <= resize(Delay6_out1, 32);
  res_x_coeffs_2_1_add_temp <= res_x_coeffs_2_1_add_cast + res_x_coeffs_2_1_add_cast_1;
  res_x_coeffs_2_1_out1 <= res_x_coeffs_2_1_add_temp(25 DOWNTO 0) & '0';

  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay8_out1 <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Delay8_out1 <= res_x_coeffs_2_1_out1;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  Delay13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay13_reg(0) <= to_signed(16#0000000#, 27);
        Delay13_reg(1) <= to_signed(16#0000000#, 27);
        Delay13_reg(2) <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Delay13_reg(0) <= Delay13_reg_next(0);
        Delay13_reg(1) <= Delay13_reg_next(1);
        Delay13_reg(2) <= Delay13_reg_next(2);
      END IF;
    END IF;
  END PROCESS Delay13_process;

  Delay13_out1 <= Delay13_reg(2);
  Delay13_reg_next(0) <= Delay8_out1;
  Delay13_reg_next(1) <= Delay13_reg(0);
  Delay13_reg_next(2) <= Delay13_reg(1);

  fi_2_0_2_0_fm_out1 <= to_unsigned(16#2#, 2);

  Delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay7_reg(0) <= to_signed(16#0000000#, 27);
        Delay7_reg(1) <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Delay7_reg(0) <= Delay7_reg_next(0);
        Delay7_reg(1) <= Delay7_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay7_process;

  Delay7_out1 <= Delay7_reg(1);
  Delay7_reg_next(0) <= Delay4_out1_1;
  Delay7_reg_next(1) <= Delay7_reg(0);

  DTC5_out1 <= unsigned(Delay7_out1(25 DOWNTO 0) & '0');

  Delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay9_out1 <= to_unsigned(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Delay9_out1 <= DTC5_out1;
      END IF;
    END IF;
  END PROCESS Delay9_process;


  res_d_cast <= signed(resize(Delay9_out1, 28));
  res_d_mul_temp <= Delay8_out1 * res_d_cast;
  res_d_cast_1 <= res_d_mul_temp(53 DOWNTO 0);
  res_d_out1 <= unsigned(res_d_cast_1(52 DOWNTO 26));

  Delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay10_reg(0) <= to_unsigned(16#0000000#, 27);
        Delay10_reg(1) <= to_unsigned(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Delay10_reg(0) <= Delay10_reg_next(0);
        Delay10_reg(1) <= Delay10_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay10_process;

  Delay10_out1 <= Delay10_reg(1);
  Delay10_reg_next(0) <= res_d_out1;
  Delay10_reg_next(1) <= Delay10_reg(0);

  fi_2_0_2_0_fm_res_d_sub_cast <= signed(resize(fi_2_0_2_0_fm_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32));
  fi_2_0_2_0_fm_res_d_sub_cast_1 <= signed(resize(Delay10_out1, 32));
  fi_2_0_2_0_fm_res_d_sub_temp <= fi_2_0_2_0_fm_res_d_sub_cast - fi_2_0_2_0_fm_res_d_sub_cast_1;
  fi_2_0_2_0_fm_res_d_out1 <= unsigned(fi_2_0_2_0_fm_res_d_sub_temp(26 DOWNTO 0));

  Delay14_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay14_out1_1 <= to_unsigned(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Delay14_out1_1 <= fi_2_0_2_0_fm_res_d_out1;
      END IF;
    END IF;
  END PROCESS Delay14_1_process;


  res_fi_2_0_2_0_fm_res_cast <= signed(resize(Delay14_out1_1, 28));
  res_fi_2_0_2_0_fm_res_mul_temp <= Delay13_out1 * res_fi_2_0_2_0_fm_res_cast;
  res_fi_2_0_2_0_fm_res_cast_1 <= res_fi_2_0_2_0_fm_res_mul_temp(53 DOWNTO 0);
  res_fi_2_0_2_0_fm_res_out1 <= unsigned(res_fi_2_0_2_0_fm_res_cast_1(52 DOWNTO 26));

  Delay12_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay12_reg_1(0) <= to_unsigned(16#0000000#, 27);
        Delay12_reg_1(1) <= to_unsigned(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Delay12_reg_1(0) <= Delay12_reg_next_1(0);
        Delay12_reg_1(1) <= Delay12_reg_next_1(1);
      END IF;
    END IF;
  END PROCESS Delay12_1_process;

  Delay12_out1_1 <= Delay12_reg_1(1);
  Delay12_reg_next_1(0) <= res_fi_2_0_2_0_fm_res_out1;
  Delay12_reg_next_1(1) <= Delay12_reg_1(0);

  Abs_y <= resize(Delay12_out1_1, 28);
  Abs_out1 <= Abs_y(26 DOWNTO 0);

  Data_Type_Conversion_out1_1 <= Abs_out1;

  Delay5_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay5_reg_1(0) <= to_unsigned(16#0000000#, 27);
        Delay5_reg_1(1) <= to_unsigned(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Delay5_reg_1(0) <= Delay5_reg_next_1(0);
        Delay5_reg_1(1) <= Delay5_reg_next_1(1);
      END IF;
    END IF;
  END PROCESS Delay5_1_process;

  Delay5_out1_1 <= Delay5_reg_1(1);
  Delay5_reg_next_1(0) <= Data_Type_Conversion_out1_1;
  Delay5_reg_next_1(1) <= Delay5_reg_1(0);

  Bit_Slice32_out1 <= Data_Type_Conversion_out1_1(24);

  Constant32_out1 <= to_unsigned(16#03#, 5);

  Bit_Slice33_out1 <= Data_Type_Conversion_out1_1(25);

  Constant33_out1 <= to_unsigned(16#02#, 5);

  
  Switch32_out1 <= Constant32_out1 WHEN Bit_Slice32_out1 = '0' ELSE
      Constant33_out1;

  Bit_Slice34_out1 <= Data_Type_Conversion_out1_1(26);

  Constant34_out1 <= to_unsigned(16#01#, 5);

  
  Switch33_out1 <= Switch32_out1 WHEN Bit_Slice33_out1 = '0' ELSE
      Constant34_out1;

  Constant35_out1 <= to_unsigned(16#00#, 5);

  
  Switch34_out1 <= Switch33_out1 WHEN Bit_Slice34_out1 = '0' ELSE
      Constant35_out1;

  Delay3_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1_3 <= to_unsigned(16#00#, 5);
      ELSIF enb = '1' THEN
        Delay3_out1_3 <= Switch34_out1;
      END IF;
    END IF;
  END PROCESS Delay3_3_process;


  
  Compare_To_Constant3_out1 <= '1' WHEN Delay3_out1_3 < to_unsigned(16#03#, 5) ELSE
      '0';

  Bit_Slice25_out1 <= Data_Type_Conversion_out1_1(16);

  Constant3_out1_2 <= to_unsigned(16#0B#, 5);

  Bit_Slice24_out1 <= Data_Type_Conversion_out1_1(17);

  Constant2_out1 <= to_unsigned(16#0A#, 5);

  
  Switch2_out1 <= Constant3_out1_2 WHEN Bit_Slice25_out1 = '0' ELSE
      Constant2_out1;

  Bit_Slice27_out1 <= Data_Type_Conversion_out1_1(18);

  Constant1_out1 <= to_unsigned(16#09#, 5);

  
  Switch1_out1_1 <= Switch2_out1 WHEN Bit_Slice24_out1 = '0' ELSE
      Constant1_out1;

  Bit_Slice15_out1 <= Data_Type_Conversion_out1_1(19);

  Constant124_out1 <= to_unsigned(16#08#, 5);

  
  Switch116_out1 <= Switch1_out1_1 WHEN Bit_Slice27_out1 = '0' ELSE
      Constant124_out1;

  Bit_Slice16_out1 <= Data_Type_Conversion_out1_1(20);

  Constant28_out1 <= to_unsigned(16#07#, 5);

  
  Switch17_out1 <= Switch116_out1 WHEN Bit_Slice15_out1 = '0' ELSE
      Constant28_out1;

  Bit_Slice17_out1 <= Data_Type_Conversion_out1_1(21);

  Constant26_out1 <= to_unsigned(16#06#, 5);

  
  Switch18_out1 <= Switch17_out1 WHEN Bit_Slice16_out1 = '0' ELSE
      Constant26_out1;

  Bit_Slice28_out1 <= Data_Type_Conversion_out1_1(22);

  Constant27_out1 <= to_unsigned(16#05#, 5);

  
  Switch19_out1 <= Switch18_out1 WHEN Bit_Slice17_out1 = '0' ELSE
      Constant27_out1;

  Bit_Slice29_out1 <= Data_Type_Conversion_out1_1(23);

  Constant29_out1 <= to_unsigned(16#04#, 5);

  
  Switch28_out1 <= Switch19_out1 WHEN Bit_Slice28_out1 = '0' ELSE
      Constant29_out1;

  Constant30_out1 <= to_unsigned(16#03#, 5);

  
  Switch29_out1 <= Switch28_out1 WHEN Bit_Slice29_out1 = '0' ELSE
      Constant30_out1;

  Delay5_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay5_out1_2 <= to_unsigned(16#00#, 5);
      ELSIF enb = '1' THEN
        Delay5_out1_2 <= Switch29_out1;
      END IF;
    END IF;
  END PROCESS Delay5_2_process;


  
  Switch3_out1 <= Delay5_out1_2 WHEN Compare_To_Constant3_out1 = '0' ELSE
      Delay3_out1_3;

  
  Compare_To_Constant5_out1 <= '1' WHEN Switch3_out1 < to_unsigned(16#0B#, 5) ELSE
      '0';

  Bit_Slice29_out1_1 <= Data_Type_Conversion_out1_1(8);

  Constant29_out1_1 <= to_unsigned(16#13#, 5);

  Bit_Slice30_out1 <= Data_Type_Conversion_out1_1(9);

  Constant30_out1_1 <= to_unsigned(16#12#, 5);

  
  Switch29_out1_1 <= Constant29_out1_1 WHEN Bit_Slice29_out1_1 = '0' ELSE
      Constant30_out1_1;

  Bit_Slice31_out1 <= Data_Type_Conversion_out1_1(10);

  Constant31_out1 <= to_unsigned(16#11#, 5);

  
  Switch30_out1 <= Switch29_out1_1 WHEN Bit_Slice30_out1 = '0' ELSE
      Constant31_out1;

  Bit_Slice32_out1_1 <= Data_Type_Conversion_out1_1(11);

  Constant32_out1_1 <= to_unsigned(16#10#, 5);

  
  Switch31_out1 <= Switch30_out1 WHEN Bit_Slice31_out1 = '0' ELSE
      Constant32_out1_1;

  Bit_Slice33_out1_1 <= Data_Type_Conversion_out1_1(12);

  Constant33_out1_1 <= to_unsigned(16#0F#, 5);

  
  Switch32_out1_1 <= Switch31_out1 WHEN Bit_Slice32_out1_1 = '0' ELSE
      Constant33_out1_1;

  Bit_Slice34_out1_1 <= Data_Type_Conversion_out1_1(13);

  Constant34_out1_1 <= to_unsigned(16#0E#, 5);

  
  Switch33_out1_1 <= Switch32_out1_1 WHEN Bit_Slice33_out1_1 = '0' ELSE
      Constant34_out1_1;

  Bit_Slice35_out1 <= Data_Type_Conversion_out1_1(14);

  Constant35_out1_1 <= to_unsigned(16#0D#, 5);

  
  Switch34_out1_1 <= Switch33_out1_1 WHEN Bit_Slice34_out1_1 = '0' ELSE
      Constant35_out1_1;

  Bit_Slice26_out1 <= Data_Type_Conversion_out1_1(15);

  Constant36_out1 <= to_unsigned(16#0C#, 5);

  
  Switch35_out1 <= Switch34_out1_1 WHEN Bit_Slice35_out1 = '0' ELSE
      Constant36_out1;

  Constant3_out1_3 <= to_unsigned(16#0B#, 5);

  
  Switch3_out1_1 <= Switch35_out1 WHEN Bit_Slice26_out1 = '0' ELSE
      Constant3_out1_3;

  Delay6_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay6_out1_1 <= to_unsigned(16#00#, 5);
      ELSIF enb = '1' THEN
        Delay6_out1_1 <= Switch3_out1_1;
      END IF;
    END IF;
  END PROCESS Delay6_1_process;


  
  Compare_To_Constant4_out1 <= '1' WHEN Delay6_out1_1 < to_unsigned(16#13#, 5) ELSE
      '0';

  Bit_Slice26_out1_1 <= Data_Type_Conversion_out1_1(0);

  Constant4_out1_1 <= to_unsigned(16#1B#, 5);

  Bit_Slice25_out1_1 <= Data_Type_Conversion_out1_1(1);

  Constant3_out1_4 <= to_unsigned(16#1A#, 5);

  
  Switch3_out1_2 <= Constant4_out1_1 WHEN Bit_Slice26_out1_1 = '0' ELSE
      Constant3_out1_4;

  Bit_Slice24_out1_1 <= Data_Type_Conversion_out1_1(2);

  Constant2_out1_1 <= to_unsigned(16#19#, 5);

  
  Switch2_out1_1 <= Switch3_out1_2 WHEN Bit_Slice25_out1_1 = '0' ELSE
      Constant2_out1_1;

  Bit_Slice27_out1_1 <= Data_Type_Conversion_out1_1(3);

  Constant1_out1_1 <= to_unsigned(16#18#, 5);

  
  Switch1_out1_2 <= Switch2_out1_1 WHEN Bit_Slice24_out1_1 = '0' ELSE
      Constant1_out1_1;

  Bit_Slice15_out1_1 <= Data_Type_Conversion_out1_1(4);

  Constant124_out1_1 <= to_unsigned(16#17#, 5);

  
  Switch116_out1_1 <= Switch1_out1_2 WHEN Bit_Slice27_out1_1 = '0' ELSE
      Constant124_out1_1;

  Bit_Slice16_out1_1 <= Data_Type_Conversion_out1_1(5);

  Constant28_out1_1 <= to_unsigned(16#16#, 5);

  
  Switch17_out1_1 <= Switch116_out1_1 WHEN Bit_Slice15_out1_1 = '0' ELSE
      Constant28_out1_1;

  Bit_Slice17_out1_1 <= Data_Type_Conversion_out1_1(6);

  Constant26_out1_1 <= to_unsigned(16#15#, 5);

  
  Switch18_out1_1 <= Switch17_out1_1 WHEN Bit_Slice16_out1_1 = '0' ELSE
      Constant26_out1_1;

  Bit_Slice28_out1_1 <= Data_Type_Conversion_out1_1(7);

  Constant27_out1_1 <= to_unsigned(16#14#, 5);

  
  Switch19_out1_1 <= Switch18_out1_1 WHEN Bit_Slice17_out1_1 = '0' ELSE
      Constant27_out1_1;

  Constant29_out1_2 <= to_unsigned(16#13#, 5);

  
  Switch28_out1_1 <= Switch19_out1_1 WHEN Bit_Slice28_out1_1 = '0' ELSE
      Constant29_out1_2;

  Delay8_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay8_out1_1 <= to_unsigned(16#00#, 5);
      ELSIF enb = '1' THEN
        Delay8_out1_1 <= Switch28_out1_1;
      END IF;
    END IF;
  END PROCESS Delay8_1_process;


  
  Switch4_out1 <= Delay8_out1_1 WHEN Compare_To_Constant4_out1 = '0' ELSE
      Delay6_out1_1;

  
  Switch5_out1_1 <= Switch4_out1 WHEN Compare_To_Constant5_out1 = '0' ELSE
      Switch3_out1;

  Delay3_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1_4 <= to_unsigned(16#00#, 5);
      ELSIF enb = '1' THEN
        Delay3_out1_4 <= Switch5_out1_1;
      END IF;
    END IF;
  END PROCESS Delay3_4_process;


  Shift_Arithmetic_out1 <= Delay5_out1_1 sll to_integer(Delay3_out1_4);

  Delay7_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay7_out1_1 <= to_unsigned(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Delay7_out1_1 <= Shift_Arithmetic_out1;
      END IF;
    END IF;
  END PROCESS Delay7_1_process;


  Bit_Slice2_out1 <= Delay7_out1_1(2 DOWNTO 1);

  Bit_Slice4_out1 <= Bit_Slice2_out1(0);

  Bit_Slice5_out1 <= Bit_Slice2_out1(1);

  Bit_Slice3_out1 <= Delay7_out1_1(3);

  Bit_Slice1_out1 <= Delay7_out1_1(0);

  Bit_Reduce_out1 <= Bit_Slice1_out1;

  Logical_Operator1_out1 <= Bit_Reduce_out1 OR (Bit_Slice4_out1 OR Bit_Slice3_out1);

  Logical_Operator_out1_2 <= Bit_Slice5_out1 AND Logical_Operator1_out1;

  Bit_Slice1_out1_1 <= Delay7_out1_1(25 DOWNTO 3);

  Bit_Slice1_out1_dtc <= resize(Bit_Slice1_out1_1, 24);

  Constant2_out1_2 <= to_unsigned(16#000001#, 23);

  Add1_out1 <= resize(resize(Constant2_out1_2, 32) + resize(Bit_Slice1_out1_1, 32), 24);

  
  Switch2_out1_2 <= Bit_Slice1_out1_dtc WHEN Logical_Operator_out1_2 = '0' ELSE
      Add1_out1;

  Bit_Slice5_out1_1 <= Switch2_out1_2(23);

  Delay4_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_out1_2 <= to_unsigned(16#00#, 5);
      ELSIF enb = '1' THEN
        Delay4_out1_2 <= Delay3_out1_4;
      END IF;
    END IF;
  END PROCESS Delay4_2_process;


  Sum2_sub_cast <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & Bit_Slice5_out1_1;
  Sum2_sub_cast_1 <= signed(resize(Delay4_out1_2, 32));
  Sum2_sub_temp <= Sum2_sub_cast - Sum2_sub_cast_1;
  Sum2_out1 <= Sum2_sub_temp(8 DOWNTO 0);

  Delay2_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_out1_1 <= to_signed(16#000#, 9);
      ELSIF enb = '1' THEN
        Delay2_out1_1 <= Sum2_out1;
      END IF;
    END IF;
  END PROCESS Delay2_1_process;


  y_e_fi_exp_fimath_y_e_sub_temp <= resize(Delay2_out1_1, 32) - resize(NormalizedMantissa_out1, 32);
  y_e_fi_exp_fimath_y_e_out1 <= y_e_fi_exp_fimath_y_e_sub_temp(8 DOWNTO 0);

  Delay15_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay15_out1_1 <= to_signed(16#000#, 9);
      ELSIF enb = '1' THEN
        Delay15_out1_1 <= y_e_fi_exp_fimath_y_e_out1;
      END IF;
    END IF;
  END PROCESS Delay15_1_process;


  
  if_exp_1_out1 <= NormalizedMantissa_out1_1 WHEN Delay2_out1 = '0' ELSE
      Delay15_out1_1;

  Delay6_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay6_reg_1(0) <= to_signed(16#000#, 9);
        Delay6_reg_1(1) <= to_signed(16#000#, 9);
      ELSIF enb = '1' THEN
        Delay6_reg_1(0) <= Delay6_reg_next_1(0);
        Delay6_reg_1(1) <= Delay6_reg_next_1(1);
      END IF;
    END IF;
  END PROCESS Delay6_2_process;

  Delay6_out1_2 <= Delay6_reg_1(1);
  Delay6_reg_next_1(0) <= if_exp_1_out1;
  Delay6_reg_next_1(1) <= Delay6_reg_1(0);

  Delay7_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay7_reg_1(0) <= to_signed(16#000#, 9);
        Delay7_reg_1(1) <= to_signed(16#000#, 9);
        Delay7_reg_1(2) <= to_signed(16#000#, 9);
        Delay7_reg_1(3) <= to_signed(16#000#, 9);
        Delay7_reg_1(4) <= to_signed(16#000#, 9);
        Delay7_reg_1(5) <= to_signed(16#000#, 9);
        Delay7_reg_1(6) <= to_signed(16#000#, 9);
        Delay7_reg_1(7) <= to_signed(16#000#, 9);
        Delay7_reg_1(8) <= to_signed(16#000#, 9);
      ELSIF enb = '1' THEN
        Delay7_reg_1(0) <= Delay7_reg_next_1(0);
        Delay7_reg_1(1) <= Delay7_reg_next_1(1);
        Delay7_reg_1(2) <= Delay7_reg_next_1(2);
        Delay7_reg_1(3) <= Delay7_reg_next_1(3);
        Delay7_reg_1(4) <= Delay7_reg_next_1(4);
        Delay7_reg_1(5) <= Delay7_reg_next_1(5);
        Delay7_reg_1(6) <= Delay7_reg_next_1(6);
        Delay7_reg_1(7) <= Delay7_reg_next_1(7);
        Delay7_reg_1(8) <= Delay7_reg_next_1(8);
      END IF;
    END IF;
  END PROCESS Delay7_2_process;

  Delay7_out1_2 <= Delay7_reg_1(8);
  Delay7_reg_next_1(0) <= Delay6_out1_2;
  Delay7_reg_next_1(1) <= Delay7_reg_1(0);
  Delay7_reg_next_1(2) <= Delay7_reg_1(1);
  Delay7_reg_next_1(3) <= Delay7_reg_1(2);
  Delay7_reg_next_1(4) <= Delay7_reg_1(3);
  Delay7_reg_next_1(5) <= Delay7_reg_1(4);
  Delay7_reg_next_1(6) <= Delay7_reg_1(5);
  Delay7_reg_next_1(7) <= Delay7_reg_1(6);
  Delay7_reg_next_1(8) <= Delay7_reg_1(7);

  
  exp_12_out1 <= '1' WHEN Delay7_out1_2 < to_signed(-16#00C#, 9) ELSE
      '0';

  Delay28_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay28_reg(0) <= '0';
        Delay28_reg(1) <= '0';
        Delay28_reg(2) <= '0';
        Delay28_reg(3) <= '0';
      ELSIF enb = '1' THEN
        Delay28_reg(0) <= Delay28_reg_next(0);
        Delay28_reg(1) <= Delay28_reg_next(1);
        Delay28_reg(2) <= Delay28_reg_next(2);
        Delay28_reg(3) <= Delay28_reg_next(3);
      END IF;
    END IF;
  END PROCESS Delay28_process;

  Delay28_out1 <= Delay28_reg(3);
  Delay28_reg_next(0) <= exp_12_out1;
  Delay28_reg_next(1) <= Delay28_reg(0);
  Delay28_reg_next(2) <= Delay28_reg(1);
  Delay28_reg_next(3) <= Delay28_reg(2);

  Delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay11_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay11_out1 <= Delay2_out1;
      END IF;
    END IF;
  END PROCESS Delay11_process;


  C1_out1 <= '0';

  C_out1 <= '1';

  
  if_exp_0_out1 <= C1_out1 WHEN Delay11_out1 = '0' ELSE
      C_out1;

  Delay12_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay12_out1_2 <= '0';
      ELSIF enb = '1' THEN
        Delay12_out1_2 <= if_exp_0_out1;
      END IF;
    END IF;
  END PROCESS Delay12_2_process;


  Delay27_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay27_reg(0) <= '0';
        Delay27_reg(1) <= '0';
        Delay27_reg(2) <= '0';
        Delay27_reg(3) <= '0';
        Delay27_reg(4) <= '0';
        Delay27_reg(5) <= '0';
        Delay27_reg(6) <= '0';
        Delay27_reg(7) <= '0';
        Delay27_reg(8) <= '0';
        Delay27_reg(9) <= '0';
        Delay27_reg(10) <= '0';
        Delay27_reg(11) <= '0';
        Delay27_reg(12) <= '0';
      ELSIF enb = '1' THEN
        Delay27_reg(0) <= Delay27_reg_next(0);
        Delay27_reg(1) <= Delay27_reg_next(1);
        Delay27_reg(2) <= Delay27_reg_next(2);
        Delay27_reg(3) <= Delay27_reg_next(3);
        Delay27_reg(4) <= Delay27_reg_next(4);
        Delay27_reg(5) <= Delay27_reg_next(5);
        Delay27_reg(6) <= Delay27_reg_next(6);
        Delay27_reg(7) <= Delay27_reg_next(7);
        Delay27_reg(8) <= Delay27_reg_next(8);
        Delay27_reg(9) <= Delay27_reg_next(9);
        Delay27_reg(10) <= Delay27_reg_next(10);
        Delay27_reg(11) <= Delay27_reg_next(11);
        Delay27_reg(12) <= Delay27_reg_next(12);
      END IF;
    END IF;
  END PROCESS Delay27_process;

  Delay27_out1 <= Delay27_reg(12);
  Delay27_reg_next(0) <= Delay12_out1_2;
  Delay27_reg_next(1) <= Delay27_reg(0);
  Delay27_reg_next(2) <= Delay27_reg(1);
  Delay27_reg_next(3) <= Delay27_reg(2);
  Delay27_reg_next(4) <= Delay27_reg(3);
  Delay27_reg_next(5) <= Delay27_reg(4);
  Delay27_reg_next(6) <= Delay27_reg(5);
  Delay27_reg_next(7) <= Delay27_reg(6);
  Delay27_reg_next(8) <= Delay27_reg(7);
  Delay27_reg_next(9) <= Delay27_reg(8);
  Delay27_reg_next(10) <= Delay27_reg(9);
  Delay27_reg_next(11) <= Delay27_reg(10);
  Delay27_reg_next(12) <= Delay27_reg(11);

  alphaadjustment_out1 <=  NOT Delay27_out1;

  exp_12_adjustment_out1 <= Delay28_out1 AND alphaadjustment_out1;

  reduced_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        reduced_reg_1(0) <= '0';
        reduced_reg_1(1) <= '0';
        reduced_reg_1(2) <= '0';
        reduced_reg_1(3) <= '0';
      ELSIF enb = '1' THEN
        reduced_reg_1(0) <= reduced_reg_next_1(0);
        reduced_reg_1(1) <= reduced_reg_next_1(1);
        reduced_reg_1(2) <= reduced_reg_next_1(2);
        reduced_reg_1(3) <= reduced_reg_next_1(3);
      END IF;
    END IF;
  END PROCESS reduced_2_process;

  exp_12_adjustment_out1_1 <= reduced_reg_1(3);
  reduced_reg_next_1(0) <= exp_12_adjustment_out1;
  reduced_reg_next_1(1) <= reduced_reg_1(0);
  reduced_reg_next_1(2) <= reduced_reg_1(1);
  reduced_reg_next_1(3) <= reduced_reg_1(2);

  
  exp_2_out1 <= '1' WHEN Delay7_out1_2 = to_signed(16#000#, 9) ELSE
      '0';

  reduced_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        reduced_reg_2(0) <= to_unsigned(16#000000#, 24);
        reduced_reg_2(1) <= to_unsigned(16#000000#, 24);
        reduced_reg_2(2) <= to_unsigned(16#000000#, 24);
        reduced_reg_2(3) <= to_unsigned(16#000000#, 24);
        reduced_reg_2(4) <= to_unsigned(16#000000#, 24);
        reduced_reg_2(5) <= to_unsigned(16#000000#, 24);
        reduced_reg_2(6) <= to_unsigned(16#000000#, 24);
        reduced_reg_2(7) <= to_unsigned(16#000000#, 24);
        reduced_reg_2(8) <= to_unsigned(16#000000#, 24);
        reduced_reg_2(9) <= to_unsigned(16#000000#, 24);
        reduced_reg_2(10) <= to_unsigned(16#000000#, 24);
        reduced_reg_2(11) <= to_unsigned(16#000000#, 24);
        reduced_reg_2(12) <= to_unsigned(16#000000#, 24);
        reduced_reg_2(13) <= to_unsigned(16#000000#, 24);
      ELSIF enb = '1' THEN
        reduced_reg_2(0) <= reduced_reg_next_2(0);
        reduced_reg_2(1) <= reduced_reg_next_2(1);
        reduced_reg_2(2) <= reduced_reg_next_2(2);
        reduced_reg_2(3) <= reduced_reg_next_2(3);
        reduced_reg_2(4) <= reduced_reg_next_2(4);
        reduced_reg_2(5) <= reduced_reg_next_2(5);
        reduced_reg_2(6) <= reduced_reg_next_2(6);
        reduced_reg_2(7) <= reduced_reg_next_2(7);
        reduced_reg_2(8) <= reduced_reg_next_2(8);
        reduced_reg_2(9) <= reduced_reg_next_2(9);
        reduced_reg_2(10) <= reduced_reg_next_2(10);
        reduced_reg_2(11) <= reduced_reg_next_2(11);
        reduced_reg_2(12) <= reduced_reg_next_2(12);
        reduced_reg_2(13) <= reduced_reg_next_2(13);
      END IF;
    END IF;
  END PROCESS reduced_3_process;

  NormalizedMantissa_out2 <= reduced_reg_2(13);
  reduced_reg_next_2(0) <= Data_Type_Conversion_out1;
  reduced_reg_next_2(1) <= reduced_reg_2(0);
  reduced_reg_next_2(2) <= reduced_reg_2(1);
  reduced_reg_next_2(3) <= reduced_reg_2(2);
  reduced_reg_next_2(4) <= reduced_reg_2(3);
  reduced_reg_next_2(5) <= reduced_reg_2(4);
  reduced_reg_next_2(6) <= reduced_reg_2(5);
  reduced_reg_next_2(7) <= reduced_reg_2(6);
  reduced_reg_next_2(8) <= reduced_reg_2(7);
  reduced_reg_next_2(9) <= reduced_reg_2(8);
  reduced_reg_next_2(10) <= reduced_reg_2(9);
  reduced_reg_next_2(11) <= reduced_reg_2(10);
  reduced_reg_next_2(12) <= reduced_reg_2(11);
  reduced_reg_next_2(13) <= reduced_reg_2(12);

  reduced_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        reduced_reg_3(0) <= to_unsigned(16#000000#, 24);
        reduced_reg_3(1) <= to_unsigned(16#000000#, 24);
        reduced_reg_3(2) <= to_unsigned(16#000000#, 24);
        reduced_reg_3(3) <= to_unsigned(16#000000#, 24);
        reduced_reg_3(4) <= to_unsigned(16#000000#, 24);
        reduced_reg_3(5) <= to_unsigned(16#000000#, 24);
        reduced_reg_3(6) <= to_unsigned(16#000000#, 24);
        reduced_reg_3(7) <= to_unsigned(16#000000#, 24);
        reduced_reg_3(8) <= to_unsigned(16#000000#, 24);
        reduced_reg_3(9) <= to_unsigned(16#000000#, 24);
        reduced_reg_3(10) <= to_unsigned(16#000000#, 24);
      ELSIF enb = '1' THEN
        reduced_reg_3(0) <= reduced_reg_next_3(0);
        reduced_reg_3(1) <= reduced_reg_next_3(1);
        reduced_reg_3(2) <= reduced_reg_next_3(2);
        reduced_reg_3(3) <= reduced_reg_next_3(3);
        reduced_reg_3(4) <= reduced_reg_next_3(4);
        reduced_reg_3(5) <= reduced_reg_next_3(5);
        reduced_reg_3(6) <= reduced_reg_next_3(6);
        reduced_reg_3(7) <= reduced_reg_next_3(7);
        reduced_reg_3(8) <= reduced_reg_next_3(8);
        reduced_reg_3(9) <= reduced_reg_next_3(9);
        reduced_reg_3(10) <= reduced_reg_next_3(10);
      END IF;
    END IF;
  END PROCESS reduced_4_process;

  NormalizedMantissa_out2_1 <= reduced_reg_3(10);
  reduced_reg_next_3(0) <= NormalizedMantissa_out2;
  reduced_reg_next_3(1) <= reduced_reg_3(0);
  reduced_reg_next_3(2) <= reduced_reg_3(1);
  reduced_reg_next_3(3) <= reduced_reg_3(2);
  reduced_reg_next_3(4) <= reduced_reg_3(3);
  reduced_reg_next_3(5) <= reduced_reg_3(4);
  reduced_reg_next_3(6) <= reduced_reg_3(5);
  reduced_reg_next_3(7) <= reduced_reg_3(6);
  reduced_reg_next_3(8) <= reduced_reg_3(7);
  reduced_reg_next_3(9) <= reduced_reg_3(8);
  reduced_reg_next_3(10) <= reduced_reg_3(9);

  
  x_m_1_out1 <= '1' WHEN NormalizedMantissa_out2_1 = to_unsigned(16#800000#, 24) ELSE
      '0';

  Logical_Operator_out1_3 <= exp_2_out1 AND x_m_1_out1;

  Delay11_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay11_reg(0) <= '0';
        Delay11_reg(1) <= '0';
      ELSIF enb = '1' THEN
        Delay11_reg(0) <= Delay11_reg_next(0);
        Delay11_reg(1) <= Delay11_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay11_1_process;

  Delay11_out1_1 <= Delay11_reg(1);
  Delay11_reg_next(0) <= Logical_Operator_out1_3;
  Delay11_reg_next(1) <= Delay11_reg(0);

  
  exp_36_out1 <= '1' WHEN if_exp_1_out1 >= to_signed(-16#024#, 9) ELSE
      '0';

  Delay4_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_reg(0) <= '0';
        Delay4_reg(1) <= '0';
      ELSIF enb = '1' THEN
        Delay4_reg(0) <= Delay4_reg_next(0);
        Delay4_reg(1) <= Delay4_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay4_3_process;

  Delay4_out1_3 <= Delay4_reg(1);
  Delay4_reg_next(0) <= exp_36_out1;
  Delay4_reg_next(1) <= Delay4_reg(0);

  C2_out1 <= to_unsigned(0, 37);

  alpha1_out1 <= '1';

  Bit_Slice6_out1 <= Switch2_out1_2(22 DOWNTO 0);

  Bit_Shift2_out1 <= SHIFT_RIGHT(Bit_Slice6_out1, 1);

  
  Switch3_out1_3 <= Bit_Slice6_out1 WHEN Bit_Slice5_out1_1 = '0' ELSE
      Bit_Shift2_out1;

  Delay11_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay11_out1_2 <= to_unsigned(16#000000#, 23);
      ELSIF enb = '1' THEN
        Delay11_out1_2 <= Switch3_out1_3;
      END IF;
    END IF;
  END PROCESS Delay11_2_process;


  Bit_Concat_out1_1 <= alpha1_out1 & Delay11_out1_2;

  reinterpretcast_y_m_numericty_out1 <= Bit_Concat_out1_1;

  Delay16_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay16_out1_1 <= to_unsigned(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay16_out1_1 <= reinterpretcast_y_m_numericty_out1;
      END IF;
    END IF;
  END PROCESS Delay16_1_process;


  
  if_exp_2_out1 <= NormalizedMantissa_out2 WHEN Delay2_out1 = '0' ELSE
      Delay16_out1_1;

  DTC_out1_1 <= if_exp_2_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';

  alphaexp_in0 <=  - (resize(if_exp_1_out1, 10));
  alphaexp_out1 <= alphaexp_in0(8 DOWNTO 0);

  Delay8_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay8_out1_2 <= to_signed(16#000#, 9);
      ELSIF enb = '1' THEN
        Delay8_out1_2 <= alphaexp_out1;
      END IF;
    END IF;
  END PROCESS Delay8_2_process;


  shift_arithmetic_zerosig <= to_signed(16#000#, 9);

  
  shift_arithmetic_selsig <= Delay8_out1_2 WHEN Delay8_out1_2 >= shift_arithmetic_zerosig ELSE
      shift_arithmetic_zerosig;

  Delay9_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay9_out1_1 <= to_unsigned(0, 37);
      ELSIF enb = '1' THEN
        Delay9_out1_1 <= DTC_out1_1;
      END IF;
    END IF;
  END PROCESS Delay9_1_process;


  dynamic_shift_zerosig <= to_signed(16#000#, 9);

  
  dynamic_shift_selsig <= shift_arithmetic_selsig WHEN shift_arithmetic_selsig >= dynamic_shift_zerosig ELSE
      dynamic_shift_zerosig;

  dynamic_shift_cast <= resize(dynamic_shift_selsig, 16);
  Shift_Arithmetic_out1_1 <= SHIFT_RIGHT(Delay9_out1_1, to_integer(dynamic_shift_cast));

  Delay7_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay7_out1_3 <= to_unsigned(0, 37);
      ELSIF enb = '1' THEN
        Delay7_out1_3 <= Shift_Arithmetic_out1_1;
      END IF;
    END IF;
  END PROCESS Delay7_3_process;


  
  if_exp_36_out1 <= C2_out1 WHEN Delay4_out1_3 = '0' ELSE
      Delay7_out1_3;

  DTC_out1_2 <= if_exp_36_out1(36 DOWNTO 13);

  DTC2_out1 <= signed(resize(DTC_out1_2 & '0' & '0', 27));

  Delay6_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay6_out1_3 <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Delay6_out1_3 <= DTC2_out1;
      END IF;
    END IF;
  END PROCESS Delay6_3_process;


  Delay16_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay16_reg(0) <= to_signed(16#0000000#, 27);
        Delay16_reg(1) <= to_signed(16#0000000#, 27);
        Delay16_reg(2) <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Delay16_reg(0) <= Delay16_reg_next(0);
        Delay16_reg(1) <= Delay16_reg_next(1);
        Delay16_reg(2) <= Delay16_reg_next(2);
      END IF;
    END IF;
  END PROCESS Delay16_2_process;

  Delay16_out1_2 <= Delay16_reg(2);
  Delay16_reg_next(0) <= Delay6_out1_3;
  Delay16_reg_next(1) <= Delay16_reg(0);
  Delay16_reg_next(2) <= Delay16_reg(1);

  BitSlice_out1_1 <= DTC_out1_2(22 DOWNTO 17);

  DTC1_out1_1 <= resize(BitSlice_out1_1, 8);

  coeffs_table1_out1_1(0) <= to_signed(-16#0AA9F13#, 27);
  coeffs_table1_out1_1(1) <= to_signed(-16#0AA525D#, 27);
  coeffs_table1_out1_1(2) <= to_signed(-16#0A9B95A#, 27);
  coeffs_table1_out1_1(3) <= to_signed(-16#0A8D4D5#, 27);
  coeffs_table1_out1_1(4) <= to_signed(-16#0A7A5FD#, 27);
  coeffs_table1_out1_1(5) <= to_signed(-16#0A62E61#, 27);
  coeffs_table1_out1_1(6) <= to_signed(-16#0A46FEC#, 27);
  coeffs_table1_out1_1(7) <= to_signed(-16#0A26CE1#, 27);
  coeffs_table1_out1_1(8) <= to_signed(-16#0A027D3#, 27);
  coeffs_table1_out1_1(9) <= to_signed(-16#09DA39F#, 27);
  coeffs_table1_out1_1(10) <= to_signed(-16#09AE366#, 27);
  coeffs_table1_out1_1(11) <= to_signed(-16#097EA85#, 27);
  coeffs_table1_out1_1(12) <= to_signed(-16#094BC8C#, 27);
  coeffs_table1_out1_1(13) <= to_signed(-16#0915D35#, 27);
  coeffs_table1_out1_1(14) <= to_signed(-16#08DD060#, 27);
  coeffs_table1_out1_1(15) <= to_signed(-16#08A1A03#, 27);
  coeffs_table1_out1_1(16) <= to_signed(-16#0863E2B#, 27);
  coeffs_table1_out1_1(17) <= to_signed(-16#08240EC#, 27);
  coeffs_table1_out1_1(18) <= to_signed(-16#07E265C#, 27);
  coeffs_table1_out1_1(19) <= to_signed(-16#079F28D#, 27);
  coeffs_table1_out1_1(20) <= to_signed(-16#075A985#, 27);
  coeffs_table1_out1_1(21) <= to_signed(-16#0714F35#, 27);
  coeffs_table1_out1_1(22) <= to_signed(-16#06CE778#, 27);
  coeffs_table1_out1_1(23) <= to_signed(-16#068760A#, 27);
  coeffs_table1_out1_1(24) <= to_signed(-16#063FE83#, 27);
  coeffs_table1_out1_1(25) <= to_signed(-16#05F8458#, 27);
  coeffs_table1_out1_1(26) <= to_signed(-16#05B0AD0#, 27);
  coeffs_table1_out1_1(27) <= to_signed(-16#0569506#, 27);
  coeffs_table1_out1_1(28) <= to_signed(-16#05225E8#, 27);
  coeffs_table1_out1_1(29) <= to_signed(-16#04DC030#, 27);
  coeffs_table1_out1_1(30) <= to_signed(-16#0496668#, 27);
  coeffs_table1_out1_1(31) <= to_signed(-16#0451AE6#, 27);
  coeffs_table1_out1_1(32) <= to_signed(-16#040DFD0#, 27);
  coeffs_table1_out1_1(33) <= to_signed(-16#03CB718#, 27);
  coeffs_table1_out1_1(34) <= to_signed(-16#038A27D#, 27);
  coeffs_table1_out1_1(35) <= to_signed(-16#034A38F#, 27);
  coeffs_table1_out1_1(36) <= to_signed(-16#030BBAF#, 27);
  coeffs_table1_out1_1(37) <= to_signed(-16#02CEC10#, 27);
  coeffs_table1_out1_1(38) <= to_signed(-16#02935B8#, 27);
  coeffs_table1_out1_1(39) <= to_signed(-16#0259986#, 27);
  coeffs_table1_out1_1(40) <= to_signed(-16#022182D#, 27);
  coeffs_table1_out1_1(41) <= to_signed(-16#01EB23F#, 27);
  coeffs_table1_out1_1(42) <= to_signed(-16#01B6828#, 27);
  coeffs_table1_out1_1(43) <= to_signed(-16#0183A33#, 27);
  coeffs_table1_out1_1(44) <= to_signed(-16#015288D#, 27);
  coeffs_table1_out1_1(45) <= to_signed(-16#0123348#, 27);
  coeffs_table1_out1_1(46) <= to_signed(-16#00F5A5A#, 27);
  coeffs_table1_out1_1(47) <= to_signed(-16#00C9DA2#, 27);
  coeffs_table1_out1_1(48) <= to_signed(-16#009FCEA#, 27);
  coeffs_table1_out1_1(49) <= to_signed(-16#00777E9#, 27);
  coeffs_table1_out1_1(50) <= to_signed(-16#0050E42#, 27);
  coeffs_table1_out1_1(51) <= to_signed(-16#002BF8C#, 27);
  coeffs_table1_out1_1(52) <= to_signed(-16#0008B4D#, 27);
  coeffs_table1_out1_1(53) <= to_signed(16#0018EFD#, 27);
  coeffs_table1_out1_1(54) <= to_signed(16#0038FE2#, 27);
  coeffs_table1_out1_1(55) <= to_signed(16#00577F8#, 27);
  coeffs_table1_out1_1(56) <= to_signed(16#00747DF#, 27);
  coeffs_table1_out1_1(57) <= to_signed(16#0090039#, 27);
  coeffs_table1_out1_1(58) <= to_signed(16#00AA1B1#, 27);
  coeffs_table1_out1_1(59) <= to_signed(16#00C2CF3#, 27);
  coeffs_table1_out1_1(60) <= to_signed(16#00DA2AE#, 27);
  coeffs_table1_out1_1(61) <= to_signed(16#00F0394#, 27);
  coeffs_table1_out1_1(62) <= to_signed(16#0105056#, 27);
  coeffs_table1_out1_1(63) <= to_signed(16#01189A6#, 27);

  
  coeffs_table_domain_1_out1_1 <= coeffs_table1_out1_1(0) WHEN DTC1_out1_1 = to_unsigned(16#00#, 8) ELSE
      coeffs_table1_out1_1(1) WHEN DTC1_out1_1 = to_unsigned(16#01#, 8) ELSE
      coeffs_table1_out1_1(2) WHEN DTC1_out1_1 = to_unsigned(16#02#, 8) ELSE
      coeffs_table1_out1_1(3) WHEN DTC1_out1_1 = to_unsigned(16#03#, 8) ELSE
      coeffs_table1_out1_1(4) WHEN DTC1_out1_1 = to_unsigned(16#04#, 8) ELSE
      coeffs_table1_out1_1(5) WHEN DTC1_out1_1 = to_unsigned(16#05#, 8) ELSE
      coeffs_table1_out1_1(6) WHEN DTC1_out1_1 = to_unsigned(16#06#, 8) ELSE
      coeffs_table1_out1_1(7) WHEN DTC1_out1_1 = to_unsigned(16#07#, 8) ELSE
      coeffs_table1_out1_1(8) WHEN DTC1_out1_1 = to_unsigned(16#08#, 8) ELSE
      coeffs_table1_out1_1(9) WHEN DTC1_out1_1 = to_unsigned(16#09#, 8) ELSE
      coeffs_table1_out1_1(10) WHEN DTC1_out1_1 = to_unsigned(16#0A#, 8) ELSE
      coeffs_table1_out1_1(11) WHEN DTC1_out1_1 = to_unsigned(16#0B#, 8) ELSE
      coeffs_table1_out1_1(12) WHEN DTC1_out1_1 = to_unsigned(16#0C#, 8) ELSE
      coeffs_table1_out1_1(13) WHEN DTC1_out1_1 = to_unsigned(16#0D#, 8) ELSE
      coeffs_table1_out1_1(14) WHEN DTC1_out1_1 = to_unsigned(16#0E#, 8) ELSE
      coeffs_table1_out1_1(15) WHEN DTC1_out1_1 = to_unsigned(16#0F#, 8) ELSE
      coeffs_table1_out1_1(16) WHEN DTC1_out1_1 = to_unsigned(16#10#, 8) ELSE
      coeffs_table1_out1_1(17) WHEN DTC1_out1_1 = to_unsigned(16#11#, 8) ELSE
      coeffs_table1_out1_1(18) WHEN DTC1_out1_1 = to_unsigned(16#12#, 8) ELSE
      coeffs_table1_out1_1(19) WHEN DTC1_out1_1 = to_unsigned(16#13#, 8) ELSE
      coeffs_table1_out1_1(20) WHEN DTC1_out1_1 = to_unsigned(16#14#, 8) ELSE
      coeffs_table1_out1_1(21) WHEN DTC1_out1_1 = to_unsigned(16#15#, 8) ELSE
      coeffs_table1_out1_1(22) WHEN DTC1_out1_1 = to_unsigned(16#16#, 8) ELSE
      coeffs_table1_out1_1(23) WHEN DTC1_out1_1 = to_unsigned(16#17#, 8) ELSE
      coeffs_table1_out1_1(24) WHEN DTC1_out1_1 = to_unsigned(16#18#, 8) ELSE
      coeffs_table1_out1_1(25) WHEN DTC1_out1_1 = to_unsigned(16#19#, 8) ELSE
      coeffs_table1_out1_1(26) WHEN DTC1_out1_1 = to_unsigned(16#1A#, 8) ELSE
      coeffs_table1_out1_1(27) WHEN DTC1_out1_1 = to_unsigned(16#1B#, 8) ELSE
      coeffs_table1_out1_1(28) WHEN DTC1_out1_1 = to_unsigned(16#1C#, 8) ELSE
      coeffs_table1_out1_1(29) WHEN DTC1_out1_1 = to_unsigned(16#1D#, 8) ELSE
      coeffs_table1_out1_1(30) WHEN DTC1_out1_1 = to_unsigned(16#1E#, 8) ELSE
      coeffs_table1_out1_1(31) WHEN DTC1_out1_1 = to_unsigned(16#1F#, 8) ELSE
      coeffs_table1_out1_1(32) WHEN DTC1_out1_1 = to_unsigned(16#20#, 8) ELSE
      coeffs_table1_out1_1(33) WHEN DTC1_out1_1 = to_unsigned(16#21#, 8) ELSE
      coeffs_table1_out1_1(34) WHEN DTC1_out1_1 = to_unsigned(16#22#, 8) ELSE
      coeffs_table1_out1_1(35) WHEN DTC1_out1_1 = to_unsigned(16#23#, 8) ELSE
      coeffs_table1_out1_1(36) WHEN DTC1_out1_1 = to_unsigned(16#24#, 8) ELSE
      coeffs_table1_out1_1(37) WHEN DTC1_out1_1 = to_unsigned(16#25#, 8) ELSE
      coeffs_table1_out1_1(38) WHEN DTC1_out1_1 = to_unsigned(16#26#, 8) ELSE
      coeffs_table1_out1_1(39) WHEN DTC1_out1_1 = to_unsigned(16#27#, 8) ELSE
      coeffs_table1_out1_1(40) WHEN DTC1_out1_1 = to_unsigned(16#28#, 8) ELSE
      coeffs_table1_out1_1(41) WHEN DTC1_out1_1 = to_unsigned(16#29#, 8) ELSE
      coeffs_table1_out1_1(42) WHEN DTC1_out1_1 = to_unsigned(16#2A#, 8) ELSE
      coeffs_table1_out1_1(43) WHEN DTC1_out1_1 = to_unsigned(16#2B#, 8) ELSE
      coeffs_table1_out1_1(44) WHEN DTC1_out1_1 = to_unsigned(16#2C#, 8) ELSE
      coeffs_table1_out1_1(45) WHEN DTC1_out1_1 = to_unsigned(16#2D#, 8) ELSE
      coeffs_table1_out1_1(46) WHEN DTC1_out1_1 = to_unsigned(16#2E#, 8) ELSE
      coeffs_table1_out1_1(47) WHEN DTC1_out1_1 = to_unsigned(16#2F#, 8) ELSE
      coeffs_table1_out1_1(48) WHEN DTC1_out1_1 = to_unsigned(16#30#, 8) ELSE
      coeffs_table1_out1_1(49) WHEN DTC1_out1_1 = to_unsigned(16#31#, 8) ELSE
      coeffs_table1_out1_1(50) WHEN DTC1_out1_1 = to_unsigned(16#32#, 8) ELSE
      coeffs_table1_out1_1(51) WHEN DTC1_out1_1 = to_unsigned(16#33#, 8) ELSE
      coeffs_table1_out1_1(52) WHEN DTC1_out1_1 = to_unsigned(16#34#, 8) ELSE
      coeffs_table1_out1_1(53) WHEN DTC1_out1_1 = to_unsigned(16#35#, 8) ELSE
      coeffs_table1_out1_1(54) WHEN DTC1_out1_1 = to_unsigned(16#36#, 8) ELSE
      coeffs_table1_out1_1(55) WHEN DTC1_out1_1 = to_unsigned(16#37#, 8) ELSE
      coeffs_table1_out1_1(56) WHEN DTC1_out1_1 = to_unsigned(16#38#, 8) ELSE
      coeffs_table1_out1_1(57) WHEN DTC1_out1_1 = to_unsigned(16#39#, 8) ELSE
      coeffs_table1_out1_1(58) WHEN DTC1_out1_1 = to_unsigned(16#3A#, 8) ELSE
      coeffs_table1_out1_1(59) WHEN DTC1_out1_1 = to_unsigned(16#3B#, 8) ELSE
      coeffs_table1_out1_1(60) WHEN DTC1_out1_1 = to_unsigned(16#3C#, 8) ELSE
      coeffs_table1_out1_1(61) WHEN DTC1_out1_1 = to_unsigned(16#3D#, 8) ELSE
      coeffs_table1_out1_1(62) WHEN DTC1_out1_1 = to_unsigned(16#3E#, 8) ELSE
      coeffs_table1_out1_1(63);

  Delay7_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay7_out1_4 <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Delay7_out1_4 <= coeffs_table_domain_1_out1_1;
      END IF;
    END IF;
  END PROCESS Delay7_4_process;


  res_x_mul_temp_1 <= Delay7_out1_4 * Delay6_out1_3;
  res_x_out1_1 <= res_x_mul_temp_1(51 DOWNTO 25);

  Delay11_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay11_reg_1(0) <= to_signed(16#0000000#, 27);
        Delay11_reg_1(1) <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Delay11_reg_1(0) <= Delay11_reg_next_1(0);
        Delay11_reg_1(1) <= Delay11_reg_next_1(1);
      END IF;
    END IF;
  END PROCESS Delay11_3_process;

  Delay11_out1_3 <= Delay11_reg_1(1);
  Delay11_reg_next_1(0) <= res_x_out1_1;
  Delay11_reg_next_1(1) <= Delay11_reg_1(0);

  Delay8_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay8_out1_3 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay8_out1_3 <= DTC1_out1_1;
      END IF;
    END IF;
  END PROCESS Delay8_3_process;


  coeffs_table2_out1(0) <= to_signed(-16#0000018#, 27);
  coeffs_table2_out1(1) <= to_signed(-16#00002AE#, 27);
  coeffs_table2_out1(2) <= to_signed(-16#0000C6D#, 27);
  coeffs_table2_out1(3) <= to_signed(-16#0002209#, 27);
  coeffs_table2_out1(4) <= to_signed(-16#0004812#, 27);
  coeffs_table2_out1(5) <= to_signed(-16#00082EF#, 27);
  coeffs_table2_out1(6) <= to_signed(-16#000D6D0#, 27);
  coeffs_table2_out1(7) <= to_signed(-16#00147A5#, 27);
  coeffs_table2_out1(8) <= to_signed(-16#001D911#, 27);
  coeffs_table2_out1(9) <= to_signed(-16#0028E66#, 27);
  coeffs_table2_out1(10) <= to_signed(-16#0036A9C#, 27);
  coeffs_table2_out1(11) <= to_signed(-16#004704C#, 27);
  coeffs_table2_out1(12) <= to_signed(-16#005A1A9#, 27);
  coeffs_table2_out1(13) <= to_signed(-16#0070082#, 27);
  coeffs_table2_out1(14) <= to_signed(-16#0088E3B#, 27);
  coeffs_table2_out1(15) <= to_signed(-16#00A4BCF#, 27);
  coeffs_table2_out1(16) <= to_signed(-16#00C39D1#, 27);
  coeffs_table2_out1(17) <= to_signed(-16#00E586E#, 27);
  coeffs_table2_out1(18) <= to_signed(-16#010A770#, 27);
  coeffs_table2_out1(19) <= to_signed(-16#0132642#, 27);
  coeffs_table2_out1(20) <= to_signed(-16#015D3F3#, 27);
  coeffs_table2_out1(21) <= to_signed(-16#018AF41#, 27);
  coeffs_table2_out1(22) <= to_signed(-16#01BB69A#, 27);
  coeffs_table2_out1(23) <= to_signed(-16#01EE826#, 27);
  coeffs_table2_out1(24) <= to_signed(-16#02241CD#, 27);
  coeffs_table2_out1(25) <= to_signed(-16#025C140#, 27);
  coeffs_table2_out1(26) <= to_signed(-16#02963FD#, 27);
  coeffs_table2_out1(27) <= to_signed(-16#02D275C#, 27);
  coeffs_table2_out1(28) <= to_signed(-16#0310892#, 27);
  coeffs_table2_out1(29) <= to_signed(-16#03504BA#, 27);
  coeffs_table2_out1(30) <= to_signed(-16#03918DD#, 27);
  coeffs_table2_out1(31) <= to_signed(-16#03D41F9#, 27);
  coeffs_table2_out1(32) <= to_signed(-16#0417D04#, 27);
  coeffs_table2_out1(33) <= to_signed(-16#045C6F6#, 27);
  coeffs_table2_out1(34) <= to_signed(-16#04A1CCE#, 27);
  coeffs_table2_out1(35) <= to_signed(-16#04E7B94#, 27);
  coeffs_table2_out1(36) <= to_signed(-16#052E061#, 27);
  coeffs_table2_out1(37) <= to_signed(-16#0574862#, 27);
  coeffs_table2_out1(38) <= to_signed(-16#05BB0DA#, 27);
  coeffs_table2_out1(39) <= to_signed(-16#0601727#, 27);
  coeffs_table2_out1(40) <= to_signed(-16#06478C4#, 27);
  coeffs_table2_out1(41) <= to_signed(-16#068D34C#, 27);
  coeffs_table2_out1(42) <= to_signed(-16#06D2479#, 27);
  coeffs_table2_out1(43) <= to_signed(-16#0716A29#, 27);
  coeffs_table2_out1(44) <= to_signed(-16#075A25B#, 27);
  coeffs_table2_out1(45) <= to_signed(-16#079CB32#, 27);
  coeffs_table2_out1(46) <= to_signed(-16#07DE2F7#, 27);
  coeffs_table2_out1(47) <= to_signed(-16#081E813#, 27);
  coeffs_table2_out1(48) <= to_signed(-16#085D915#, 27);
  coeffs_table2_out1(49) <= to_signed(-16#089B4AF#, 27);
  coeffs_table2_out1(50) <= to_signed(-16#08D79B2#, 27);
  coeffs_table2_out1(51) <= to_signed(-16#0912714#, 27);
  coeffs_table2_out1(52) <= to_signed(-16#094BBE9#, 27);
  coeffs_table2_out1(53) <= to_signed(-16#0983764#, 27);
  coeffs_table2_out1(54) <= to_signed(-16#09B98D7#, 27);
  coeffs_table2_out1(55) <= to_signed(-16#09EDFAE#, 27);
  coeffs_table2_out1(56) <= to_signed(-16#0A20B72#, 27);
  coeffs_table2_out1(57) <= to_signed(-16#0A51BC4#, 27);
  coeffs_table2_out1(58) <= to_signed(-16#0A81060#, 27);
  coeffs_table2_out1(59) <= to_signed(-16#0AAE914#, 27);
  coeffs_table2_out1(60) <= to_signed(-16#0ADA5C6#, 27);
  coeffs_table2_out1(61) <= to_signed(-16#0B0466F#, 27);
  coeffs_table2_out1(62) <= to_signed(-16#0B2CB1A#, 27);
  coeffs_table2_out1(63) <= to_signed(-16#0B533E4#, 27);

  
  coeffs_table_domain_2_out1 <= coeffs_table2_out1(0) WHEN Delay8_out1_3 = to_unsigned(16#00#, 8) ELSE
      coeffs_table2_out1(1) WHEN Delay8_out1_3 = to_unsigned(16#01#, 8) ELSE
      coeffs_table2_out1(2) WHEN Delay8_out1_3 = to_unsigned(16#02#, 8) ELSE
      coeffs_table2_out1(3) WHEN Delay8_out1_3 = to_unsigned(16#03#, 8) ELSE
      coeffs_table2_out1(4) WHEN Delay8_out1_3 = to_unsigned(16#04#, 8) ELSE
      coeffs_table2_out1(5) WHEN Delay8_out1_3 = to_unsigned(16#05#, 8) ELSE
      coeffs_table2_out1(6) WHEN Delay8_out1_3 = to_unsigned(16#06#, 8) ELSE
      coeffs_table2_out1(7) WHEN Delay8_out1_3 = to_unsigned(16#07#, 8) ELSE
      coeffs_table2_out1(8) WHEN Delay8_out1_3 = to_unsigned(16#08#, 8) ELSE
      coeffs_table2_out1(9) WHEN Delay8_out1_3 = to_unsigned(16#09#, 8) ELSE
      coeffs_table2_out1(10) WHEN Delay8_out1_3 = to_unsigned(16#0A#, 8) ELSE
      coeffs_table2_out1(11) WHEN Delay8_out1_3 = to_unsigned(16#0B#, 8) ELSE
      coeffs_table2_out1(12) WHEN Delay8_out1_3 = to_unsigned(16#0C#, 8) ELSE
      coeffs_table2_out1(13) WHEN Delay8_out1_3 = to_unsigned(16#0D#, 8) ELSE
      coeffs_table2_out1(14) WHEN Delay8_out1_3 = to_unsigned(16#0E#, 8) ELSE
      coeffs_table2_out1(15) WHEN Delay8_out1_3 = to_unsigned(16#0F#, 8) ELSE
      coeffs_table2_out1(16) WHEN Delay8_out1_3 = to_unsigned(16#10#, 8) ELSE
      coeffs_table2_out1(17) WHEN Delay8_out1_3 = to_unsigned(16#11#, 8) ELSE
      coeffs_table2_out1(18) WHEN Delay8_out1_3 = to_unsigned(16#12#, 8) ELSE
      coeffs_table2_out1(19) WHEN Delay8_out1_3 = to_unsigned(16#13#, 8) ELSE
      coeffs_table2_out1(20) WHEN Delay8_out1_3 = to_unsigned(16#14#, 8) ELSE
      coeffs_table2_out1(21) WHEN Delay8_out1_3 = to_unsigned(16#15#, 8) ELSE
      coeffs_table2_out1(22) WHEN Delay8_out1_3 = to_unsigned(16#16#, 8) ELSE
      coeffs_table2_out1(23) WHEN Delay8_out1_3 = to_unsigned(16#17#, 8) ELSE
      coeffs_table2_out1(24) WHEN Delay8_out1_3 = to_unsigned(16#18#, 8) ELSE
      coeffs_table2_out1(25) WHEN Delay8_out1_3 = to_unsigned(16#19#, 8) ELSE
      coeffs_table2_out1(26) WHEN Delay8_out1_3 = to_unsigned(16#1A#, 8) ELSE
      coeffs_table2_out1(27) WHEN Delay8_out1_3 = to_unsigned(16#1B#, 8) ELSE
      coeffs_table2_out1(28) WHEN Delay8_out1_3 = to_unsigned(16#1C#, 8) ELSE
      coeffs_table2_out1(29) WHEN Delay8_out1_3 = to_unsigned(16#1D#, 8) ELSE
      coeffs_table2_out1(30) WHEN Delay8_out1_3 = to_unsigned(16#1E#, 8) ELSE
      coeffs_table2_out1(31) WHEN Delay8_out1_3 = to_unsigned(16#1F#, 8) ELSE
      coeffs_table2_out1(32) WHEN Delay8_out1_3 = to_unsigned(16#20#, 8) ELSE
      coeffs_table2_out1(33) WHEN Delay8_out1_3 = to_unsigned(16#21#, 8) ELSE
      coeffs_table2_out1(34) WHEN Delay8_out1_3 = to_unsigned(16#22#, 8) ELSE
      coeffs_table2_out1(35) WHEN Delay8_out1_3 = to_unsigned(16#23#, 8) ELSE
      coeffs_table2_out1(36) WHEN Delay8_out1_3 = to_unsigned(16#24#, 8) ELSE
      coeffs_table2_out1(37) WHEN Delay8_out1_3 = to_unsigned(16#25#, 8) ELSE
      coeffs_table2_out1(38) WHEN Delay8_out1_3 = to_unsigned(16#26#, 8) ELSE
      coeffs_table2_out1(39) WHEN Delay8_out1_3 = to_unsigned(16#27#, 8) ELSE
      coeffs_table2_out1(40) WHEN Delay8_out1_3 = to_unsigned(16#28#, 8) ELSE
      coeffs_table2_out1(41) WHEN Delay8_out1_3 = to_unsigned(16#29#, 8) ELSE
      coeffs_table2_out1(42) WHEN Delay8_out1_3 = to_unsigned(16#2A#, 8) ELSE
      coeffs_table2_out1(43) WHEN Delay8_out1_3 = to_unsigned(16#2B#, 8) ELSE
      coeffs_table2_out1(44) WHEN Delay8_out1_3 = to_unsigned(16#2C#, 8) ELSE
      coeffs_table2_out1(45) WHEN Delay8_out1_3 = to_unsigned(16#2D#, 8) ELSE
      coeffs_table2_out1(46) WHEN Delay8_out1_3 = to_unsigned(16#2E#, 8) ELSE
      coeffs_table2_out1(47) WHEN Delay8_out1_3 = to_unsigned(16#2F#, 8) ELSE
      coeffs_table2_out1(48) WHEN Delay8_out1_3 = to_unsigned(16#30#, 8) ELSE
      coeffs_table2_out1(49) WHEN Delay8_out1_3 = to_unsigned(16#31#, 8) ELSE
      coeffs_table2_out1(50) WHEN Delay8_out1_3 = to_unsigned(16#32#, 8) ELSE
      coeffs_table2_out1(51) WHEN Delay8_out1_3 = to_unsigned(16#33#, 8) ELSE
      coeffs_table2_out1(52) WHEN Delay8_out1_3 = to_unsigned(16#34#, 8) ELSE
      coeffs_table2_out1(53) WHEN Delay8_out1_3 = to_unsigned(16#35#, 8) ELSE
      coeffs_table2_out1(54) WHEN Delay8_out1_3 = to_unsigned(16#36#, 8) ELSE
      coeffs_table2_out1(55) WHEN Delay8_out1_3 = to_unsigned(16#37#, 8) ELSE
      coeffs_table2_out1(56) WHEN Delay8_out1_3 = to_unsigned(16#38#, 8) ELSE
      coeffs_table2_out1(57) WHEN Delay8_out1_3 = to_unsigned(16#39#, 8) ELSE
      coeffs_table2_out1(58) WHEN Delay8_out1_3 = to_unsigned(16#3A#, 8) ELSE
      coeffs_table2_out1(59) WHEN Delay8_out1_3 = to_unsigned(16#3B#, 8) ELSE
      coeffs_table2_out1(60) WHEN Delay8_out1_3 = to_unsigned(16#3C#, 8) ELSE
      coeffs_table2_out1(61) WHEN Delay8_out1_3 = to_unsigned(16#3D#, 8) ELSE
      coeffs_table2_out1(62) WHEN Delay8_out1_3 = to_unsigned(16#3E#, 8) ELSE
      coeffs_table2_out1(63);

  Delay13_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay13_reg_1(0) <= to_signed(16#0000000#, 27);
        Delay13_reg_1(1) <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Delay13_reg_1(0) <= Delay13_reg_next_1(0);
        Delay13_reg_1(1) <= Delay13_reg_next_1(1);
      END IF;
    END IF;
  END PROCESS Delay13_1_process;

  Delay13_out1_1 <= Delay13_reg_1(1);
  Delay13_reg_next_1(0) <= coeffs_table_domain_2_out1;
  Delay13_reg_next_1(1) <= Delay13_reg_1(0);

  res_x_coeffs_3_1_add_cast <= resize(Delay11_out1_3, 32);
  res_x_coeffs_3_1_add_cast_1 <= resize(Delay13_out1_1, 32);
  res_x_coeffs_3_1_add_temp <= res_x_coeffs_3_1_add_cast + res_x_coeffs_3_1_add_cast_1;
  res_x_coeffs_3_1_out1 <= res_x_coeffs_3_1_add_temp(26 DOWNTO 0);

  Delay17_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay17_out1_1 <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Delay17_out1_1 <= res_x_coeffs_3_1_out1;
      END IF;
    END IF;
  END PROCESS Delay17_1_process;


  res_x_mul_temp_2 <= Delay16_out1_2 * Delay17_out1_1;
  res_x_out1_2 <= res_x_mul_temp_2(51 DOWNTO 25);

  Delay20_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay20_reg(0) <= to_signed(16#0000000#, 27);
        Delay20_reg(1) <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Delay20_reg(0) <= Delay20_reg_next(0);
        Delay20_reg(1) <= Delay20_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay20_process;

  Delay20_out1 <= Delay20_reg(1);
  Delay20_reg_next(0) <= res_x_out1_2;
  Delay20_reg_next(1) <= Delay20_reg(0);

  Delay14_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay14_reg(0) <= to_unsigned(16#00#, 8);
        Delay14_reg(1) <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay14_reg(0) <= Delay14_reg_next(0);
        Delay14_reg(1) <= Delay14_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay14_2_process;

  Delay14_out1_2 <= Delay14_reg(1);
  Delay14_reg_next(0) <= Delay8_out1_3;
  Delay14_reg_next(1) <= Delay14_reg(0);

  coeffs_table3_out1(0) <= to_signed(16#2000000#, 27);
  coeffs_table3_out1(1) <= to_signed(16#2000006#, 27);
  coeffs_table3_out1(2) <= to_signed(16#200002E#, 27);
  coeffs_table3_out1(3) <= to_signed(16#20000B1#, 27);
  coeffs_table3_out1(4) <= to_signed(16#20001E3#, 27);
  coeffs_table3_out1(5) <= to_signed(16#2000432#, 27);
  coeffs_table3_out1(6) <= to_signed(16#2000823#, 27);
  coeffs_table3_out1(7) <= to_signed(16#2000E51#, 27);
  coeffs_table3_out1(8) <= to_signed(16#200176B#, 27);
  coeffs_table3_out1(9) <= to_signed(16#200242F#, 27);
  coeffs_table3_out1(10) <= to_signed(16#2003567#, 27);
  coeffs_table3_out1(11) <= to_signed(16#2004BE8#, 27);
  coeffs_table3_out1(12) <= to_signed(16#200688D#, 27);
  coeffs_table3_out1(13) <= to_signed(16#2008C33#, 27);
  coeffs_table3_out1(14) <= to_signed(16#200B7B7#, 27);
  coeffs_table3_out1(15) <= to_signed(16#200EBF3#, 27);
  coeffs_table3_out1(16) <= to_signed(16#20129B7#, 27);
  coeffs_table3_out1(17) <= to_signed(16#20171CC#, 27);
  coeffs_table3_out1(18) <= to_signed(16#201C4EC#, 27);
  coeffs_table3_out1(19) <= to_signed(16#20223C3#, 27);
  coeffs_table3_out1(20) <= to_signed(16#2028EEA#, 27);
  coeffs_table3_out1(21) <= to_signed(16#20306E7#, 27);
  coeffs_table3_out1(22) <= to_signed(16#2038C2E#, 27);
  coeffs_table3_out1(23) <= to_signed(16#2041F17#, 27);
  coeffs_table3_out1(24) <= to_signed(16#204BFE8#, 27);
  coeffs_table3_out1(25) <= to_signed(16#2056ECE#, 27);
  coeffs_table3_out1(26) <= to_signed(16#2062BDE#, 27);
  coeffs_table3_out1(27) <= to_signed(16#206F715#, 27);
  coeffs_table3_out1(28) <= to_signed(16#207D059#, 27);
  coeffs_table3_out1(29) <= to_signed(16#208B77A#, 27);
  coeffs_table3_out1(30) <= to_signed(16#209AC32#, 27);
  coeffs_table3_out1(31) <= to_signed(16#20AAE26#, 27);
  coeffs_table3_out1(32) <= to_signed(16#20BBCE7#, 27);
  coeffs_table3_out1(33) <= to_signed(16#20CD7F6#, 27);
  coeffs_table3_out1(34) <= to_signed(16#20DFEC1#, 27);
  coeffs_table3_out1(35) <= to_signed(16#20F30A9#, 27);
  coeffs_table3_out1(36) <= to_signed(16#2106D00#, 27);
  coeffs_table3_out1(37) <= to_signed(16#211B30C#, 27);
  coeffs_table3_out1(38) <= to_signed(16#213020D#, 27);
  coeffs_table3_out1(39) <= to_signed(16#2145934#, 27);
  coeffs_table3_out1(40) <= to_signed(16#215B7B1#, 27);
  coeffs_table3_out1(41) <= to_signed(16#2171CAC#, 27);
  coeffs_table3_out1(42) <= to_signed(16#218874B#, 27);
  coeffs_table3_out1(43) <= to_signed(16#219F6AF#, 27);
  coeffs_table3_out1(44) <= to_signed(16#21B69FB#, 27);
  coeffs_table3_out1(45) <= to_signed(16#21CE051#, 27);
  coeffs_table3_out1(46) <= to_signed(16#21E58D7#, 27);
  coeffs_table3_out1(47) <= to_signed(16#21FD2B1#, 27);
  coeffs_table3_out1(48) <= to_signed(16#2214D0D#, 27);
  coeffs_table3_out1(49) <= to_signed(16#222C717#, 27);
  coeffs_table3_out1(50) <= to_signed(16#2244007#, 27);
  coeffs_table3_out1(51) <= to_signed(16#225B716#, 27);
  coeffs_table3_out1(52) <= to_signed(16#2272B87#, 27);
  coeffs_table3_out1(53) <= to_signed(16#2289CA2#, 27);
  coeffs_table3_out1(54) <= to_signed(16#22A09B8#, 27);
  coeffs_table3_out1(55) <= to_signed(16#22B7223#, 27);
  coeffs_table3_out1(56) <= to_signed(16#22CD542#, 27);
  coeffs_table3_out1(57) <= to_signed(16#22E3281#, 27);
  coeffs_table3_out1(58) <= to_signed(16#22F8952#, 27);
  coeffs_table3_out1(59) <= to_signed(16#230D92F#, 27);
  coeffs_table3_out1(60) <= to_signed(16#232219D#, 27);
  coeffs_table3_out1(61) <= to_signed(16#2336228#, 27);
  coeffs_table3_out1(62) <= to_signed(16#2349A65#, 27);
  coeffs_table3_out1(63) <= to_signed(16#235C9F3#, 27);

  
  coeffs_table_domain_3_out1 <= coeffs_table3_out1(0) WHEN Delay14_out1_2 = to_unsigned(16#00#, 8) ELSE
      coeffs_table3_out1(1) WHEN Delay14_out1_2 = to_unsigned(16#01#, 8) ELSE
      coeffs_table3_out1(2) WHEN Delay14_out1_2 = to_unsigned(16#02#, 8) ELSE
      coeffs_table3_out1(3) WHEN Delay14_out1_2 = to_unsigned(16#03#, 8) ELSE
      coeffs_table3_out1(4) WHEN Delay14_out1_2 = to_unsigned(16#04#, 8) ELSE
      coeffs_table3_out1(5) WHEN Delay14_out1_2 = to_unsigned(16#05#, 8) ELSE
      coeffs_table3_out1(6) WHEN Delay14_out1_2 = to_unsigned(16#06#, 8) ELSE
      coeffs_table3_out1(7) WHEN Delay14_out1_2 = to_unsigned(16#07#, 8) ELSE
      coeffs_table3_out1(8) WHEN Delay14_out1_2 = to_unsigned(16#08#, 8) ELSE
      coeffs_table3_out1(9) WHEN Delay14_out1_2 = to_unsigned(16#09#, 8) ELSE
      coeffs_table3_out1(10) WHEN Delay14_out1_2 = to_unsigned(16#0A#, 8) ELSE
      coeffs_table3_out1(11) WHEN Delay14_out1_2 = to_unsigned(16#0B#, 8) ELSE
      coeffs_table3_out1(12) WHEN Delay14_out1_2 = to_unsigned(16#0C#, 8) ELSE
      coeffs_table3_out1(13) WHEN Delay14_out1_2 = to_unsigned(16#0D#, 8) ELSE
      coeffs_table3_out1(14) WHEN Delay14_out1_2 = to_unsigned(16#0E#, 8) ELSE
      coeffs_table3_out1(15) WHEN Delay14_out1_2 = to_unsigned(16#0F#, 8) ELSE
      coeffs_table3_out1(16) WHEN Delay14_out1_2 = to_unsigned(16#10#, 8) ELSE
      coeffs_table3_out1(17) WHEN Delay14_out1_2 = to_unsigned(16#11#, 8) ELSE
      coeffs_table3_out1(18) WHEN Delay14_out1_2 = to_unsigned(16#12#, 8) ELSE
      coeffs_table3_out1(19) WHEN Delay14_out1_2 = to_unsigned(16#13#, 8) ELSE
      coeffs_table3_out1(20) WHEN Delay14_out1_2 = to_unsigned(16#14#, 8) ELSE
      coeffs_table3_out1(21) WHEN Delay14_out1_2 = to_unsigned(16#15#, 8) ELSE
      coeffs_table3_out1(22) WHEN Delay14_out1_2 = to_unsigned(16#16#, 8) ELSE
      coeffs_table3_out1(23) WHEN Delay14_out1_2 = to_unsigned(16#17#, 8) ELSE
      coeffs_table3_out1(24) WHEN Delay14_out1_2 = to_unsigned(16#18#, 8) ELSE
      coeffs_table3_out1(25) WHEN Delay14_out1_2 = to_unsigned(16#19#, 8) ELSE
      coeffs_table3_out1(26) WHEN Delay14_out1_2 = to_unsigned(16#1A#, 8) ELSE
      coeffs_table3_out1(27) WHEN Delay14_out1_2 = to_unsigned(16#1B#, 8) ELSE
      coeffs_table3_out1(28) WHEN Delay14_out1_2 = to_unsigned(16#1C#, 8) ELSE
      coeffs_table3_out1(29) WHEN Delay14_out1_2 = to_unsigned(16#1D#, 8) ELSE
      coeffs_table3_out1(30) WHEN Delay14_out1_2 = to_unsigned(16#1E#, 8) ELSE
      coeffs_table3_out1(31) WHEN Delay14_out1_2 = to_unsigned(16#1F#, 8) ELSE
      coeffs_table3_out1(32) WHEN Delay14_out1_2 = to_unsigned(16#20#, 8) ELSE
      coeffs_table3_out1(33) WHEN Delay14_out1_2 = to_unsigned(16#21#, 8) ELSE
      coeffs_table3_out1(34) WHEN Delay14_out1_2 = to_unsigned(16#22#, 8) ELSE
      coeffs_table3_out1(35) WHEN Delay14_out1_2 = to_unsigned(16#23#, 8) ELSE
      coeffs_table3_out1(36) WHEN Delay14_out1_2 = to_unsigned(16#24#, 8) ELSE
      coeffs_table3_out1(37) WHEN Delay14_out1_2 = to_unsigned(16#25#, 8) ELSE
      coeffs_table3_out1(38) WHEN Delay14_out1_2 = to_unsigned(16#26#, 8) ELSE
      coeffs_table3_out1(39) WHEN Delay14_out1_2 = to_unsigned(16#27#, 8) ELSE
      coeffs_table3_out1(40) WHEN Delay14_out1_2 = to_unsigned(16#28#, 8) ELSE
      coeffs_table3_out1(41) WHEN Delay14_out1_2 = to_unsigned(16#29#, 8) ELSE
      coeffs_table3_out1(42) WHEN Delay14_out1_2 = to_unsigned(16#2A#, 8) ELSE
      coeffs_table3_out1(43) WHEN Delay14_out1_2 = to_unsigned(16#2B#, 8) ELSE
      coeffs_table3_out1(44) WHEN Delay14_out1_2 = to_unsigned(16#2C#, 8) ELSE
      coeffs_table3_out1(45) WHEN Delay14_out1_2 = to_unsigned(16#2D#, 8) ELSE
      coeffs_table3_out1(46) WHEN Delay14_out1_2 = to_unsigned(16#2E#, 8) ELSE
      coeffs_table3_out1(47) WHEN Delay14_out1_2 = to_unsigned(16#2F#, 8) ELSE
      coeffs_table3_out1(48) WHEN Delay14_out1_2 = to_unsigned(16#30#, 8) ELSE
      coeffs_table3_out1(49) WHEN Delay14_out1_2 = to_unsigned(16#31#, 8) ELSE
      coeffs_table3_out1(50) WHEN Delay14_out1_2 = to_unsigned(16#32#, 8) ELSE
      coeffs_table3_out1(51) WHEN Delay14_out1_2 = to_unsigned(16#33#, 8) ELSE
      coeffs_table3_out1(52) WHEN Delay14_out1_2 = to_unsigned(16#34#, 8) ELSE
      coeffs_table3_out1(53) WHEN Delay14_out1_2 = to_unsigned(16#35#, 8) ELSE
      coeffs_table3_out1(54) WHEN Delay14_out1_2 = to_unsigned(16#36#, 8) ELSE
      coeffs_table3_out1(55) WHEN Delay14_out1_2 = to_unsigned(16#37#, 8) ELSE
      coeffs_table3_out1(56) WHEN Delay14_out1_2 = to_unsigned(16#38#, 8) ELSE
      coeffs_table3_out1(57) WHEN Delay14_out1_2 = to_unsigned(16#39#, 8) ELSE
      coeffs_table3_out1(58) WHEN Delay14_out1_2 = to_unsigned(16#3A#, 8) ELSE
      coeffs_table3_out1(59) WHEN Delay14_out1_2 = to_unsigned(16#3B#, 8) ELSE
      coeffs_table3_out1(60) WHEN Delay14_out1_2 = to_unsigned(16#3C#, 8) ELSE
      coeffs_table3_out1(61) WHEN Delay14_out1_2 = to_unsigned(16#3D#, 8) ELSE
      coeffs_table3_out1(62) WHEN Delay14_out1_2 = to_unsigned(16#3E#, 8) ELSE
      coeffs_table3_out1(63);

  Delay21_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay21_reg(0) <= to_signed(16#0000000#, 27);
        Delay21_reg(1) <= to_signed(16#0000000#, 27);
        Delay21_reg(2) <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Delay21_reg(0) <= Delay21_reg_next(0);
        Delay21_reg(1) <= Delay21_reg_next(1);
        Delay21_reg(2) <= Delay21_reg_next(2);
      END IF;
    END IF;
  END PROCESS Delay21_process;

  Delay21_out1 <= Delay21_reg(2);
  Delay21_reg_next(0) <= coeffs_table_domain_3_out1;
  Delay21_reg_next(1) <= Delay21_reg(0);
  Delay21_reg_next(2) <= Delay21_reg(1);

  res_x_coeffs_2_1_add_cast_2 <= resize(Delay20_out1, 32);
  res_x_coeffs_2_1_add_cast_3 <= resize(Delay21_out1, 32);
  res_x_coeffs_2_1_add_temp_1 <= res_x_coeffs_2_1_add_cast_2 + res_x_coeffs_2_1_add_cast_3;
  res_x_coeffs_2_1_out1_1 <= res_x_coeffs_2_1_add_temp_1(26 DOWNTO 0);

  Delay23_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay23_out1 <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Delay23_out1 <= res_x_coeffs_2_1_out1_1;
      END IF;
    END IF;
  END PROCESS Delay23_process;


  Delay25_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay25_reg_1(0) <= to_unsigned(0, 37);
        Delay25_reg_1(1) <= to_unsigned(0, 37);
        Delay25_reg_1(2) <= to_unsigned(0, 37);
        Delay25_reg_1(3) <= to_unsigned(0, 37);
        Delay25_reg_1(4) <= to_unsigned(0, 37);
        Delay25_reg_1(5) <= to_unsigned(0, 37);
        Delay25_reg_1(6) <= to_unsigned(0, 37);
      ELSIF enb = '1' THEN
        Delay25_reg_1(0) <= Delay25_reg_next_1(0);
        Delay25_reg_1(1) <= Delay25_reg_next_1(1);
        Delay25_reg_1(2) <= Delay25_reg_next_1(2);
        Delay25_reg_1(3) <= Delay25_reg_next_1(3);
        Delay25_reg_1(4) <= Delay25_reg_next_1(4);
        Delay25_reg_1(5) <= Delay25_reg_next_1(5);
        Delay25_reg_1(6) <= Delay25_reg_next_1(6);
      END IF;
    END IF;
  END PROCESS Delay25_1_process;

  Delay25_out1_1 <= Delay25_reg_1(6);
  Delay25_reg_next_1(0) <= if_exp_36_out1;
  Delay25_reg_next_1(1) <= Delay25_reg_1(0);
  Delay25_reg_next_1(2) <= Delay25_reg_1(1);
  Delay25_reg_next_1(3) <= Delay25_reg_1(2);
  Delay25_reg_next_1(4) <= Delay25_reg_1(3);
  Delay25_reg_next_1(5) <= Delay25_reg_1(4);
  Delay25_reg_next_1(6) <= Delay25_reg_1(5);

  res_x_cast <= signed(resize(Delay25_out1_1, 38));
  res_x_mul_temp_3 <= Delay23_out1 * res_x_cast;
  res_x_out1_3 <= res_x_mul_temp_3(63 DOWNTO 0);

  Delay24_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay24_reg(0) <= to_signed(0, 64);
        Delay24_reg(1) <= to_signed(0, 64);
      ELSIF enb = '1' THEN
        Delay24_reg(0) <= Delay24_reg_next(0);
        Delay24_reg(1) <= Delay24_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay24_process;

  Delay24_out1 <= Delay24_reg(1);
  Delay24_reg_next(0) <= res_x_out1_3;
  Delay24_reg_next(1) <= Delay24_reg(0);

  Delay9_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay9_reg(0) <= to_signed(0, 64);
        Delay9_reg(1) <= to_signed(0, 64);
      ELSIF enb = '1' THEN
        Delay9_reg(0) <= Delay9_reg_next(0);
        Delay9_reg(1) <= Delay9_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay9_2_process;

  Delay9_out1_2 <= Delay9_reg(1);
  Delay9_reg_next(0) <= Delay24_out1;
  Delay9_reg_next(1) <= Delay9_reg(0);

  alphaexp_in0_1 <=  - (resize(Delay7_out1_2, 10));
  alphaexp_out1_1 <= alphaexp_in0_1(8 DOWNTO 0);

  Delay2_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_out1_2 <= to_signed(16#000#, 9);
      ELSIF enb = '1' THEN
        Delay2_out1_2 <= alphaexp_out1_1;
      END IF;
    END IF;
  END PROCESS Delay2_2_process;


  
  alphaexp_res_WordLength_out1 <= '1' WHEN Delay2_out1_2 < to_signed(16#040#, 9) ELSE
      '0';

  Delay13_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay13_out1_2 <= '0';
      ELSIF enb = '1' THEN
        Delay13_out1_2 <= alphaexp_res_WordLength_out1;
      END IF;
    END IF;
  END PROCESS Delay13_2_process;


  C2_out1_1 <= to_signed(0, 64);

  Delay13_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay13_reg_2(0) <= to_unsigned(16#000000#, 24);
        Delay13_reg_2(1) <= to_unsigned(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay13_reg_2(0) <= Delay13_reg_next_2(0);
        Delay13_reg_2(1) <= Delay13_reg_next_2(1);
      END IF;
    END IF;
  END PROCESS Delay13_3_process;

  Delay13_out1_3 <= Delay13_reg_2(1);
  Delay13_reg_next_2(0) <= if_exp_2_out1;
  Delay13_reg_next_2(1) <= Delay13_reg_2(0);

  Delay4_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_reg_1(0) <= to_unsigned(16#000000#, 24);
        Delay4_reg_1(1) <= to_unsigned(16#000000#, 24);
        Delay4_reg_1(2) <= to_unsigned(16#000000#, 24);
        Delay4_reg_1(3) <= to_unsigned(16#000000#, 24);
        Delay4_reg_1(4) <= to_unsigned(16#000000#, 24);
        Delay4_reg_1(5) <= to_unsigned(16#000000#, 24);
        Delay4_reg_1(6) <= to_unsigned(16#000000#, 24);
        Delay4_reg_1(7) <= to_unsigned(16#000000#, 24);
        Delay4_reg_1(8) <= to_unsigned(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay4_reg_1(0) <= Delay4_reg_next_1(0);
        Delay4_reg_1(1) <= Delay4_reg_next_1(1);
        Delay4_reg_1(2) <= Delay4_reg_next_1(2);
        Delay4_reg_1(3) <= Delay4_reg_next_1(3);
        Delay4_reg_1(4) <= Delay4_reg_next_1(4);
        Delay4_reg_1(5) <= Delay4_reg_next_1(5);
        Delay4_reg_1(6) <= Delay4_reg_next_1(6);
        Delay4_reg_1(7) <= Delay4_reg_next_1(7);
        Delay4_reg_1(8) <= Delay4_reg_next_1(8);
      END IF;
    END IF;
  END PROCESS Delay4_4_process;

  Delay4_out1_4 <= Delay4_reg_1(8);
  Delay4_reg_next_1(0) <= Delay13_out1_3;
  Delay4_reg_next_1(1) <= Delay4_reg_1(0);
  Delay4_reg_next_1(2) <= Delay4_reg_1(1);
  Delay4_reg_next_1(3) <= Delay4_reg_1(2);
  Delay4_reg_next_1(4) <= Delay4_reg_1(3);
  Delay4_reg_next_1(5) <= Delay4_reg_1(4);
  Delay4_reg_next_1(6) <= Delay4_reg_1(5);
  Delay4_reg_next_1(7) <= Delay4_reg_1(6);
  Delay4_reg_next_1(8) <= Delay4_reg_1(7);

  dtc_out1_3 <= signed(resize(Delay4_out1_4 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64));

  alphaexp1_in0 <=  - (resize(Delay7_out1_2, 10));
  alphaexp1_out1 <= alphaexp1_in0(8 DOWNTO 0);

  Delay1_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1_2 <= to_signed(16#000#, 9);
      ELSIF enb = '1' THEN
        Delay1_out1_2 <= alphaexp1_out1;
      END IF;
    END IF;
  END PROCESS Delay1_2_process;


  shift_arithmetic_zerosig_1 <= to_signed(16#000#, 9);

  
  shift_arithmetic_selsig_1 <= Delay1_out1_2 WHEN Delay1_out1_2 >= shift_arithmetic_zerosig_1 ELSE
      shift_arithmetic_zerosig_1;

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_out1 <= to_signed(0, 64);
      ELSIF enb = '1' THEN
        Delay_out1 <= dtc_out1_3;
      END IF;
    END IF;
  END PROCESS Delay_process;


  dynamic_shift_zerosig_1 <= to_signed(16#000#, 9);

  
  dynamic_shift_selsig_1 <= shift_arithmetic_selsig_1 WHEN shift_arithmetic_selsig_1 >= dynamic_shift_zerosig_1 ELSE
      dynamic_shift_zerosig_1;

  dynamic_shift_cast_1 <= resize(dynamic_shift_selsig_1, 16);
  Shift_Arithmetic_out1_2 <= SHIFT_RIGHT(Delay_out1, to_integer(dynamic_shift_cast_1));

  Delay12_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay12_reg_2(0) <= to_signed(16#000#, 9);
        Delay12_reg_2(1) <= to_signed(16#000#, 9);
      ELSIF enb = '1' THEN
        Delay12_reg_2(0) <= Delay12_reg_next_2(0);
        Delay12_reg_2(1) <= Delay12_reg_next_2(1);
      END IF;
    END IF;
  END PROCESS Delay12_3_process;

  Delay12_out1_3 <= Delay12_reg_2(1);
  Delay12_reg_next_2(0) <= Delay7_out1_2;
  Delay12_reg_next_2(1) <= Delay12_reg_2(0);

  
  exp_1_out1 <= '1' WHEN Delay12_out1_3 < to_signed(-16#00C#, 9) ELSE
      '0';

  C_out1_1 <= signed'(X"1921FB54442D1800");

  
  if_x_m_1_out1 <= Delay9_out1_2 WHEN Delay11_out1_1 = '0' ELSE
      C_out1_1;

  Delay14_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay14_out1_3 <= to_signed(0, 64);
      ELSIF enb = '1' THEN
        Delay14_out1_3 <= Shift_Arithmetic_out1_2;
      END IF;
    END IF;
  END PROCESS Delay14_3_process;


  
  if_exp_res_WordLength_out1 <= C2_out1_1 WHEN Delay13_out1_2 = '0' ELSE
      Delay14_out1_3;

  
  if_exp_12_out1 <= if_x_m_1_out1 WHEN exp_1_out1 = '0' ELSE
      if_exp_res_WordLength_out1;

  Delay21_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay21_out1_1 <= to_signed(0, 64);
      ELSIF enb = '1' THEN
        Delay21_out1_1 <= if_exp_12_out1;
      END IF;
    END IF;
  END PROCESS Delay21_1_process;


  Delay25_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay25_out1_2 <= to_signed(0, 64);
      ELSIF enb = '1' THEN
        Delay25_out1_2 <= Delay21_out1_1;
      END IF;
    END IF;
  END PROCESS Delay25_2_process;


  alpha1_5707963267948966_out1 <= signed'(X"6487ED5110B46000");

  alpha1_5_res_sub_cast <= resize(alpha1_5707963267948966_out1(63 DOWNTO 1), 64);
  alpha1_5_res_out1 <= alpha1_5_res_sub_cast - Delay21_out1_1;

  Delay24_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay24_out1_1 <= to_signed(0, 64);
      ELSIF enb = '1' THEN
        Delay24_out1_1 <= alpha1_5_res_out1;
      END IF;
    END IF;
  END PROCESS Delay24_1_process;


  
  if_adjustment_out1 <= Delay25_out1_2 WHEN Delay27_out1 = '0' ELSE
      Delay24_out1_1;

  DTC1_out1_2 <= unsigned(if_adjustment_out1(61 DOWNTO 0));

  Abs_y_1 <= resize(DTC1_out1_2, 63);
  Abs_out1_1 <= Abs_y_1(61 DOWNTO 0);

  Data_Type_Conversion_out1_2 <= Abs_out1_1;

  Delay5_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay5_reg_2(0) <= to_unsigned(0, 62);
        Delay5_reg_2(1) <= to_unsigned(0, 62);
      ELSIF enb = '1' THEN
        Delay5_reg_2(0) <= Delay5_reg_next_2(0);
        Delay5_reg_2(1) <= Delay5_reg_next_2(1);
      END IF;
    END IF;
  END PROCESS Delay5_3_process;

  Delay5_out1_3 <= Delay5_reg_2(1);
  Delay5_reg_next_2(0) <= Data_Type_Conversion_out1_2;
  Delay5_reg_next_2(1) <= Delay5_reg_2(0);

  Bit_Slice32_out1_2 <= Data_Type_Conversion_out1_2(56);

  Constant32_out1_2 <= to_unsigned(16#06#, 6);

  Bit_Slice33_out1_2 <= Data_Type_Conversion_out1_2(57);

  Constant33_out1_2 <= to_unsigned(16#05#, 6);

  
  Switch32_out1_2 <= Constant32_out1_2 WHEN Bit_Slice32_out1_2 = '0' ELSE
      Constant33_out1_2;

  Bit_Slice34_out1_2 <= Data_Type_Conversion_out1_2(58);

  Constant34_out1_2 <= to_unsigned(16#04#, 6);

  
  Switch33_out1_2 <= Switch32_out1_2 WHEN Bit_Slice33_out1_2 = '0' ELSE
      Constant34_out1_2;

  Bit_Slice15_out1_2 <= Data_Type_Conversion_out1_2(59);

  Constant35_out1_2 <= to_unsigned(16#03#, 6);

  
  Switch34_out1_2 <= Switch33_out1_2 WHEN Bit_Slice34_out1_2 = '0' ELSE
      Constant35_out1_2;

  Bit_Slice16_out1_2 <= Data_Type_Conversion_out1_2(60);

  Constant28_out1_2 <= to_unsigned(16#02#, 6);

  
  Switch17_out1_2 <= Switch34_out1_2 WHEN Bit_Slice15_out1_2 = '0' ELSE
      Constant28_out1_2;

  Bit_Slice17_out1_2 <= Data_Type_Conversion_out1_2(61);

  Constant26_out1_2 <= to_unsigned(16#01#, 6);

  
  Switch18_out1_2 <= Switch17_out1_2 WHEN Bit_Slice16_out1_2 = '0' ELSE
      Constant26_out1_2;

  Constant27_out1_2 <= to_unsigned(16#00#, 6);

  
  Switch19_out1_2 <= Switch18_out1_2 WHEN Bit_Slice17_out1_2 = '0' ELSE
      Constant27_out1_2;

  Delay1_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1_3 <= to_unsigned(16#00#, 6);
      ELSIF enb = '1' THEN
        Delay1_out1_3 <= Switch19_out1_2;
      END IF;
    END IF;
  END PROCESS Delay1_3_process;


  
  Compare_To_Constant1_out1 <= '1' WHEN Delay1_out1_3 < to_unsigned(16#06#, 6) ELSE
      '0';

  Bit_Slice25_out1_2 <= Data_Type_Conversion_out1_2(48);

  Constant3_out1_5 <= to_unsigned(16#0E#, 6);

  Bit_Slice24_out1_2 <= Data_Type_Conversion_out1_2(49);

  Constant2_out1_3 <= to_unsigned(16#0D#, 6);

  
  Switch2_out1_3 <= Constant3_out1_5 WHEN Bit_Slice25_out1_2 = '0' ELSE
      Constant2_out1_3;

  Bit_Slice27_out1_2 <= Data_Type_Conversion_out1_2(50);

  Constant1_out1_2 <= to_unsigned(16#0C#, 6);

  
  Switch1_out1_3 <= Switch2_out1_3 WHEN Bit_Slice24_out1_2 = '0' ELSE
      Constant1_out1_2;

  Bit_Slice15_out1_3 <= Data_Type_Conversion_out1_2(51);

  Constant124_out1_2 <= to_unsigned(16#0B#, 6);

  
  Switch116_out1_2 <= Switch1_out1_3 WHEN Bit_Slice27_out1_2 = '0' ELSE
      Constant124_out1_2;

  Bit_Slice16_out1_3 <= Data_Type_Conversion_out1_2(52);

  Constant28_out1_3 <= to_unsigned(16#0A#, 6);

  
  Switch17_out1_3 <= Switch116_out1_2 WHEN Bit_Slice15_out1_3 = '0' ELSE
      Constant28_out1_3;

  Bit_Slice17_out1_3 <= Data_Type_Conversion_out1_2(53);

  Constant26_out1_3 <= to_unsigned(16#09#, 6);

  
  Switch18_out1_3 <= Switch17_out1_3 WHEN Bit_Slice16_out1_3 = '0' ELSE
      Constant26_out1_3;

  Bit_Slice28_out1_2 <= Data_Type_Conversion_out1_2(54);

  Constant27_out1_3 <= to_unsigned(16#08#, 6);

  
  Switch19_out1_3 <= Switch18_out1_3 WHEN Bit_Slice17_out1_3 = '0' ELSE
      Constant27_out1_3;

  Bit_Slice29_out1_2 <= Data_Type_Conversion_out1_2(55);

  Constant29_out1_3 <= to_unsigned(16#07#, 6);

  
  Switch28_out1_2 <= Switch19_out1_3 WHEN Bit_Slice28_out1_2 = '0' ELSE
      Constant29_out1_3;

  Constant30_out1_2 <= to_unsigned(16#06#, 6);

  
  Switch29_out1_2 <= Switch28_out1_2 WHEN Bit_Slice29_out1_2 = '0' ELSE
      Constant30_out1_2;

  Delay2_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_out1_3 <= to_unsigned(16#00#, 6);
      ELSIF enb = '1' THEN
        Delay2_out1_3 <= Switch29_out1_2;
      END IF;
    END IF;
  END PROCESS Delay2_3_process;


  
  Switch1_out1_4 <= Delay2_out1_3 WHEN Compare_To_Constant1_out1 = '0' ELSE
      Delay1_out1_3;

  
  Compare_To_Constant7_out1 <= '1' WHEN Switch1_out1_4 < to_unsigned(16#0E#, 6) ELSE
      '0';

  Bit_Slice29_out1_3 <= Data_Type_Conversion_out1_2(40);

  Constant29_out1_4 <= to_unsigned(16#16#, 6);

  Bit_Slice30_out1_1 <= Data_Type_Conversion_out1_2(41);

  Constant30_out1_3 <= to_unsigned(16#15#, 6);

  
  Switch29_out1_3 <= Constant29_out1_4 WHEN Bit_Slice29_out1_3 = '0' ELSE
      Constant30_out1_3;

  Bit_Slice31_out1_1 <= Data_Type_Conversion_out1_2(42);

  Constant31_out1_1 <= to_unsigned(16#14#, 6);

  
  Switch30_out1_1 <= Switch29_out1_3 WHEN Bit_Slice30_out1_1 = '0' ELSE
      Constant31_out1_1;

  Bit_Slice32_out1_3 <= Data_Type_Conversion_out1_2(43);

  Constant32_out1_3 <= to_unsigned(16#13#, 6);

  
  Switch31_out1_1 <= Switch30_out1_1 WHEN Bit_Slice31_out1_1 = '0' ELSE
      Constant32_out1_3;

  Bit_Slice33_out1_3 <= Data_Type_Conversion_out1_2(44);

  Constant33_out1_3 <= to_unsigned(16#12#, 6);

  
  Switch32_out1_3 <= Switch31_out1_1 WHEN Bit_Slice32_out1_3 = '0' ELSE
      Constant33_out1_3;

  Bit_Slice34_out1_3 <= Data_Type_Conversion_out1_2(45);

  Constant34_out1_3 <= to_unsigned(16#11#, 6);

  
  Switch33_out1_3 <= Switch32_out1_3 WHEN Bit_Slice33_out1_3 = '0' ELSE
      Constant34_out1_3;

  Bit_Slice35_out1_1 <= Data_Type_Conversion_out1_2(46);

  Constant35_out1_3 <= to_unsigned(16#10#, 6);

  
  Switch34_out1_3 <= Switch33_out1_3 WHEN Bit_Slice34_out1_3 = '0' ELSE
      Constant35_out1_3;

  Bit_Slice26_out1_2 <= Data_Type_Conversion_out1_2(47);

  Constant36_out1_1 <= to_unsigned(16#0F#, 6);

  
  Switch35_out1_1 <= Switch34_out1_3 WHEN Bit_Slice35_out1_1 = '0' ELSE
      Constant36_out1_1;

  Constant3_out1_6 <= to_unsigned(16#0E#, 6);

  
  Switch3_out1_4 <= Switch35_out1_1 WHEN Bit_Slice26_out1_2 = '0' ELSE
      Constant3_out1_6;

  Delay4_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_out1_5 <= to_unsigned(16#00#, 6);
      ELSIF enb = '1' THEN
        Delay4_out1_5 <= Switch3_out1_4;
      END IF;
    END IF;
  END PROCESS Delay4_5_process;


  
  Compare_To_Constant2_out1 <= '1' WHEN Delay4_out1_5 < to_unsigned(16#16#, 6) ELSE
      '0';

  Bit_Slice26_out1_3 <= Data_Type_Conversion_out1_2(32);

  Constant4_out1_2 <= to_unsigned(16#1E#, 6);

  Bit_Slice25_out1_3 <= Data_Type_Conversion_out1_2(33);

  Constant3_out1_7 <= to_unsigned(16#1D#, 6);

  
  Switch3_out1_5 <= Constant4_out1_2 WHEN Bit_Slice26_out1_3 = '0' ELSE
      Constant3_out1_7;

  Bit_Slice24_out1_3 <= Data_Type_Conversion_out1_2(34);

  Constant2_out1_4 <= to_unsigned(16#1C#, 6);

  
  Switch2_out1_4 <= Switch3_out1_5 WHEN Bit_Slice25_out1_3 = '0' ELSE
      Constant2_out1_4;

  Bit_Slice27_out1_3 <= Data_Type_Conversion_out1_2(35);

  Constant1_out1_3 <= to_unsigned(16#1B#, 6);

  
  Switch1_out1_5 <= Switch2_out1_4 WHEN Bit_Slice24_out1_3 = '0' ELSE
      Constant1_out1_3;

  Bit_Slice15_out1_4 <= Data_Type_Conversion_out1_2(36);

  Constant124_out1_3 <= to_unsigned(16#1A#, 6);

  
  Switch116_out1_3 <= Switch1_out1_5 WHEN Bit_Slice27_out1_3 = '0' ELSE
      Constant124_out1_3;

  Bit_Slice16_out1_4 <= Data_Type_Conversion_out1_2(37);

  Constant28_out1_4 <= to_unsigned(16#19#, 6);

  
  Switch17_out1_4 <= Switch116_out1_3 WHEN Bit_Slice15_out1_4 = '0' ELSE
      Constant28_out1_4;

  Bit_Slice17_out1_4 <= Data_Type_Conversion_out1_2(38);

  Constant26_out1_4 <= to_unsigned(16#18#, 6);

  
  Switch18_out1_4 <= Switch17_out1_4 WHEN Bit_Slice16_out1_4 = '0' ELSE
      Constant26_out1_4;

  Bit_Slice28_out1_3 <= Data_Type_Conversion_out1_2(39);

  Constant27_out1_4 <= to_unsigned(16#17#, 6);

  
  Switch19_out1_4 <= Switch18_out1_4 WHEN Bit_Slice17_out1_4 = '0' ELSE
      Constant27_out1_4;

  Constant29_out1_5 <= to_unsigned(16#16#, 6);

  
  Switch28_out1_3 <= Switch19_out1_4 WHEN Bit_Slice28_out1_3 = '0' ELSE
      Constant29_out1_5;

  Delay7_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay7_out1_5 <= to_unsigned(16#00#, 6);
      ELSIF enb = '1' THEN
        Delay7_out1_5 <= Switch28_out1_3;
      END IF;
    END IF;
  END PROCESS Delay7_5_process;


  
  Switch2_out1_5 <= Delay7_out1_5 WHEN Compare_To_Constant2_out1 = '0' ELSE
      Delay4_out1_5;

  
  Switch6_out1 <= Switch2_out1_5 WHEN Compare_To_Constant7_out1 = '0' ELSE
      Switch1_out1_4;

  
  Compare_To_Constant6_out1 <= '1' WHEN Switch6_out1 < to_unsigned(16#1E#, 6) ELSE
      '0';

  Bit_Slice32_out1_4 <= Data_Type_Conversion_out1_2(24);

  Constant32_out1_4 <= to_unsigned(16#26#, 6);

  Bit_Slice33_out1_4 <= Data_Type_Conversion_out1_2(25);

  Constant33_out1_4 <= to_unsigned(16#25#, 6);

  
  Switch32_out1_4 <= Constant32_out1_4 WHEN Bit_Slice32_out1_4 = '0' ELSE
      Constant33_out1_4;

  Bit_Slice34_out1_4 <= Data_Type_Conversion_out1_2(26);

  Constant34_out1_4 <= to_unsigned(16#24#, 6);

  
  Switch33_out1_4 <= Switch32_out1_4 WHEN Bit_Slice33_out1_4 = '0' ELSE
      Constant34_out1_4;

  Bit_Slice15_out1_5 <= Data_Type_Conversion_out1_2(27);

  Constant35_out1_4 <= to_unsigned(16#23#, 6);

  
  Switch34_out1_4 <= Switch33_out1_4 WHEN Bit_Slice34_out1_4 = '0' ELSE
      Constant35_out1_4;

  Bit_Slice16_out1_5 <= Data_Type_Conversion_out1_2(28);

  Constant28_out1_5 <= to_unsigned(16#22#, 6);

  
  Switch17_out1_5 <= Switch34_out1_4 WHEN Bit_Slice15_out1_5 = '0' ELSE
      Constant28_out1_5;

  Bit_Slice17_out1_5 <= Data_Type_Conversion_out1_2(29);

  Constant26_out1_5 <= to_unsigned(16#21#, 6);

  
  Switch18_out1_5 <= Switch17_out1_5 WHEN Bit_Slice16_out1_5 = '0' ELSE
      Constant26_out1_5;

  Bit_Slice28_out1_4 <= Data_Type_Conversion_out1_2(30);

  Constant27_out1_5 <= to_unsigned(16#20#, 6);

  
  Switch19_out1_5 <= Switch18_out1_5 WHEN Bit_Slice17_out1_5 = '0' ELSE
      Constant27_out1_5;

  Bit_Slice29_out1_4 <= Data_Type_Conversion_out1_2(31);

  Constant29_out1_6 <= to_unsigned(16#1F#, 6);

  
  Switch28_out1_4 <= Switch19_out1_5 WHEN Bit_Slice28_out1_4 = '0' ELSE
      Constant29_out1_6;

  Constant30_out1_4 <= to_unsigned(16#1E#, 6);

  
  Switch29_out1_4 <= Switch28_out1_4 WHEN Bit_Slice29_out1_4 = '0' ELSE
      Constant30_out1_4;

  Delay3_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1_5 <= to_unsigned(16#00#, 6);
      ELSIF enb = '1' THEN
        Delay3_out1_5 <= Switch29_out1_4;
      END IF;
    END IF;
  END PROCESS Delay3_5_process;


  
  Compare_To_Constant3_out1_1 <= '1' WHEN Delay3_out1_5 < to_unsigned(16#26#, 6) ELSE
      '0';

  Bit_Slice25_out1_4 <= Data_Type_Conversion_out1_2(16);

  Constant3_out1_8 <= to_unsigned(16#2E#, 6);

  Bit_Slice24_out1_4 <= Data_Type_Conversion_out1_2(17);

  Constant2_out1_5 <= to_unsigned(16#2D#, 6);

  
  Switch2_out1_6 <= Constant3_out1_8 WHEN Bit_Slice25_out1_4 = '0' ELSE
      Constant2_out1_5;

  Bit_Slice27_out1_4 <= Data_Type_Conversion_out1_2(18);

  Constant1_out1_4 <= to_unsigned(16#2C#, 6);

  
  Switch1_out1_6 <= Switch2_out1_6 WHEN Bit_Slice24_out1_4 = '0' ELSE
      Constant1_out1_4;

  Bit_Slice15_out1_6 <= Data_Type_Conversion_out1_2(19);

  Constant124_out1_4 <= to_unsigned(16#2B#, 6);

  
  Switch116_out1_4 <= Switch1_out1_6 WHEN Bit_Slice27_out1_4 = '0' ELSE
      Constant124_out1_4;

  Bit_Slice16_out1_6 <= Data_Type_Conversion_out1_2(20);

  Constant28_out1_6 <= to_unsigned(16#2A#, 6);

  
  Switch17_out1_6 <= Switch116_out1_4 WHEN Bit_Slice15_out1_6 = '0' ELSE
      Constant28_out1_6;

  Bit_Slice17_out1_6 <= Data_Type_Conversion_out1_2(21);

  Constant26_out1_6 <= to_unsigned(16#29#, 6);

  
  Switch18_out1_6 <= Switch17_out1_6 WHEN Bit_Slice16_out1_6 = '0' ELSE
      Constant26_out1_6;

  Bit_Slice28_out1_5 <= Data_Type_Conversion_out1_2(22);

  Constant27_out1_6 <= to_unsigned(16#28#, 6);

  
  Switch19_out1_6 <= Switch18_out1_6 WHEN Bit_Slice17_out1_6 = '0' ELSE
      Constant27_out1_6;

  Bit_Slice29_out1_5 <= Data_Type_Conversion_out1_2(23);

  Constant29_out1_7 <= to_unsigned(16#27#, 6);

  
  Switch28_out1_5 <= Switch19_out1_6 WHEN Bit_Slice28_out1_5 = '0' ELSE
      Constant29_out1_7;

  Constant30_out1_5 <= to_unsigned(16#26#, 6);

  
  Switch29_out1_5 <= Switch28_out1_5 WHEN Bit_Slice29_out1_5 = '0' ELSE
      Constant30_out1_5;

  Delay5_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay5_out1_4 <= to_unsigned(16#00#, 6);
      ELSIF enb = '1' THEN
        Delay5_out1_4 <= Switch29_out1_5;
      END IF;
    END IF;
  END PROCESS Delay5_4_process;


  
  Switch3_out1_6 <= Delay5_out1_4 WHEN Compare_To_Constant3_out1_1 = '0' ELSE
      Delay3_out1_5;

  
  Compare_To_Constant5_out1_1 <= '1' WHEN Switch3_out1_6 < to_unsigned(16#2E#, 6) ELSE
      '0';

  Bit_Slice29_out1_6 <= Data_Type_Conversion_out1_2(8);

  Constant29_out1_8 <= to_unsigned(16#36#, 6);

  Bit_Slice30_out1_2 <= Data_Type_Conversion_out1_2(9);

  Constant30_out1_6 <= to_unsigned(16#35#, 6);

  
  Switch29_out1_6 <= Constant29_out1_8 WHEN Bit_Slice29_out1_6 = '0' ELSE
      Constant30_out1_6;

  Bit_Slice31_out1_2 <= Data_Type_Conversion_out1_2(10);

  Constant31_out1_2 <= to_unsigned(16#34#, 6);

  
  Switch30_out1_2 <= Switch29_out1_6 WHEN Bit_Slice30_out1_2 = '0' ELSE
      Constant31_out1_2;

  Bit_Slice32_out1_5 <= Data_Type_Conversion_out1_2(11);

  Constant32_out1_5 <= to_unsigned(16#33#, 6);

  
  Switch31_out1_2 <= Switch30_out1_2 WHEN Bit_Slice31_out1_2 = '0' ELSE
      Constant32_out1_5;

  Bit_Slice33_out1_5 <= Data_Type_Conversion_out1_2(12);

  Constant33_out1_5 <= to_unsigned(16#32#, 6);

  
  Switch32_out1_5 <= Switch31_out1_2 WHEN Bit_Slice32_out1_5 = '0' ELSE
      Constant33_out1_5;

  Bit_Slice34_out1_5 <= Data_Type_Conversion_out1_2(13);

  Constant34_out1_5 <= to_unsigned(16#31#, 6);

  
  Switch33_out1_5 <= Switch32_out1_5 WHEN Bit_Slice33_out1_5 = '0' ELSE
      Constant34_out1_5;

  Bit_Slice35_out1_2 <= Data_Type_Conversion_out1_2(14);

  Constant35_out1_5 <= to_unsigned(16#30#, 6);

  
  Switch34_out1_5 <= Switch33_out1_5 WHEN Bit_Slice34_out1_5 = '0' ELSE
      Constant35_out1_5;

  Bit_Slice26_out1_4 <= Data_Type_Conversion_out1_2(15);

  Constant36_out1_2 <= to_unsigned(16#2F#, 6);

  
  Switch35_out1_2 <= Switch34_out1_5 WHEN Bit_Slice35_out1_2 = '0' ELSE
      Constant36_out1_2;

  Constant3_out1_9 <= to_unsigned(16#2E#, 6);

  
  Switch3_out1_7 <= Switch35_out1_2 WHEN Bit_Slice26_out1_4 = '0' ELSE
      Constant3_out1_9;

  Delay6_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay6_out1_4 <= to_unsigned(16#00#, 6);
      ELSIF enb = '1' THEN
        Delay6_out1_4 <= Switch3_out1_7;
      END IF;
    END IF;
  END PROCESS Delay6_4_process;


  
  Compare_To_Constant4_out1_1 <= '1' WHEN Delay6_out1_4 < to_unsigned(16#36#, 6) ELSE
      '0';

  Bit_Slice26_out1_5 <= Data_Type_Conversion_out1_2(0);

  Constant4_out1_3 <= to_unsigned(16#3E#, 6);

  Bit_Slice25_out1_5 <= Data_Type_Conversion_out1_2(1);

  Constant3_out1_10 <= to_unsigned(16#3D#, 6);

  
  Switch3_out1_8 <= Constant4_out1_3 WHEN Bit_Slice26_out1_5 = '0' ELSE
      Constant3_out1_10;

  Bit_Slice24_out1_5 <= Data_Type_Conversion_out1_2(2);

  Constant2_out1_6 <= to_unsigned(16#3C#, 6);

  
  Switch2_out1_7 <= Switch3_out1_8 WHEN Bit_Slice25_out1_5 = '0' ELSE
      Constant2_out1_6;

  Bit_Slice27_out1_5 <= Data_Type_Conversion_out1_2(3);

  Constant1_out1_5 <= to_unsigned(16#3B#, 6);

  
  Switch1_out1_7 <= Switch2_out1_7 WHEN Bit_Slice24_out1_5 = '0' ELSE
      Constant1_out1_5;

  Bit_Slice15_out1_7 <= Data_Type_Conversion_out1_2(4);

  Constant124_out1_5 <= to_unsigned(16#3A#, 6);

  
  Switch116_out1_5 <= Switch1_out1_7 WHEN Bit_Slice27_out1_5 = '0' ELSE
      Constant124_out1_5;

  Bit_Slice16_out1_7 <= Data_Type_Conversion_out1_2(5);

  Constant28_out1_7 <= to_unsigned(16#39#, 6);

  
  Switch17_out1_7 <= Switch116_out1_5 WHEN Bit_Slice15_out1_7 = '0' ELSE
      Constant28_out1_7;

  Bit_Slice17_out1_7 <= Data_Type_Conversion_out1_2(6);

  Constant26_out1_7 <= to_unsigned(16#38#, 6);

  
  Switch18_out1_7 <= Switch17_out1_7 WHEN Bit_Slice16_out1_7 = '0' ELSE
      Constant26_out1_7;

  Bit_Slice28_out1_6 <= Data_Type_Conversion_out1_2(7);

  Constant27_out1_7 <= to_unsigned(16#37#, 6);

  
  Switch19_out1_7 <= Switch18_out1_7 WHEN Bit_Slice17_out1_7 = '0' ELSE
      Constant27_out1_7;

  Constant29_out1_9 <= to_unsigned(16#36#, 6);

  
  Switch28_out1_6 <= Switch19_out1_7 WHEN Bit_Slice28_out1_6 = '0' ELSE
      Constant29_out1_9;

  Delay8_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay8_out1_4 <= to_unsigned(16#00#, 6);
      ELSIF enb = '1' THEN
        Delay8_out1_4 <= Switch28_out1_6;
      END IF;
    END IF;
  END PROCESS Delay8_4_process;


  
  Switch4_out1_1 <= Delay8_out1_4 WHEN Compare_To_Constant4_out1_1 = '0' ELSE
      Delay6_out1_4;

  
  Switch5_out1_2 <= Switch4_out1_1 WHEN Compare_To_Constant5_out1_1 = '0' ELSE
      Switch3_out1_6;

  
  Switch7_out1 <= Switch5_out1_2 WHEN Compare_To_Constant6_out1 = '0' ELSE
      Switch6_out1;

  Delay3_6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1_6 <= to_unsigned(16#00#, 6);
      ELSIF enb = '1' THEN
        Delay3_out1_6 <= Switch7_out1;
      END IF;
    END IF;
  END PROCESS Delay3_6_process;


  Shift_Arithmetic_out1_3 <= Delay5_out1_3 sll to_integer(Delay3_out1_6);

  Delay7_6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay7_out1_6 <= to_unsigned(0, 62);
      ELSIF enb = '1' THEN
        Delay7_out1_6 <= Shift_Arithmetic_out1_3;
      END IF;
    END IF;
  END PROCESS Delay7_6_process;


  Bit_Slice2_out1_1 <= Delay7_out1_6(37 DOWNTO 36);

  Bit_Slice4_out1_1 <= Bit_Slice2_out1_1(0);

  Bit_Slice5_out1_2 <= Bit_Slice2_out1_1(1);

  Bit_Slice3_out1_1 <= Delay7_out1_6(38);

  Bit_Slice1_out1_2 <= Delay7_out1_6(35 DOWNTO 0);

  Bit_Reduce_out1_1 <= (Bit_Slice1_out1_2(35) OR Bit_Slice1_out1_2(34) OR Bit_Slice1_out1_2(33) OR Bit_Slice1_out1_2(32) OR Bit_Slice1_out1_2(31) OR Bit_Slice1_out1_2(30) OR Bit_Slice1_out1_2(29) OR Bit_Slice1_out1_2(28) OR Bit_Slice1_out1_2(27) OR Bit_Slice1_out1_2(26) OR Bit_Slice1_out1_2(25) OR Bit_Slice1_out1_2(24) OR Bit_Slice1_out1_2(23) OR Bit_Slice1_out1_2(22) OR Bit_Slice1_out1_2(21) OR Bit_Slice1_out1_2(20) OR Bit_Slice1_out1_2(19) OR Bit_Slice1_out1_2(18) OR Bit_Slice1_out1_2(17) OR Bit_Slice1_out1_2(16) OR Bit_Slice1_out1_2(15) OR Bit_Slice1_out1_2(14) OR Bit_Slice1_out1_2(13) OR Bit_Slice1_out1_2(12) OR Bit_Slice1_out1_2(11) OR Bit_Slice1_out1_2(10) OR Bit_Slice1_out1_2(9) OR Bit_Slice1_out1_2(8) OR Bit_Slice1_out1_2(7) OR Bit_Slice1_out1_2(6) OR Bit_Slice1_out1_2(5) OR Bit_Slice1_out1_2(4) OR Bit_Slice1_out1_2(3) OR Bit_Slice1_out1_2(2) OR Bit_Slice1_out1_2(1) OR Bit_Slice1_out1_2(0));

  Logical_Operator1_out1_1 <= Bit_Reduce_out1_1 OR (Bit_Slice4_out1_1 OR Bit_Slice3_out1_1);

  Logical_Operator_out1_4 <= Bit_Slice5_out1_2 AND Logical_Operator1_out1_1;

  Bit_Slice1_out1_3 <= Delay7_out1_6(60 DOWNTO 38);

  Bit_Slice1_out1_dtc_1 <= resize(Bit_Slice1_out1_3, 24);

  Constant2_out1_7 <= to_unsigned(16#000001#, 23);

  Add1_out1_1 <= resize(resize(Constant2_out1_7, 32) + resize(Bit_Slice1_out1_3, 32), 24);

  
  Switch2_out1_8 <= Bit_Slice1_out1_dtc_1 WHEN Logical_Operator_out1_4 = '0' ELSE
      Add1_out1_1;

  Bit_Slice5_out1_3 <= Switch2_out1_8(23);

  C1_out1_1 <= to_unsigned(16#7F#, 8);

  Sum1_sub_cast <= signed(resize(C1_out1_1, 32));
  Sum1_sub_cast_1 <= signed(resize(Delay3_out1_6, 32));
  Sum1_sub_temp <= Sum1_sub_cast - Sum1_sub_cast_1;
  Sum1_out1 <= unsigned(Sum1_sub_temp(7 DOWNTO 0));

  Delay2_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_out1_4 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay2_out1_4 <= Sum1_out1;
      END IF;
    END IF;
  END PROCESS Delay2_4_process;


  Sum2_add_cast <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & Bit_Slice5_out1_3;
  Sum2_out1_1 <= resize(Sum2_add_cast + resize(Delay2_out1_4, 32), 8);

  Delay6_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay6_out1_5 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay6_out1_5 <= Sum2_out1_1;
      END IF;
    END IF;
  END PROCESS Delay6_5_process;


  reinterpretcast_exp_numericty_out1 <= unsigned(Delay7_out1_2(7 DOWNTO 0));

  Delay29_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay29_reg(0) <= to_unsigned(16#00#, 8);
        Delay29_reg(1) <= to_unsigned(16#00#, 8);
        Delay29_reg(2) <= to_unsigned(16#00#, 8);
        Delay29_reg(3) <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay29_reg(0) <= Delay29_reg_next(0);
        Delay29_reg(1) <= Delay29_reg_next(1);
        Delay29_reg(2) <= Delay29_reg_next(2);
        Delay29_reg(3) <= Delay29_reg_next(3);
      END IF;
    END IF;
  END PROCESS Delay29_process;

  Delay29_out1 <= Delay29_reg(3);
  Delay29_reg_next(0) <= reinterpretcast_exp_numericty_out1;
  Delay29_reg_next(1) <= Delay29_reg(0);
  Delay29_reg_next(2) <= Delay29_reg(1);
  Delay29_reg_next(3) <= Delay29_reg(2);

  C1_out1_2 <= to_unsigned(16#7F#, 8);

  exp_127_out1 <= Delay29_out1 + C1_out1_2;

  Delay32_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay32_reg(0) <= to_unsigned(16#00#, 8);
        Delay32_reg(1) <= to_unsigned(16#00#, 8);
        Delay32_reg(2) <= to_unsigned(16#00#, 8);
        Delay32_reg(3) <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay32_reg(0) <= Delay32_reg_next(0);
        Delay32_reg(1) <= Delay32_reg_next(1);
        Delay32_reg(2) <= Delay32_reg_next(2);
        Delay32_reg(3) <= Delay32_reg_next(3);
      END IF;
    END IF;
  END PROCESS Delay32_process;

  Delay32_out1 <= Delay32_reg(3);
  Delay32_reg_next(0) <= exp_127_out1;
  Delay32_reg_next(1) <= Delay32_reg(0);
  Delay32_reg_next(2) <= Delay32_reg(1);
  Delay32_reg_next(3) <= Delay32_reg(2);

  
  if_exp_12_adjustment1_out1 <= Delay6_out1_5 WHEN exp_12_adjustment_out1_1 = '0' ELSE
      Delay32_out1;

  Constant5_out1 <= to_unsigned(16#00#, 8);

  Constant4_out1_4 <= to_unsigned(16#FF#, 8);

  
  Switch5_out1_3 <= Constant5_out1 WHEN Delay16_out1 = '0' ELSE
      Constant4_out1_4;

  Delay26_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay26_reg(0) <= to_unsigned(16#00#, 8);
        Delay26_reg(1) <= to_unsigned(16#00#, 8);
        Delay26_reg(2) <= to_unsigned(16#00#, 8);
        Delay26_reg(3) <= to_unsigned(16#00#, 8);
        Delay26_reg(4) <= to_unsigned(16#00#, 8);
        Delay26_reg(5) <= to_unsigned(16#00#, 8);
        Delay26_reg(6) <= to_unsigned(16#00#, 8);
        Delay26_reg(7) <= to_unsigned(16#00#, 8);
        Delay26_reg(8) <= to_unsigned(16#00#, 8);
        Delay26_reg(9) <= to_unsigned(16#00#, 8);
        Delay26_reg(10) <= to_unsigned(16#00#, 8);
        Delay26_reg(11) <= to_unsigned(16#00#, 8);
        Delay26_reg(12) <= to_unsigned(16#00#, 8);
        Delay26_reg(13) <= to_unsigned(16#00#, 8);
        Delay26_reg(14) <= to_unsigned(16#00#, 8);
        Delay26_reg(15) <= to_unsigned(16#00#, 8);
        Delay26_reg(16) <= to_unsigned(16#00#, 8);
        Delay26_reg(17) <= to_unsigned(16#00#, 8);
        Delay26_reg(18) <= to_unsigned(16#00#, 8);
        Delay26_reg(19) <= to_unsigned(16#00#, 8);
        Delay26_reg(20) <= to_unsigned(16#00#, 8);
        Delay26_reg(21) <= to_unsigned(16#00#, 8);
        Delay26_reg(22) <= to_unsigned(16#00#, 8);
        Delay26_reg(23) <= to_unsigned(16#00#, 8);
        Delay26_reg(24) <= to_unsigned(16#00#, 8);
        Delay26_reg(25) <= to_unsigned(16#00#, 8);
        Delay26_reg(26) <= to_unsigned(16#00#, 8);
        Delay26_reg(27) <= to_unsigned(16#00#, 8);
        Delay26_reg(28) <= to_unsigned(16#00#, 8);
        Delay26_reg(29) <= to_unsigned(16#00#, 8);
        Delay26_reg(30) <= to_unsigned(16#00#, 8);
        Delay26_reg(31) <= to_unsigned(16#00#, 8);
        Delay26_reg(32) <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay26_reg(0) <= Delay26_reg_next(0);
        Delay26_reg(1) <= Delay26_reg_next(1);
        Delay26_reg(2) <= Delay26_reg_next(2);
        Delay26_reg(3) <= Delay26_reg_next(3);
        Delay26_reg(4) <= Delay26_reg_next(4);
        Delay26_reg(5) <= Delay26_reg_next(5);
        Delay26_reg(6) <= Delay26_reg_next(6);
        Delay26_reg(7) <= Delay26_reg_next(7);
        Delay26_reg(8) <= Delay26_reg_next(8);
        Delay26_reg(9) <= Delay26_reg_next(9);
        Delay26_reg(10) <= Delay26_reg_next(10);
        Delay26_reg(11) <= Delay26_reg_next(11);
        Delay26_reg(12) <= Delay26_reg_next(12);
        Delay26_reg(13) <= Delay26_reg_next(13);
        Delay26_reg(14) <= Delay26_reg_next(14);
        Delay26_reg(15) <= Delay26_reg_next(15);
        Delay26_reg(16) <= Delay26_reg_next(16);
        Delay26_reg(17) <= Delay26_reg_next(17);
        Delay26_reg(18) <= Delay26_reg_next(18);
        Delay26_reg(19) <= Delay26_reg_next(19);
        Delay26_reg(20) <= Delay26_reg_next(20);
        Delay26_reg(21) <= Delay26_reg_next(21);
        Delay26_reg(22) <= Delay26_reg_next(22);
        Delay26_reg(23) <= Delay26_reg_next(23);
        Delay26_reg(24) <= Delay26_reg_next(24);
        Delay26_reg(25) <= Delay26_reg_next(25);
        Delay26_reg(26) <= Delay26_reg_next(26);
        Delay26_reg(27) <= Delay26_reg_next(27);
        Delay26_reg(28) <= Delay26_reg_next(28);
        Delay26_reg(29) <= Delay26_reg_next(29);
        Delay26_reg(30) <= Delay26_reg_next(30);
        Delay26_reg(31) <= Delay26_reg_next(31);
        Delay26_reg(32) <= Delay26_reg_next(32);
      END IF;
    END IF;
  END PROCESS Delay26_process;

  Delay26_out1 <= Delay26_reg(32);
  Delay26_reg_next(0) <= Switch5_out1_3;
  Delay26_reg_next(1) <= Delay26_reg(0);
  Delay26_reg_next(2) <= Delay26_reg(1);
  Delay26_reg_next(3) <= Delay26_reg(2);
  Delay26_reg_next(4) <= Delay26_reg(3);
  Delay26_reg_next(5) <= Delay26_reg(4);
  Delay26_reg_next(6) <= Delay26_reg(5);
  Delay26_reg_next(7) <= Delay26_reg(6);
  Delay26_reg_next(8) <= Delay26_reg(7);
  Delay26_reg_next(9) <= Delay26_reg(8);
  Delay26_reg_next(10) <= Delay26_reg(9);
  Delay26_reg_next(11) <= Delay26_reg(10);
  Delay26_reg_next(12) <= Delay26_reg(11);
  Delay26_reg_next(13) <= Delay26_reg(12);
  Delay26_reg_next(14) <= Delay26_reg(13);
  Delay26_reg_next(15) <= Delay26_reg(14);
  Delay26_reg_next(16) <= Delay26_reg(15);
  Delay26_reg_next(17) <= Delay26_reg(16);
  Delay26_reg_next(18) <= Delay26_reg(17);
  Delay26_reg_next(19) <= Delay26_reg(18);
  Delay26_reg_next(20) <= Delay26_reg(19);
  Delay26_reg_next(21) <= Delay26_reg(20);
  Delay26_reg_next(22) <= Delay26_reg(21);
  Delay26_reg_next(23) <= Delay26_reg(22);
  Delay26_reg_next(24) <= Delay26_reg(23);
  Delay26_reg_next(25) <= Delay26_reg(24);
  Delay26_reg_next(26) <= Delay26_reg(25);
  Delay26_reg_next(27) <= Delay26_reg(26);
  Delay26_reg_next(28) <= Delay26_reg(27);
  Delay26_reg_next(29) <= Delay26_reg(28);
  Delay26_reg_next(30) <= Delay26_reg(29);
  Delay26_reg_next(31) <= Delay26_reg(30);
  Delay26_reg_next(32) <= Delay26_reg(31);

  
  Switch1_out1_8 <= if_exp_12_adjustment1_out1 WHEN Delay25_out1 = '0' ELSE
      Delay26_out1;

  
  Switch3_out1_9 <= Constant3_out1 WHEN Relational_Operator_relop1 = '0' ELSE
      Switch1_out1_8;

  Delay11_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay11_out1_4 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay11_out1_4 <= Switch3_out1_9;
      END IF;
    END IF;
  END PROCESS Delay11_4_process;


  Constant2_out1_8 <= to_unsigned(16#000000#, 23);

  Bit_Slice6_out1_1 <= Switch2_out1_8(22 DOWNTO 0);

  Bit_Shift2_out1_1 <= SHIFT_RIGHT(Bit_Slice6_out1_1, 1);

  
  Switch3_out1_10 <= Bit_Slice6_out1_1 WHEN Bit_Slice5_out1_3 = '0' ELSE
      Bit_Shift2_out1_1;

  Delay4_6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_out1_6 <= to_unsigned(16#000000#, 23);
      ELSIF enb = '1' THEN
        Delay4_out1_6 <= Switch3_out1_10;
      END IF;
    END IF;
  END PROCESS Delay4_6_process;


  Delay26_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay26_reg_1(0) <= to_unsigned(16#000000#, 24);
        Delay26_reg_1(1) <= to_unsigned(16#000000#, 24);
        Delay26_reg_1(2) <= to_unsigned(16#000000#, 24);
        Delay26_reg_1(3) <= to_unsigned(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay26_reg_1(0) <= Delay26_reg_next_1(0);
        Delay26_reg_1(1) <= Delay26_reg_next_1(1);
        Delay26_reg_1(2) <= Delay26_reg_next_1(2);
        Delay26_reg_1(3) <= Delay26_reg_next_1(3);
      END IF;
    END IF;
  END PROCESS Delay26_1_process;

  Delay26_out1_1 <= Delay26_reg_1(3);
  Delay26_reg_next_1(0) <= NormalizedMantissa_out2_1;
  Delay26_reg_next_1(1) <= Delay26_reg_1(0);
  Delay26_reg_next_1(2) <= Delay26_reg_1(1);
  Delay26_reg_next_1(3) <= Delay26_reg_1(2);

  BitSlice_out1_2 <= Delay26_out1_1(22 DOWNTO 0);

  Delay33_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay33_reg(0) <= to_unsigned(16#000000#, 23);
        Delay33_reg(1) <= to_unsigned(16#000000#, 23);
        Delay33_reg(2) <= to_unsigned(16#000000#, 23);
        Delay33_reg(3) <= to_unsigned(16#000000#, 23);
      ELSIF enb = '1' THEN
        Delay33_reg(0) <= Delay33_reg_next(0);
        Delay33_reg(1) <= Delay33_reg_next(1);
        Delay33_reg(2) <= Delay33_reg_next(2);
        Delay33_reg(3) <= Delay33_reg_next(3);
      END IF;
    END IF;
  END PROCESS Delay33_process;

  Delay33_out1 <= Delay33_reg(3);
  Delay33_reg_next(0) <= BitSlice_out1_2;
  Delay33_reg_next(1) <= Delay33_reg(0);
  Delay33_reg_next(2) <= Delay33_reg(1);
  Delay33_reg_next(3) <= Delay33_reg(2);

  
  if_exp_12_adjustment2_out1 <= Delay4_out1_6 WHEN exp_12_adjustment_out1_1 = '0' ELSE
      Delay33_out1;

  Delay18_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay18_out1 <= to_unsigned(16#000000#, 23);
      ELSIF enb = '1' THEN
        Delay18_out1 <= Delay15_out1;
      END IF;
    END IF;
  END PROCESS Delay18_process;


  Constant6_out1_1 <= to_unsigned(16#400000#, 23);

  
  Switch6_out1_1 <= Delay18_out1 WHEN Delay16_out1 = '0' ELSE
      Constant6_out1_1;

  Delay27_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay27_reg_1(0) <= to_unsigned(16#000000#, 23);
        Delay27_reg_1(1) <= to_unsigned(16#000000#, 23);
        Delay27_reg_1(2) <= to_unsigned(16#000000#, 23);
        Delay27_reg_1(3) <= to_unsigned(16#000000#, 23);
        Delay27_reg_1(4) <= to_unsigned(16#000000#, 23);
        Delay27_reg_1(5) <= to_unsigned(16#000000#, 23);
        Delay27_reg_1(6) <= to_unsigned(16#000000#, 23);
        Delay27_reg_1(7) <= to_unsigned(16#000000#, 23);
        Delay27_reg_1(8) <= to_unsigned(16#000000#, 23);
        Delay27_reg_1(9) <= to_unsigned(16#000000#, 23);
        Delay27_reg_1(10) <= to_unsigned(16#000000#, 23);
        Delay27_reg_1(11) <= to_unsigned(16#000000#, 23);
        Delay27_reg_1(12) <= to_unsigned(16#000000#, 23);
        Delay27_reg_1(13) <= to_unsigned(16#000000#, 23);
        Delay27_reg_1(14) <= to_unsigned(16#000000#, 23);
        Delay27_reg_1(15) <= to_unsigned(16#000000#, 23);
        Delay27_reg_1(16) <= to_unsigned(16#000000#, 23);
        Delay27_reg_1(17) <= to_unsigned(16#000000#, 23);
        Delay27_reg_1(18) <= to_unsigned(16#000000#, 23);
        Delay27_reg_1(19) <= to_unsigned(16#000000#, 23);
        Delay27_reg_1(20) <= to_unsigned(16#000000#, 23);
        Delay27_reg_1(21) <= to_unsigned(16#000000#, 23);
        Delay27_reg_1(22) <= to_unsigned(16#000000#, 23);
        Delay27_reg_1(23) <= to_unsigned(16#000000#, 23);
        Delay27_reg_1(24) <= to_unsigned(16#000000#, 23);
        Delay27_reg_1(25) <= to_unsigned(16#000000#, 23);
        Delay27_reg_1(26) <= to_unsigned(16#000000#, 23);
        Delay27_reg_1(27) <= to_unsigned(16#000000#, 23);
        Delay27_reg_1(28) <= to_unsigned(16#000000#, 23);
        Delay27_reg_1(29) <= to_unsigned(16#000000#, 23);
        Delay27_reg_1(30) <= to_unsigned(16#000000#, 23);
        Delay27_reg_1(31) <= to_unsigned(16#000000#, 23);
        Delay27_reg_1(32) <= to_unsigned(16#000000#, 23);
      ELSIF enb = '1' THEN
        Delay27_reg_1(0) <= Delay27_reg_next_1(0);
        Delay27_reg_1(1) <= Delay27_reg_next_1(1);
        Delay27_reg_1(2) <= Delay27_reg_next_1(2);
        Delay27_reg_1(3) <= Delay27_reg_next_1(3);
        Delay27_reg_1(4) <= Delay27_reg_next_1(4);
        Delay27_reg_1(5) <= Delay27_reg_next_1(5);
        Delay27_reg_1(6) <= Delay27_reg_next_1(6);
        Delay27_reg_1(7) <= Delay27_reg_next_1(7);
        Delay27_reg_1(8) <= Delay27_reg_next_1(8);
        Delay27_reg_1(9) <= Delay27_reg_next_1(9);
        Delay27_reg_1(10) <= Delay27_reg_next_1(10);
        Delay27_reg_1(11) <= Delay27_reg_next_1(11);
        Delay27_reg_1(12) <= Delay27_reg_next_1(12);
        Delay27_reg_1(13) <= Delay27_reg_next_1(13);
        Delay27_reg_1(14) <= Delay27_reg_next_1(14);
        Delay27_reg_1(15) <= Delay27_reg_next_1(15);
        Delay27_reg_1(16) <= Delay27_reg_next_1(16);
        Delay27_reg_1(17) <= Delay27_reg_next_1(17);
        Delay27_reg_1(18) <= Delay27_reg_next_1(18);
        Delay27_reg_1(19) <= Delay27_reg_next_1(19);
        Delay27_reg_1(20) <= Delay27_reg_next_1(20);
        Delay27_reg_1(21) <= Delay27_reg_next_1(21);
        Delay27_reg_1(22) <= Delay27_reg_next_1(22);
        Delay27_reg_1(23) <= Delay27_reg_next_1(23);
        Delay27_reg_1(24) <= Delay27_reg_next_1(24);
        Delay27_reg_1(25) <= Delay27_reg_next_1(25);
        Delay27_reg_1(26) <= Delay27_reg_next_1(26);
        Delay27_reg_1(27) <= Delay27_reg_next_1(27);
        Delay27_reg_1(28) <= Delay27_reg_next_1(28);
        Delay27_reg_1(29) <= Delay27_reg_next_1(29);
        Delay27_reg_1(30) <= Delay27_reg_next_1(30);
        Delay27_reg_1(31) <= Delay27_reg_next_1(31);
        Delay27_reg_1(32) <= Delay27_reg_next_1(32);
      END IF;
    END IF;
  END PROCESS Delay27_1_process;

  Delay27_out1_1 <= Delay27_reg_1(32);
  Delay27_reg_next_1(0) <= Switch6_out1_1;
  Delay27_reg_next_1(1) <= Delay27_reg_1(0);
  Delay27_reg_next_1(2) <= Delay27_reg_1(1);
  Delay27_reg_next_1(3) <= Delay27_reg_1(2);
  Delay27_reg_next_1(4) <= Delay27_reg_1(3);
  Delay27_reg_next_1(5) <= Delay27_reg_1(4);
  Delay27_reg_next_1(6) <= Delay27_reg_1(5);
  Delay27_reg_next_1(7) <= Delay27_reg_1(6);
  Delay27_reg_next_1(8) <= Delay27_reg_1(7);
  Delay27_reg_next_1(9) <= Delay27_reg_1(8);
  Delay27_reg_next_1(10) <= Delay27_reg_1(9);
  Delay27_reg_next_1(11) <= Delay27_reg_1(10);
  Delay27_reg_next_1(12) <= Delay27_reg_1(11);
  Delay27_reg_next_1(13) <= Delay27_reg_1(12);
  Delay27_reg_next_1(14) <= Delay27_reg_1(13);
  Delay27_reg_next_1(15) <= Delay27_reg_1(14);
  Delay27_reg_next_1(16) <= Delay27_reg_1(15);
  Delay27_reg_next_1(17) <= Delay27_reg_1(16);
  Delay27_reg_next_1(18) <= Delay27_reg_1(17);
  Delay27_reg_next_1(19) <= Delay27_reg_1(18);
  Delay27_reg_next_1(20) <= Delay27_reg_1(19);
  Delay27_reg_next_1(21) <= Delay27_reg_1(20);
  Delay27_reg_next_1(22) <= Delay27_reg_1(21);
  Delay27_reg_next_1(23) <= Delay27_reg_1(22);
  Delay27_reg_next_1(24) <= Delay27_reg_1(23);
  Delay27_reg_next_1(25) <= Delay27_reg_1(24);
  Delay27_reg_next_1(26) <= Delay27_reg_1(25);
  Delay27_reg_next_1(27) <= Delay27_reg_1(26);
  Delay27_reg_next_1(28) <= Delay27_reg_1(27);
  Delay27_reg_next_1(29) <= Delay27_reg_1(28);
  Delay27_reg_next_1(30) <= Delay27_reg_1(29);
  Delay27_reg_next_1(31) <= Delay27_reg_1(30);
  Delay27_reg_next_1(32) <= Delay27_reg_1(31);

  
  Switch_out1 <= if_exp_12_adjustment2_out1 WHEN Delay25_out1 = '0' ELSE
      Delay27_out1_1;

  
  Switch2_out1_9 <= Constant2_out1_8 WHEN Relational_Operator_relop1 = '0' ELSE
      Switch_out1;

  Delay10_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay10_out1_1 <= to_unsigned(16#000000#, 23);
      ELSIF enb = '1' THEN
        Delay10_out1_1 <= Switch2_out1_9;
      END IF;
    END IF;
  END PROCESS Delay10_1_process;


  -- Combine FP sign, exponent, mantissa into 32 bit word
  nfp_out_pack <= Delay12_out1 & Delay11_out1_4 & Delay10_out1_1;

  nfp_out <= std_logic_vector(nfp_out_pack);

END rtl;


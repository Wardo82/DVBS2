-- -------------------------------------------------------------
-- 
-- File Name: D:\Documents\DVBS2\DVBS2\src\transmitter\2-StreamAdaptation\xilinx_files\hdlsrc\stream_adaptation_model\stream_adapt.vhd
-- Created: 2021-02-01 10:30:32
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 2.06577e-05
-- Target subsystem base rate: 2.06577e-05
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        2.06577e-05
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- out_rsvd                      ce_out        2.06577e-05
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: stream_adapt
-- Source Path: stream_adaptation_model/stream_adapt
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY stream_adapt IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        input_bit                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        start                             :   IN    std_logic;
        valid                             :   IN    std_logic;
        end_rsvd                          :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        out_rsvd                          :   OUT   std_logic
        );
END stream_adapt;


ARCHITECTURE rtl OF stream_adapt IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Delay7_lowered_ctrl_const_out    : std_logic;
  SIGNAL Delay7_lowered_ctrl_delay_out    : std_logic;
  SIGNAL Delay7_lowered_Initial_Val_out   : std_logic;
  SIGNAL Delay5_lowered_ctrl_const_out    : std_logic;
  SIGNAL Delay5_lowered_ctrl_delay_out    : std_logic;
  SIGNAL Delay5_lowered_Initial_Val_out   : std_logic;
  SIGNAL Delay3_lowered_ctrl_const_out    : std_logic;
  SIGNAL Delay3_lowered_ctrl_delay_out    : std_logic;
  SIGNAL Delay3_lowered_Initial_Val_out   : std_logic;
  SIGNAL Delay_lowered_ctrl_const_out     : std_logic;
  SIGNAL Delay_lowered_ctrl_delay_out     : std_logic;
  SIGNAL Delay_lowered_Initial_Val_out    : std_logic;
  SIGNAL Delay_iv                         : std_logic;
  SIGNAL Delay1_iv                        : std_logic;
  SIGNAL Delay2_iv                        : std_logic;
  SIGNAL Delay3_iv                        : std_logic;
  SIGNAL Delay4_iv                        : std_logic;
  SIGNAL Delay5_iv                        : std_logic;
  SIGNAL Delay6_iv                        : std_logic;
  SIGNAL Delay7_iv                        : std_logic;
  SIGNAL Delay8_iv                        : std_logic;
  SIGNAL Delay9_iv                        : std_logic;
  SIGNAL Delay10_iv                       : std_logic;
  SIGNAL Delay11_iv                       : std_logic;
  SIGNAL Delay12_iv                       : std_logic;
  SIGNAL Delay13_iv                       : std_logic;
  SIGNAL Delay14_iv                       : std_logic;
  SIGNAL Delay13_out1                     : std_logic;
  SIGNAL Delay14_toDel                    : std_logic;
  SIGNAL Delay14_delOut                   : std_logic;
  SIGNAL Delay14_out1                     : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL Delay_toDel                      : std_logic;
  SIGNAL Delay_lowered_out                : std_logic;
  SIGNAL Delay_delOut                     : std_logic;
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL Delay1_toDel                     : std_logic;
  SIGNAL Delay1_delOut                    : std_logic;
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Delay2_toDel                     : std_logic;
  SIGNAL Delay2_delOut                    : std_logic;
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL Delay3_toDel                     : std_logic;
  SIGNAL Delay3_lowered_out               : std_logic;
  SIGNAL Delay3_delOut                    : std_logic;
  SIGNAL Delay3_out1                      : std_logic;
  SIGNAL Delay4_toDel                     : std_logic;
  SIGNAL Delay4_delOut                    : std_logic;
  SIGNAL Delay4_out1                      : std_logic;
  SIGNAL Delay5_toDel                     : std_logic;
  SIGNAL Delay5_lowered_out               : std_logic;
  SIGNAL Delay5_delOut                    : std_logic;
  SIGNAL Delay5_out1                      : std_logic;
  SIGNAL Delay6_toDel                     : std_logic;
  SIGNAL Delay6_delOut                    : std_logic;
  SIGNAL Delay6_out1                      : std_logic;
  SIGNAL Delay7_toDel                     : std_logic;
  SIGNAL Delay7_lowered_out               : std_logic;
  SIGNAL Delay7_delOut                    : std_logic;
  SIGNAL Delay7_out1                      : std_logic;
  SIGNAL Delay8_toDel                     : std_logic;
  SIGNAL Delay8_delOut                    : std_logic;
  SIGNAL Delay8_out1                      : std_logic;
  SIGNAL Delay9_toDel                     : std_logic;
  SIGNAL Delay9_delOut                    : std_logic;
  SIGNAL Delay9_out1                      : std_logic;
  SIGNAL Delay10_toDel                    : std_logic;
  SIGNAL Delay10_delOut                   : std_logic;
  SIGNAL Delay10_out1                     : std_logic;
  SIGNAL Delay11_toDel                    : std_logic;
  SIGNAL Delay11_delOut                   : std_logic;
  SIGNAL Delay11_out1                     : std_logic;
  SIGNAL Delay12_toDel                    : std_logic;
  SIGNAL Delay12_delOut                   : std_logic;
  SIGNAL Delay12_out1                     : std_logic;
  SIGNAL Delay13_toDel                    : std_logic;
  SIGNAL Delay13_delOut                   : std_logic;
  SIGNAL frame_counter_out1               : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL Logical_Operator2_out1           : std_logic;
  SIGNAL ended_flag_iv                    : std_logic;
  SIGNAL ended_flag_out1                  : std_logic;
  SIGNAL Switch_out1                      : std_logic;
  SIGNAL ended_flag_toDel                 : std_logic;
  SIGNAL ended_flag_delOut                : std_logic;
  SIGNAL Compare_To_Constant1_out1        : std_logic;
  SIGNAL Logical_Operator3_out1           : std_logic;
  SIGNAL input_bit_signed                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Constant_out1                    : std_logic;  -- ufix1_En1000
  SIGNAL Constant_out1_dtc                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Switch1_out1                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Switch1_out1_is_not0             : std_logic;
  SIGNAL Logical_Operator1_out1           : std_logic;

BEGIN
  -- Padding unit
  -- 
  -- If the counter has not reached the end of a frame and the end flag was risen,
  -- padd with 0's.

  Delay7_lowered_ctrl_const_out <= '1';

  enb <= clk_enable;

  Delay7_lowered_ctrl_delay_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Delay7_lowered_ctrl_delay_out <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay7_lowered_ctrl_delay_out <= Delay7_lowered_ctrl_const_out;
      END IF;
    END IF;
  END PROCESS Delay7_lowered_ctrl_delay_process;


  Delay7_lowered_Initial_Val_out <= '1';

  Delay5_lowered_ctrl_const_out <= '1';

  Delay5_lowered_ctrl_delay_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Delay5_lowered_ctrl_delay_out <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay5_lowered_ctrl_delay_out <= Delay5_lowered_ctrl_const_out;
      END IF;
    END IF;
  END PROCESS Delay5_lowered_ctrl_delay_process;


  Delay5_lowered_Initial_Val_out <= '1';

  Delay3_lowered_ctrl_const_out <= '1';

  Delay3_lowered_ctrl_delay_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Delay3_lowered_ctrl_delay_out <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_lowered_ctrl_delay_out <= Delay3_lowered_ctrl_const_out;
      END IF;
    END IF;
  END PROCESS Delay3_lowered_ctrl_delay_process;


  Delay3_lowered_Initial_Val_out <= '1';

  Delay_lowered_ctrl_const_out <= '1';

  Delay_lowered_ctrl_delay_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Delay_lowered_ctrl_delay_out <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_lowered_ctrl_delay_out <= Delay_lowered_ctrl_const_out;
      END IF;
    END IF;
  END PROCESS Delay_lowered_ctrl_delay_process;


  Delay_lowered_Initial_Val_out <= '1';

  Delay_iv <= '1';

  Delay1_iv <= '0';

  Delay2_iv <= '0';

  Delay3_iv <= '1';

  Delay4_iv <= '0';

  Delay5_iv <= '1';

  Delay6_iv <= '0';

  Delay7_iv <= '1';

  Delay8_iv <= '0';

  Delay9_iv <= '0';

  Delay10_iv <= '0';

  Delay11_iv <= '0';

  Delay12_iv <= '0';

  Delay13_iv <= '0';

  Delay14_iv <= '0';

  
  Delay14_toDel <= Delay13_out1 WHEN start = '0' ELSE
      Delay14_iv;

  Delay14_lowered_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Delay14_delOut <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay14_delOut <= Delay14_toDel;
      END IF;
    END IF;
  END PROCESS Delay14_lowered_process;


  
  Delay14_out1 <= Delay14_delOut WHEN start = '0' ELSE
      Delay14_iv;

  
  Delay_toDel <= Logical_Operator_out1 WHEN start = '0' ELSE
      Delay_iv;

  Delay_lowered_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Delay_lowered_out <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_lowered_out <= Delay_toDel;
      END IF;
    END IF;
  END PROCESS Delay_lowered_process;


  
  Delay_delOut <= Delay_lowered_Initial_Val_out WHEN Delay_lowered_ctrl_delay_out = '0' ELSE
      Delay_lowered_out;

  
  Delay_out1 <= Delay_delOut WHEN start = '0' ELSE
      Delay_iv;

  
  Delay1_toDel <= Delay_out1 WHEN start = '0' ELSE
      Delay1_iv;

  Delay1_lowered_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Delay1_delOut <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_delOut <= Delay1_toDel;
      END IF;
    END IF;
  END PROCESS Delay1_lowered_process;


  
  Delay1_out1 <= Delay1_delOut WHEN start = '0' ELSE
      Delay1_iv;

  
  Delay2_toDel <= Delay1_out1 WHEN start = '0' ELSE
      Delay2_iv;

  Delay2_lowered_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Delay2_delOut <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_delOut <= Delay2_toDel;
      END IF;
    END IF;
  END PROCESS Delay2_lowered_process;


  
  Delay2_out1 <= Delay2_delOut WHEN start = '0' ELSE
      Delay2_iv;

  
  Delay3_toDel <= Delay2_out1 WHEN start = '0' ELSE
      Delay3_iv;

  Delay3_lowered_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Delay3_lowered_out <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_lowered_out <= Delay3_toDel;
      END IF;
    END IF;
  END PROCESS Delay3_lowered_process;


  
  Delay3_delOut <= Delay3_lowered_Initial_Val_out WHEN Delay3_lowered_ctrl_delay_out = '0' ELSE
      Delay3_lowered_out;

  
  Delay3_out1 <= Delay3_delOut WHEN start = '0' ELSE
      Delay3_iv;

  
  Delay4_toDel <= Delay3_out1 WHEN start = '0' ELSE
      Delay4_iv;

  Delay4_lowered_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Delay4_delOut <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_delOut <= Delay4_toDel;
      END IF;
    END IF;
  END PROCESS Delay4_lowered_process;


  
  Delay4_out1 <= Delay4_delOut WHEN start = '0' ELSE
      Delay4_iv;

  
  Delay5_toDel <= Delay4_out1 WHEN start = '0' ELSE
      Delay5_iv;

  Delay5_lowered_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Delay5_lowered_out <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay5_lowered_out <= Delay5_toDel;
      END IF;
    END IF;
  END PROCESS Delay5_lowered_process;


  
  Delay5_delOut <= Delay5_lowered_Initial_Val_out WHEN Delay5_lowered_ctrl_delay_out = '0' ELSE
      Delay5_lowered_out;

  
  Delay5_out1 <= Delay5_delOut WHEN start = '0' ELSE
      Delay5_iv;

  
  Delay6_toDel <= Delay5_out1 WHEN start = '0' ELSE
      Delay6_iv;

  Delay6_lowered_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Delay6_delOut <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay6_delOut <= Delay6_toDel;
      END IF;
    END IF;
  END PROCESS Delay6_lowered_process;


  
  Delay6_out1 <= Delay6_delOut WHEN start = '0' ELSE
      Delay6_iv;

  
  Delay7_toDel <= Delay6_out1 WHEN start = '0' ELSE
      Delay7_iv;

  Delay7_lowered_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Delay7_lowered_out <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay7_lowered_out <= Delay7_toDel;
      END IF;
    END IF;
  END PROCESS Delay7_lowered_process;


  
  Delay7_delOut <= Delay7_lowered_Initial_Val_out WHEN Delay7_lowered_ctrl_delay_out = '0' ELSE
      Delay7_lowered_out;

  
  Delay7_out1 <= Delay7_delOut WHEN start = '0' ELSE
      Delay7_iv;

  
  Delay8_toDel <= Delay7_out1 WHEN start = '0' ELSE
      Delay8_iv;

  Delay8_lowered_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Delay8_delOut <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay8_delOut <= Delay8_toDel;
      END IF;
    END IF;
  END PROCESS Delay8_lowered_process;


  
  Delay8_out1 <= Delay8_delOut WHEN start = '0' ELSE
      Delay8_iv;

  
  Delay9_toDel <= Delay8_out1 WHEN start = '0' ELSE
      Delay9_iv;

  Delay9_lowered_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Delay9_delOut <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay9_delOut <= Delay9_toDel;
      END IF;
    END IF;
  END PROCESS Delay9_lowered_process;


  
  Delay9_out1 <= Delay9_delOut WHEN start = '0' ELSE
      Delay9_iv;

  
  Delay10_toDel <= Delay9_out1 WHEN start = '0' ELSE
      Delay10_iv;

  Delay10_lowered_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Delay10_delOut <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay10_delOut <= Delay10_toDel;
      END IF;
    END IF;
  END PROCESS Delay10_lowered_process;


  
  Delay10_out1 <= Delay10_delOut WHEN start = '0' ELSE
      Delay10_iv;

  
  Delay11_toDel <= Delay10_out1 WHEN start = '0' ELSE
      Delay11_iv;

  Delay11_lowered_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Delay11_delOut <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay11_delOut <= Delay11_toDel;
      END IF;
    END IF;
  END PROCESS Delay11_lowered_process;


  
  Delay11_out1 <= Delay11_delOut WHEN start = '0' ELSE
      Delay11_iv;

  
  Delay12_toDel <= Delay11_out1 WHEN start = '0' ELSE
      Delay12_iv;

  Delay12_lowered_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Delay12_delOut <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay12_delOut <= Delay12_toDel;
      END IF;
    END IF;
  END PROCESS Delay12_lowered_process;


  
  Delay12_out1 <= Delay12_delOut WHEN start = '0' ELSE
      Delay12_iv;

  
  Delay13_toDel <= Delay12_out1 WHEN start = '0' ELSE
      Delay13_iv;

  Delay13_lowered_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Delay13_delOut <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay13_delOut <= Delay13_toDel;
      END IF;
    END IF;
  END PROCESS Delay13_lowered_process;


  
  Delay13_out1 <= Delay13_delOut WHEN start = '0' ELSE
      Delay13_iv;

  Logical_Operator_out1 <= Delay13_out1 XOR Delay14_out1;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 48408
  frame_counter_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      frame_counter_out1 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF start = '1' THEN 
          frame_counter_out1 <= to_unsigned(16#0000#, 16);
        ELSIF valid = '1' THEN 
          IF frame_counter_out1 >= to_unsigned(16#BD18#, 16) THEN 
            frame_counter_out1 <= to_unsigned(16#0000#, 16);
          ELSE 
            frame_counter_out1 <= frame_counter_out1 + to_unsigned(16#0001#, 16);
          END IF;
        END IF;
      END IF;
    END IF;
  END PROCESS frame_counter_process;


  
  Compare_To_Constant_out1 <= '1' WHEN frame_counter_out1 >= to_unsigned(16#BD18#, 16) ELSE
      '0';

  Logical_Operator2_out1 <=  NOT Compare_To_Constant_out1;

  ended_flag_iv <= '0';

  
  Switch_out1 <= end_rsvd WHEN ended_flag_out1 = '0' ELSE
      ended_flag_out1;

  
  ended_flag_toDel <= Switch_out1 WHEN Compare_To_Constant_out1 = '0' ELSE
      ended_flag_iv;

  ended_flag_lowered_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      ended_flag_delOut <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        ended_flag_delOut <= ended_flag_toDel;
      END IF;
    END IF;
  END PROCESS ended_flag_lowered_process;


  
  ended_flag_out1 <= ended_flag_delOut WHEN Compare_To_Constant_out1 = '0' ELSE
      ended_flag_iv;

  
  Compare_To_Constant1_out1 <= '1' WHEN ended_flag_out1 = '1' ELSE
      '0';

  Logical_Operator3_out1 <= Logical_Operator2_out1 AND Compare_To_Constant1_out1;

  input_bit_signed <= signed(input_bit);

  Constant_out1 <= '0';

  Constant_out1_dtc <= to_signed(16#0000#, 16);

  
  Switch1_out1 <= input_bit_signed WHEN Logical_Operator3_out1 = '0' ELSE
      Constant_out1_dtc;

  
  Switch1_out1_is_not0 <= '1' WHEN Switch1_out1 /= to_signed(16#0000#, 16) ELSE
      '0';

  Logical_Operator1_out1 <= Logical_Operator_out1 XOR Switch1_out1_is_not0;

  ce_out <= clk_enable;

  out_rsvd <= Logical_Operator1_out1;

END rtl;


-- -------------------------------------------------------------
-- 
-- File Name: /home/wardo/Documents/DVBS2/DVBS2/src/transmitter/generic_files/hdlsrc/transmitter/interleaver_dut.vhd
-- Created: 2021-02-05 09:22:23
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: interleaver_dut
-- Source Path: transmitter/tran_dut/interleaver_dut
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY interleaver_dut IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_8_0                         :   IN    std_logic;
        input_bit                         :   IN    std_logic;
        valid                             :   IN    std_logic;
        end_rsvd                          :   IN    std_logic;
        data_out                          :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix3
        valid_out                         :   OUT   std_logic
        );
END interleaver_dut;


ARCHITECTURE rtl OF interleaver_dut IS

  -- Component Declarations
  COMPONENT SinglePortRAM_singlebit
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( clk                             :   IN    std_logic;
          enb_1_8_0                       :   IN    std_logic;
          din                             :   IN    std_logic;
          addr                            :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          we                              :   IN    std_logic;
          dout                            :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : SinglePortRAM_singlebit
    USE ENTITY work.SinglePortRAM_singlebit(rtl);

  -- Signals
  SIGNAL row_counter_out1                 : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL column_counter_out1              : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Compare_To_Constant1_out1        : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL Single_Port_RAM_out1             : std_logic;
  SIGNAL Compare_To_Constant2_out1        : std_logic;
  SIGNAL Logical_Operator1_out1           : std_logic;
  SIGNAL Single_Port_RAM1_out1            : std_logic;
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Bit_Concat_out1                  : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Compare_To_Constant3_out1        : std_logic;
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL Logical_Operator2_out1           : std_logic;

BEGIN
  u_Single_Port_RAM : SinglePortRAM_singlebit
    GENERIC MAP( AddrWidth => 15,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb_1_8_0 => enb_1_8_0,
              din => input_bit,
              addr => std_logic_vector(row_counter_out1),
              we => Logical_Operator_out1,
              dout => Single_Port_RAM_out1
              );

  u_Single_Port_RAM1 : SinglePortRAM_singlebit
    GENERIC MAP( AddrWidth => 15,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb_1_8_0 => enb_1_8_0,
              din => input_bit,
              addr => std_logic_vector(row_counter_out1),
              we => Logical_Operator1_out1,
              dout => Single_Port_RAM1_out1
              );

  
  Compare_To_Constant_out1 <= '1' WHEN row_counter_out1 = to_unsigned(16#5460#, 15) ELSE
      '0';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 21600
  row_counter_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      row_counter_out1 <= to_unsigned(16#0001#, 15);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_8_0 = '1' THEN
        IF Compare_To_Constant_out1 = '1' THEN 
          row_counter_out1 <= to_unsigned(16#0001#, 15);
        ELSIF valid = '1' THEN 
          IF row_counter_out1 >= to_unsigned(16#5460#, 15) THEN 
            row_counter_out1 <= to_unsigned(16#0001#, 15);
          ELSE 
            row_counter_out1 <= row_counter_out1 + to_unsigned(16#0001#, 15);
          END IF;
        END IF;
      END IF;
    END IF;
  END PROCESS row_counter_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 2
  column_counter_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      column_counter_out1 <= to_unsigned(16#0#, 3);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_8_0 = '1' THEN
        IF end_rsvd = '1' THEN 
          column_counter_out1 <= to_unsigned(16#0#, 3);
        ELSIF Compare_To_Constant_out1 = '1' THEN 
          IF column_counter_out1 >= to_unsigned(16#2#, 3) THEN 
            column_counter_out1 <= to_unsigned(16#0#, 3);
          ELSE 
            column_counter_out1 <= column_counter_out1 + to_unsigned(16#1#, 3);
          END IF;
        END IF;
      END IF;
    END IF;
  END PROCESS column_counter_process;


  
  Compare_To_Constant1_out1 <= '1' WHEN column_counter_out1 = to_unsigned(16#0#, 3) ELSE
      '0';

  Logical_Operator_out1 <= Compare_To_Constant1_out1 AND valid;

  
  Compare_To_Constant2_out1 <= '1' WHEN column_counter_out1 = to_unsigned(16#1#, 3) ELSE
      '0';

  Logical_Operator1_out1 <= Compare_To_Constant2_out1 AND valid;

  Delay1_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Delay1_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_8_0 = '1' THEN
        Delay1_out1 <= input_bit;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Bit_Concat_out1 <= unsigned'(Single_Port_RAM_out1 & Single_Port_RAM1_out1 & Delay1_out1);

  data_out <= std_logic_vector(Bit_Concat_out1);

  
  Compare_To_Constant3_out1 <= '1' WHEN column_counter_out1 = to_unsigned(16#2#, 3) ELSE
      '0';

  Delay_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Delay_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_8_0 = '1' THEN
        Delay_out1 <= Compare_To_Constant3_out1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  Logical_Operator2_out1 <= Delay_out1 AND valid;

  valid_out <= Logical_Operator2_out1;

END rtl;


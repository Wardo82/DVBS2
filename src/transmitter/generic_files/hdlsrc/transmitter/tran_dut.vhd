-- -------------------------------------------------------------
-- 
-- File Name: /home/wardo/Documents/DVBS2/DVBS2/src/transmitter/generic_files/hdlsrc/transmitter/tran_dut.vhd
-- Created: 2021-02-05 09:22:23
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 0.258222
-- Target subsystem base rate: 0.258222
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        0.258222
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- inphase                       ce_out        0.258222
-- quadrature                    ce_out        0.258222
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: tran_dut
-- Source Path: transmitter/tran_dut
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY tran_dut IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        input_bit                         :   IN    std_logic;  -- ufix1
        amplitude                         :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        start                             :   IN    std_logic;
        end_rsvd                          :   IN    std_logic;
        valid                             :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        inphase                           :   OUT   std_logic_vector(44 DOWNTO 0);  -- sfix45_En31
        quadrature                        :   OUT   std_logic_vector(44 DOWNTO 0)  -- sfix45_En31
        );
END tran_dut;


ARCHITECTURE rtl OF tran_dut IS

  -- Component Declarations
  COMPONENT tran_dut_tc
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          enb                             :   OUT   std_logic;
          enb_1_1_1                       :   OUT   std_logic;
          enb_1_8_0                       :   OUT   std_logic;
          enb_1_8_1                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT stream_adapt
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_8_0                       :   IN    std_logic;
          input_bit                       :   IN    std_logic;  -- ufix1
          start                           :   IN    std_logic;
          valid                           :   IN    std_logic;
          end_rsvd                        :   IN    std_logic;
          out_rsvd                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT bch_encoder
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_8_0                       :   IN    std_logic;
          in_rsvd                         :   IN    std_logic;
          end_of_frame                    :   IN    std_logic;
          out_rsvd                        :   OUT   std_logic;  -- ufix1
          valid                           :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT ldpc_encoder
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_8_0                       :   IN    std_logic;
          input_bit                       :   IN    std_logic;
          start                           :   IN    std_logic;
          end_of_frame                    :   IN    std_logic;
          out_rsvd                        :   OUT   std_logic;  -- ufix1
          valid                           :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT interleaver_dut
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_8_0                       :   IN    std_logic;
          input_bit                       :   IN    std_logic;
          valid                           :   IN    std_logic;
          end_rsvd                        :   IN    std_logic;
          data_out                        :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix3
          valid_out                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT bit_mapping
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          input_sequence                  :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
          amplitude                       :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          inphase                         :   OUT   std_logic_vector(24 DOWNTO 0);  -- sfix25_En15
          quadrature                      :   OUT   std_logic_vector(24 DOWNTO 0)  -- sfix25_En15
          );
  END COMPONENT;

  COMPONENT bb_shaping1
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          inphase                         :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En15
          quadrature                      :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En15
          i_filtered                      :   OUT   std_logic_vector(44 DOWNTO 0);  -- sfix45_En31
          q_filtered                      :   OUT   std_logic_vector(44 DOWNTO 0)  -- sfix45_En31
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : tran_dut_tc
    USE ENTITY work.tran_dut_tc(rtl);

  FOR ALL : stream_adapt
    USE ENTITY work.stream_adapt(rtl);

  FOR ALL : bch_encoder
    USE ENTITY work.bch_encoder(rtl);

  FOR ALL : ldpc_encoder
    USE ENTITY work.ldpc_encoder(rtl);

  FOR ALL : interleaver_dut
    USE ENTITY work.interleaver_dut(rtl);

  FOR ALL : bit_mapping
    USE ENTITY work.bit_mapping(rtl);

  FOR ALL : bb_shaping1
    USE ENTITY work.bb_shaping1(rtl);

  -- Signals
  SIGNAL enb_1_1_1                        : std_logic;
  SIGNAL enb_1_8_1                        : std_logic;
  SIGNAL enb                              : std_logic;
  SIGNAL enb_1_8_0                        : std_logic;
  SIGNAL stream_adapt_out1                : std_logic;
  SIGNAL HDL_Counter_out1                 : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Compare_To_Constant1_out1        : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL Compare_To_Constant2_out1        : std_logic;
  SIGNAL serial_out                       : std_logic;  -- ufix1
  SIGNAL valid_1                          : std_logic;  -- ufix1
  SIGNAL valid_2                          : std_logic;  -- ufix1
  SIGNAL stream_adapt_out1_1              : std_logic;
  SIGNAL serial_out_1                     : std_logic;  -- ufix1
  SIGNAL Switch2_out1                     : std_logic;
  SIGNAL MATLAB_Function_bypass_reg       : std_logic;  -- ufix1
  SIGNAL Switch2_out1_1                   : std_logic;
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL ldpc_encoder_out1                : std_logic;  -- ufix1
  SIGNAL valid_3                          : std_logic;  -- ufix1
  SIGNAL valid_4                          : std_logic;  -- ufix1
  SIGNAL ldpc_encoder_out1_1              : std_logic;  -- ufix1
  SIGNAL Switch3_out1                     : std_logic;
  SIGNAL Goto_bypass_reg                  : std_logic;  -- ufix1
  SIGNAL Switch3_out1_1                   : std_logic;
  SIGNAL y                                : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL interleaver_dut_out2             : std_logic;
  SIGNAL interleaver_dut_out2_1           : std_logic;
  SIGNAL interleaver_dut_out2_2           : std_logic;
  SIGNAL interleaver_dut_out2_dtc         : signed(24 DOWNTO 0);  -- sfix25_En15
  SIGNAL y_1                              : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL From_out1                        : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL bit_mapping_out1                 : std_logic_vector(24 DOWNTO 0);  -- ufix25
  SIGNAL bit_mapping_out2                 : std_logic_vector(24 DOWNTO 0);  -- ufix25
  SIGNAL bit_mapping_out1_signed          : signed(24 DOWNTO 0);  -- sfix25_En15
  SIGNAL Switch_out1                      : signed(24 DOWNTO 0);  -- sfix25_En15
  SIGNAL interleaver_dut_out2_dtc_1       : signed(24 DOWNTO 0);  -- sfix25_En15
  SIGNAL bit_mapping_out2_signed          : signed(24 DOWNTO 0);  -- sfix25_En15
  SIGNAL Switch1_out1                     : signed(24 DOWNTO 0);  -- sfix25_En15
  SIGNAL FIR_Interpolation_bypass_reg     : signed(24 DOWNTO 0);  -- sfix25
  SIGNAL Switch_out1_1                    : signed(24 DOWNTO 0);  -- sfix25_En15
  SIGNAL FIR_Interpolation1_bypass_reg    : signed(24 DOWNTO 0);  -- sfix25
  SIGNAL Switch1_out1_1                   : signed(24 DOWNTO 0);  -- sfix25_En15
  SIGNAL bb_shaping1_out1                 : std_logic_vector(44 DOWNTO 0);  -- ufix45
  SIGNAL bb_shaping1_out2                 : std_logic_vector(44 DOWNTO 0);  -- ufix45

BEGIN
  -- Pulse Shaping
  -- 
  -- Constellation Mapping
  -- 
  -- Forward Error Correction
  -- 
  -- Stream Adaptation

  u_tran_dut_tc : tran_dut_tc
    PORT MAP( clk => clk,
              reset_x => reset_x,
              clk_enable => clk_enable,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              enb_1_8_0 => enb_1_8_0,
              enb_1_8_1 => enb_1_8_1
              );

  u_stream_adapt : stream_adapt
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_8_0 => enb_1_8_0,
              input_bit => input_bit,  -- ufix1
              start => start,
              valid => valid,
              end_rsvd => end_rsvd,
              out_rsvd => stream_adapt_out1
              );

  u_bch_encoder : bch_encoder
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_8_0 => enb_1_8_0,
              in_rsvd => stream_adapt_out1,
              end_of_frame => Compare_To_Constant2_out1,
              out_rsvd => serial_out,  -- ufix1
              valid => valid_1  -- ufix1
              );

  u_ldpc_encoder : ldpc_encoder
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_8_0 => enb_1_8_0,
              input_bit => Switch2_out1_1,
              start => start,
              end_of_frame => Compare_To_Constant_out1,
              out_rsvd => ldpc_encoder_out1,  -- ufix1
              valid => valid_3  -- ufix1
              );

  u_interleaver_dut : interleaver_dut
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_8_0 => enb_1_8_0,
              input_bit => Switch3_out1_1,
              valid => Compare_To_Constant1_out1,
              end_rsvd => Logical_Operator_out1,
              data_out => y,  -- ufix3
              valid_out => interleaver_dut_out2
              );

  u_bit_mapping : bit_mapping
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              input_sequence => y_1,  -- ufix3
              amplitude => From_out1,  -- uint8
              inphase => bit_mapping_out1,  -- sfix25_En15
              quadrature => bit_mapping_out2  -- sfix25_En15
              );

  u_bb_shaping1 : bb_shaping1
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_1_1 => enb_1_1_1,
              inphase => std_logic_vector(Switch_out1_1),  -- sfix25_En15
              quadrature => std_logic_vector(Switch1_out1_1),  -- sfix25_En15
              i_filtered => bb_shaping1_out1,  -- sfix45_En31
              q_filtered => bb_shaping1_out2  -- sfix45_En31
              );

  
  Compare_To_Constant1_out1 <= '1' WHEN HDL_Counter_out1 <= to_unsigned(16#FD20#, 16) ELSE
      '0';

  Logical_Operator_out1 <=  NOT Compare_To_Constant1_out1;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 64800
  HDL_Counter_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      HDL_Counter_out1 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_8_0 = '1' THEN
        IF Logical_Operator_out1 = '1' THEN 
          HDL_Counter_out1 <= to_unsigned(16#0000#, 16);
        ELSIF valid = '1' THEN 
          IF HDL_Counter_out1 >= to_unsigned(16#FD20#, 16) THEN 
            HDL_Counter_out1 <= to_unsigned(16#0000#, 16);
          ELSE 
            HDL_Counter_out1 <= HDL_Counter_out1 + to_unsigned(16#0001#, 16);
          END IF;
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  
  Compare_To_Constant2_out1 <= '1' WHEN HDL_Counter_out1 = to_unsigned(16#BD18#, 16) ELSE
      '0';

  valid_2 <= valid_1;

  stream_adapt_out1_1 <= stream_adapt_out1;

  serial_out_1 <= serial_out;

  
  Switch2_out1 <= stream_adapt_out1_1 WHEN valid_2 = '0' ELSE
      serial_out_1;

  MATLAB_Function_bypass_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      MATLAB_Function_bypass_reg <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_8_1 = '1' THEN
        MATLAB_Function_bypass_reg <= Switch2_out1;
      END IF;
    END IF;
  END PROCESS MATLAB_Function_bypass_process;

  
  Switch2_out1_1 <= Switch2_out1 WHEN enb_1_8_1 = '1' ELSE
      MATLAB_Function_bypass_reg;

  
  Compare_To_Constant_out1 <= '1' WHEN HDL_Counter_out1 = to_unsigned(16#BDD8#, 16) ELSE
      '0';

  valid_4 <= valid_3;

  ldpc_encoder_out1_1 <= ldpc_encoder_out1;

  
  Switch3_out1 <= Switch2_out1 WHEN valid_4 = '0' ELSE
      ldpc_encoder_out1_1;

  Goto_bypass_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Goto_bypass_reg <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_8_1 = '1' THEN
        Goto_bypass_reg <= Switch3_out1;
      END IF;
    END IF;
  END PROCESS Goto_bypass_process;

  
  Switch3_out1_1 <= Switch3_out1 WHEN enb_1_8_1 = '1' ELSE
      Goto_bypass_reg;

  interleaver_dut_out2_1 <= interleaver_dut_out2;

  reduced_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      interleaver_dut_out2_2 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        interleaver_dut_out2_2 <= interleaver_dut_out2_1;
      END IF;
    END IF;
  END PROCESS reduced_process;


  interleaver_dut_out2_dtc <= signed(resize(unsigned'(interleaver_dut_out2_2 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0'), 25));

  y_1 <= std_logic_vector(unsigned(y));

  From_out1 <= std_logic_vector(unsigned(amplitude));

  bit_mapping_out1_signed <= signed(bit_mapping_out1);

  
  Switch_out1 <= interleaver_dut_out2_dtc WHEN interleaver_dut_out2_2 = '0' ELSE
      bit_mapping_out1_signed;

  interleaver_dut_out2_dtc_1 <= signed(resize(unsigned'(interleaver_dut_out2_2 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0'), 25));

  bit_mapping_out2_signed <= signed(bit_mapping_out2);

  
  Switch1_out1 <= interleaver_dut_out2_dtc_1 WHEN interleaver_dut_out2_2 = '0' ELSE
      bit_mapping_out2_signed;

  FIR_Interpolation_bypass_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      FIR_Interpolation_bypass_reg <= to_signed(16#0000000#, 25);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_8_1 = '1' THEN
        FIR_Interpolation_bypass_reg <= Switch_out1;
      END IF;
    END IF;
  END PROCESS FIR_Interpolation_bypass_process;

  
  Switch_out1_1 <= Switch_out1 WHEN enb_1_8_1 = '1' ELSE
      FIR_Interpolation_bypass_reg;

  FIR_Interpolation1_bypass_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      FIR_Interpolation1_bypass_reg <= to_signed(16#0000000#, 25);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_8_1 = '1' THEN
        FIR_Interpolation1_bypass_reg <= Switch1_out1;
      END IF;
    END IF;
  END PROCESS FIR_Interpolation1_bypass_process;

  
  Switch1_out1_1 <= Switch1_out1 WHEN enb_1_8_1 = '1' ELSE
      FIR_Interpolation1_bypass_reg;

  ce_out <= enb_1_1_1;

  inphase <= bb_shaping1_out1;

  quadrature <= bb_shaping1_out2;

END rtl;


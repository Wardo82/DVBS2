-- -------------------------------------------------------------
-- 
-- File Name: /home/wardo/Documents/DVBS2/DVBS2/src/transmitter/generic_files/hdlsrc/transmitter/p2s_block.vhd
-- Created: 2021-02-05 09:22:23
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: p2s_block
-- Source Path: transmitter/tran_dut/ldpc_encoder/p2s
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY p2s_block IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_8_0                         :   IN    std_logic;
        parallel_in                       :   IN    std_logic_vector(0 TO 16200);  -- ufix1 [16201]
        enable                            :   IN    std_logic;
        serial_out                        :   OUT   std_logic;  -- ufix1
        valid                             :   OUT   std_logic  -- ufix1
        );
END p2s_block;


ARCHITECTURE rtl OF p2s_block IS

  -- Signals
  SIGNAL moore_state_machine              : std_logic;  -- ufix1
  SIGNAL counter                          : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL buffer_rsvd                      : std_logic_vector(0 TO 16200);  -- ufix1 [16201]
  SIGNAL buffer_not_empty                 : std_logic;
  SIGNAL moore_state_machine_next         : std_logic;  -- ufix1
  SIGNAL counter_next                     : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL buffer_next                      : std_logic_vector(0 TO 16200);  -- ufix1 [16201]
  SIGNAL buffer_not_empty_next            : std_logic;

BEGIN
  p2s_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      buffer_not_empty <= '0';
      moore_state_machine <= '0';
      counter <= to_unsigned(16#0001#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_8_0 = '1' THEN
        moore_state_machine <= moore_state_machine_next;
        counter <= counter_next;
        buffer_rsvd <= buffer_next;
        buffer_not_empty <= buffer_not_empty_next;
      END IF;
    END IF;
  END PROCESS p2s_process;

  p2s_output : PROCESS (buffer_not_empty, buffer_rsvd, counter, enable, moore_state_machine,
       parallel_in)
    VARIABLE counter_temp : unsigned(15 DOWNTO 0);
    VARIABLE buffer_temp : std_logic_vector(0 TO 16200);
    VARIABLE sub_cast : signed(31 DOWNTO 0);
    VARIABLE sub_cast_0 : signed(31 DOWNTO 0);
  BEGIN
    sub_cast := to_signed(16#00000000#, 32);
    sub_cast_0 := to_signed(16#00000000#, 32);
    counter_temp := counter;
    buffer_temp := buffer_rsvd;
    moore_state_machine_next <= moore_state_machine;
    buffer_not_empty_next <= buffer_not_empty;
    IF ( NOT buffer_not_empty) = '1' THEN 
      buffer_temp := parallel_in;
      buffer_not_empty_next <= '1';
    END IF;
    CASE moore_state_machine IS
      WHEN '0' =>
        serial_out <= '0';
        valid <= '0';
        IF enable = '1' THEN 
          moore_state_machine_next <= '1';
          buffer_temp := parallel_in;
          sub_cast_0 := signed(resize(counter, 32));
          serial_out <= parallel_in(to_integer(sub_cast_0 - 1));
          counter_temp := counter + to_unsigned(16#0001#, 16);
          valid <= '1';
        END IF;
      WHEN '1' =>
        sub_cast := signed(resize(counter, 32));
        serial_out <= buffer_temp(to_integer(sub_cast - 1));
        counter_temp := counter + to_unsigned(16#0001#, 16);
        valid <= '1';
        IF counter_temp > to_unsigned(16#3F48#, 16) THEN 
          moore_state_machine_next <= '0';
        END IF;
      WHEN OTHERS => 
        serial_out <= '0';
        valid <= '0';
    END CASE;
    counter_next <= counter_temp;
    buffer_next <= buffer_temp;
  END PROCESS p2s_output;


END rtl;


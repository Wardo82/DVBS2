-- -------------------------------------------------------------
-- 
-- File Name: D:\Documents\DVBS2\DVBS2\src\transmitter\3-FEC\hdl_prj\hdlsrc\ldpc_dvbs2_model_v2\sequential_xor.vhd
-- Created: 2021-01-16 13:12:41
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: sequential_xor
-- Source Path: ldpc_dvbs2_model_v2/ldpc_encoder/sequential_xor
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY sequential_xor IS
  PORT( parity_in                         :   IN    std_logic_vector(0 TO 16200);  -- ufix1 [16201]
        parity_out                        :   OUT   std_logic_vector(0 TO 16199)  -- ufix1 [16200]
        );
END sequential_xor;


ARCHITECTURE rtl OF sequential_xor IS

  -- Functions
  -- HDLCODER_TO_STDLOGIC 
  FUNCTION hdlcoder_to_stdlogic(arg: boolean) RETURN std_logic IS
  BEGIN
    IF arg THEN
      RETURN '1';
    ELSE
      RETURN '0';
    END IF;
  END FUNCTION;


BEGIN
  sequential_xor_1_output : PROCESS (parity_in)
    VARIABLE parity_out1 : std_logic_vector(0 TO 16199);
    VARIABLE sub_cast : signed(31 DOWNTO 0);
    VARIABLE sub_cast_0 : signed(31 DOWNTO 0);
    VARIABLE sub_cast_1 : signed(31 DOWNTO 0);
  BEGIN
    sub_cast := to_signed(16#00000000#, 32);
    sub_cast_0 := to_signed(16#00000000#, 32);
    sub_cast_1 := to_signed(16#00000000#, 32);
    parity_out1 := (OTHERS => '0');
    parity_out1(0) := parity_in(0);

    FOR i IN 2 TO 16200 LOOP
      sub_cast := signed(resize(to_unsigned(i, 16), 32));
      sub_cast_0 := signed(resize(to_unsigned(i, 16), 32));
      sub_cast_1 := signed(resize(to_unsigned(i, 16), 32));
      parity_out1(to_integer(sub_cast - 1)) := hdlcoder_to_stdlogic((parity_in(to_integer(sub_cast_0 - 1)) /= '0') /= (parity_out1(to_integer(sub_cast_1 - 2)) /= '0'));
    END LOOP;

    parity_out <= parity_out1;
  END PROCESS sequential_xor_1_output;


END rtl;


-- -------------------------------------------------------------
-- 
-- File Name: /home/wardo/Documents/DVBS2/DVBS2/src/transmitter/3-FEC/ldpc/generic_files/hdlsrc/ldpc_dvbs2_model_v2/ldpc_encoder.vhd
-- Created: 2021-02-07 12:50:38
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1
-- Target subsystem base rate: 1
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- out_rsvd                      ce_out        1
-- valid_out                     ce_out        1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ldpc_encoder
-- Source Path: ldpc_dvbs2_model_v2/ldpc_encoder
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.ldpc_encoder_pac.ALL;

ENTITY ldpc_encoder IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        input_bit                         :   IN    std_logic;
        valid_in                          :   IN    std_logic;
        start                             :   IN    std_logic;
        end_of_frame                      :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        out_rsvd                          :   OUT   std_logic;  -- ufix1
        valid_out                         :   OUT   std_logic
        );
END ldpc_encoder;


ARCHITECTURE rtl OF ldpc_encoder IS

  -- Component Declarations
  COMPONENT address_calculator
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          rst                             :   IN    std_logic;
          addresses1                      :   OUT   vector_of_std_logic_vector14(0 TO 11)  -- ufix14 [12]
          );
  END COMPONENT;

  COMPONENT select_address
    PORT( addresses                       :   IN    vector_of_std_logic_vector14(0 TO 11);  -- ufix14 [12]
          a1                              :   OUT   std_logic_vector(13 DOWNTO 0);  -- ufix14
          a2                              :   OUT   std_logic_vector(13 DOWNTO 0);  -- ufix14
          a3                              :   OUT   std_logic_vector(13 DOWNTO 0);  -- ufix14
          a4                              :   OUT   std_logic_vector(13 DOWNTO 0);  -- ufix14
          a5                              :   OUT   std_logic_vector(13 DOWNTO 0);  -- ufix14
          a6                              :   OUT   std_logic_vector(13 DOWNTO 0);  -- ufix14
          a7                              :   OUT   std_logic_vector(13 DOWNTO 0);  -- ufix14
          a8                              :   OUT   std_logic_vector(13 DOWNTO 0);  -- ufix14
          a9                              :   OUT   std_logic_vector(13 DOWNTO 0);  -- ufix14
          a10                             :   OUT   std_logic_vector(13 DOWNTO 0);  -- ufix14
          a11                             :   OUT   std_logic_vector(13 DOWNTO 0);  -- ufix14
          a12                             :   OUT   std_logic_vector(13 DOWNTO 0)  -- ufix14
          );
  END COMPONENT;

  COMPONENT ram_bank
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          input                           :   IN    std_logic;
          enable                          :   IN    std_logic;
          address                         :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          address1                        :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          address2                        :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          address3                        :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          address4                        :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          address5                        :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          address6                        :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          address7                        :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          address8                        :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          address9                        :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          address10                       :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          address11                       :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          bit_out                         :   OUT   std_logic;
          bit_out1                        :   OUT   std_logic;
          bit_out2                        :   OUT   std_logic;
          bit_out3                        :   OUT   std_logic;
          bit_out4                        :   OUT   std_logic;
          bit_out5                        :   OUT   std_logic;
          bit_out6                        :   OUT   std_logic;
          bit_out7                        :   OUT   std_logic;
          bit_out8                        :   OUT   std_logic;
          bit_out9                        :   OUT   std_logic;
          bit_out10                       :   OUT   std_logic;
          bit_out11                       :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : address_calculator
    USE ENTITY work.address_calculator(rtl);

  FOR ALL : select_address
    USE ENTITY work.select_address(rtl);

  FOR ALL : ram_bank
    USE ENTITY work.ram_bank(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL frame_counter_out1               : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL ended_flag_iv                    : std_logic;
  SIGNAL ended_flag_out1                  : std_logic;
  SIGNAL Switch1_out1                     : std_logic;
  SIGNAL ended_flag_toDel                 : std_logic;
  SIGNAL ended_flag_delOut                : std_logic;
  SIGNAL Delay_reg                        : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL Logical_Operator1_out1           : std_logic;
  SIGNAL addresses                        : vector_of_std_logic_vector14(0 TO 11);  -- ufix14 [12]
  SIGNAL a1                               : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL a2                               : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL a3                               : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL a4                               : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL a5                               : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL a6                               : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL a7                               : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL a8                               : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL a9                               : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL a10                              : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL a11                              : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL a12                              : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL a1_unsigned                      : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL Switch2_out1                     : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL a2_unsigned                      : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL Switch3_out1                     : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL a3_unsigned                      : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL Switch4_out1                     : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL a4_unsigned                      : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL Switch5_out1                     : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL a5_unsigned                      : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL Switch6_out1                     : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL a6_unsigned                      : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL Switch7_out1                     : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL a7_unsigned                      : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL Switch8_out1                     : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL a8_unsigned                      : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL Switch9_out1                     : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL a9_unsigned                      : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL Switch10_out1                    : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL a10_unsigned                     : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL Switch11_out1                    : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL a11_unsigned                     : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL Switch12_out1                    : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL a12_unsigned                     : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL Switch13_out1                    : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL ram_bank_out1                    : std_logic;
  SIGNAL ram_bank_out2                    : std_logic;
  SIGNAL ram_bank_out3                    : std_logic;
  SIGNAL ram_bank_out4                    : std_logic;
  SIGNAL ram_bank_out5                    : std_logic;
  SIGNAL ram_bank_out6                    : std_logic;
  SIGNAL ram_bank_out7                    : std_logic;
  SIGNAL ram_bank_out8                    : std_logic;
  SIGNAL ram_bank_out9                    : std_logic;
  SIGNAL ram_bank_out10                   : std_logic;
  SIGNAL ram_bank_out11                   : std_logic;
  SIGNAL ram_bank_out12                   : std_logic;
  SIGNAL global_xor_out1                  : std_logic;
  SIGNAL global_xor2_out1                 : std_logic;
  SIGNAL global_xor4_out1                 : std_logic;
  SIGNAL global_xor1_out1                 : std_logic;
  SIGNAL global_xor9_out1                 : std_logic;
  SIGNAL global_xor3_out1                 : std_logic;
  SIGNAL global_xor7_out1                 : std_logic;
  SIGNAL global_xor5_out1                 : std_logic;
  SIGNAL global_xor8_out1                 : std_logic;
  SIGNAL global_xor10_out1                : std_logic;
  SIGNAL global_xor11_out1                : std_logic;
  SIGNAL Delay1_out1                      : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1            : std_logic;  -- ufix1
  SIGNAL Delay1_delOut                    : std_logic;  -- ufix1
  SIGNAL Delay1_ectrl                     : std_logic;  -- ufix1
  SIGNAL Delay1_last_value                : std_logic;  -- ufix1

BEGIN
  -- Sequential xor

  u_address_calculator : address_calculator
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => clk_enable,
              rst => start,
              addresses1 => addresses  -- ufix14 [12]
              );

  u_select_address : select_address
    PORT MAP( addresses => addresses,  -- ufix14 [12]
              a1 => a1,  -- ufix14
              a2 => a2,  -- ufix14
              a3 => a3,  -- ufix14
              a4 => a4,  -- ufix14
              a5 => a5,  -- ufix14
              a6 => a6,  -- ufix14
              a7 => a7,  -- ufix14
              a8 => a8,  -- ufix14
              a9 => a9,  -- ufix14
              a10 => a10,  -- ufix14
              a11 => a11,  -- ufix14
              a12 => a12  -- ufix14
              );

  u_ram_bank : ram_bank
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => clk_enable,
              input => input_bit,
              enable => Logical_Operator1_out1,
              address => std_logic_vector(Switch2_out1),  -- ufix14
              address1 => std_logic_vector(Switch3_out1),  -- ufix14
              address2 => std_logic_vector(Switch4_out1),  -- ufix14
              address3 => std_logic_vector(Switch5_out1),  -- ufix14
              address4 => std_logic_vector(Switch6_out1),  -- ufix14
              address5 => std_logic_vector(Switch7_out1),  -- ufix14
              address6 => std_logic_vector(Switch8_out1),  -- ufix14
              address7 => std_logic_vector(Switch9_out1),  -- ufix14
              address8 => std_logic_vector(Switch10_out1),  -- ufix14
              address9 => std_logic_vector(Switch11_out1),  -- ufix14
              address10 => std_logic_vector(Switch12_out1),  -- ufix14
              address11 => std_logic_vector(Switch13_out1),  -- ufix14
              bit_out => ram_bank_out1,
              bit_out1 => ram_bank_out2,
              bit_out2 => ram_bank_out3,
              bit_out3 => ram_bank_out4,
              bit_out4 => ram_bank_out5,
              bit_out5 => ram_bank_out6,
              bit_out6 => ram_bank_out7,
              bit_out7 => ram_bank_out8,
              bit_out8 => ram_bank_out9,
              bit_out9 => ram_bank_out10,
              bit_out10 => ram_bank_out11,
              bit_out11 => ram_bank_out12
              );

  enb <= clk_enable;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 16200
  frame_counter_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        frame_counter_out1 <= to_unsigned(16#0000#, 14);
      ELSIF enb = '1' THEN
        IF end_of_frame = '1' THEN 
          frame_counter_out1 <= to_unsigned(16#0000#, 14);
        ELSIF frame_counter_out1 >= to_unsigned(16#3F48#, 14) THEN 
          frame_counter_out1 <= to_unsigned(16#0000#, 14);
        ELSE 
          frame_counter_out1 <= frame_counter_out1 + to_unsigned(16#0001#, 14);
        END IF;
      END IF;
    END IF;
  END PROCESS frame_counter_process;


  
  Compare_To_Constant_out1 <= '1' WHEN frame_counter_out1 = to_unsigned(16#3F48#, 14) ELSE
      '0';

  ended_flag_iv <= '0';

  
  Switch1_out1 <= end_of_frame WHEN ended_flag_out1 = '0' ELSE
      ended_flag_out1;

  
  ended_flag_toDel <= Switch1_out1 WHEN Compare_To_Constant_out1 = '0' ELSE
      ended_flag_iv;

  ended_flag_lowered_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        ended_flag_delOut <= '0';
      ELSIF enb = '1' THEN
        ended_flag_delOut <= ended_flag_toDel;
      END IF;
    END IF;
  END PROCESS ended_flag_lowered_process;


  
  ended_flag_out1 <= ended_flag_delOut WHEN Compare_To_Constant_out1 = '0' ELSE
      ended_flag_iv;

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay_reg(0) <= ended_flag_out1;
        Delay_reg(1) <= Delay_reg(0);
      END IF;
    END IF;
  END PROCESS Delay_process;

  Delay_out1 <= Delay_reg(1);

  Logical_Operator1_out1 <=  NOT ended_flag_out1;

  a1_unsigned <= unsigned(a1);

  
  Switch2_out1 <= a1_unsigned WHEN ended_flag_out1 = '0' ELSE
      frame_counter_out1;

  a2_unsigned <= unsigned(a2);

  
  Switch3_out1 <= a2_unsigned WHEN ended_flag_out1 = '0' ELSE
      frame_counter_out1;

  a3_unsigned <= unsigned(a3);

  
  Switch4_out1 <= a3_unsigned WHEN ended_flag_out1 = '0' ELSE
      frame_counter_out1;

  a4_unsigned <= unsigned(a4);

  
  Switch5_out1 <= a4_unsigned WHEN ended_flag_out1 = '0' ELSE
      frame_counter_out1;

  a5_unsigned <= unsigned(a5);

  
  Switch6_out1 <= a5_unsigned WHEN ended_flag_out1 = '0' ELSE
      frame_counter_out1;

  a6_unsigned <= unsigned(a6);

  
  Switch7_out1 <= a6_unsigned WHEN ended_flag_out1 = '0' ELSE
      frame_counter_out1;

  a7_unsigned <= unsigned(a7);

  
  Switch8_out1 <= a7_unsigned WHEN ended_flag_out1 = '0' ELSE
      frame_counter_out1;

  a8_unsigned <= unsigned(a8);

  
  Switch9_out1 <= a8_unsigned WHEN ended_flag_out1 = '0' ELSE
      frame_counter_out1;

  a9_unsigned <= unsigned(a9);

  
  Switch10_out1 <= a9_unsigned WHEN ended_flag_out1 = '0' ELSE
      frame_counter_out1;

  a10_unsigned <= unsigned(a10);

  
  Switch11_out1 <= a10_unsigned WHEN ended_flag_out1 = '0' ELSE
      frame_counter_out1;

  a11_unsigned <= unsigned(a11);

  
  Switch12_out1 <= a11_unsigned WHEN ended_flag_out1 = '0' ELSE
      frame_counter_out1;

  a12_unsigned <= unsigned(a12);

  
  Switch13_out1 <= a12_unsigned WHEN ended_flag_out1 = '0' ELSE
      frame_counter_out1;

  global_xor_out1 <= ram_bank_out1 XOR ram_bank_out2;

  global_xor2_out1 <= ram_bank_out5 XOR ram_bank_out6;

  global_xor4_out1 <= ram_bank_out9 XOR ram_bank_out10;

  global_xor1_out1 <= ram_bank_out3 XOR ram_bank_out4;

  global_xor9_out1 <= global_xor_out1 XOR global_xor1_out1;

  global_xor3_out1 <= ram_bank_out7 XOR ram_bank_out8;

  global_xor7_out1 <= global_xor2_out1 XOR global_xor3_out1;

  global_xor5_out1 <= ram_bank_out11 XOR ram_bank_out12;

  global_xor8_out1 <= global_xor4_out1 XOR global_xor5_out1;

  global_xor10_out1 <= global_xor7_out1 XOR global_xor8_out1;

  global_xor11_out1 <= global_xor9_out1 XOR global_xor10_out1;

  Logical_Operator_out1 <= global_xor11_out1 XOR Delay1_out1;

  
  Delay1_ectrl <= Delay1_delOut WHEN Delay_out1 = '0' ELSE
      Logical_Operator_out1;

  Delay1_lowered_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_delOut <= '0';
      ELSIF enb = '1' THEN
        Delay1_delOut <= Delay1_ectrl;
      END IF;
    END IF;
  END PROCESS Delay1_lowered_process;


  Delay1_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_last_value <= '0';
      ELSIF enb = '1' THEN
        Delay1_last_value <= Delay1_out1;
      END IF;
    END IF;
  END PROCESS Delay1_bypass_process;


  
  Delay1_out1 <= Delay1_last_value WHEN Delay_out1 = '0' ELSE
      Delay1_delOut;

  ce_out <= clk_enable;

  out_rsvd <= Delay1_out1;

  valid_out <= Delay_out1;

END rtl;


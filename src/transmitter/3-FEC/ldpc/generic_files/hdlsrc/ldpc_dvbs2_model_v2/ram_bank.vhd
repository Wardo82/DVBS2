-- -------------------------------------------------------------
-- 
-- File Name: /home/wardo/Documents/DVBS2/DVBS2/src/transmitter/3-FEC/ldpc/generic_files/hdlsrc/ldpc_dvbs2_model_v2/ram_bank.vhd
-- Created: 2021-02-07 12:50:38
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ram_bank
-- Source Path: ldpc_dvbs2_model_v2/ldpc_encoder/ram_bank
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY ram_bank IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        input                             :   IN    std_logic;
        enable                            :   IN    std_logic;
        address                           :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        address1                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        address2                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        address3                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        address4                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        address5                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        address6                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        address7                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        address8                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        address9                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        address10                         :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        address11                         :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        bit_out                           :   OUT   std_logic;
        bit_out1                          :   OUT   std_logic;
        bit_out2                          :   OUT   std_logic;
        bit_out3                          :   OUT   std_logic;
        bit_out4                          :   OUT   std_logic;
        bit_out5                          :   OUT   std_logic;
        bit_out6                          :   OUT   std_logic;
        bit_out7                          :   OUT   std_logic;
        bit_out8                          :   OUT   std_logic;
        bit_out9                          :   OUT   std_logic;
        bit_out10                         :   OUT   std_logic;
        bit_out11                         :   OUT   std_logic
        );
END ram_bank;


ARCHITECTURE rtl OF ram_bank IS

  -- Component Declarations
  COMPONENT ram_repeat
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          In1                             :   IN    std_logic;
          address                         :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          enable                          :   IN    std_logic;
          bit_out                         :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT ram_repeat1
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          In1                             :   IN    std_logic;
          address                         :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          enable                          :   IN    std_logic;
          bit_out                         :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT ram_repeat2
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          In1                             :   IN    std_logic;
          address                         :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          enable                          :   IN    std_logic;
          bit_out                         :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT ram_repeat3
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          In1                             :   IN    std_logic;
          address                         :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          enable                          :   IN    std_logic;
          bit_out                         :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT ram_repeat4
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          In1                             :   IN    std_logic;
          address                         :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          enable                          :   IN    std_logic;
          bit_out                         :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT ram_repeat5
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          In1                             :   IN    std_logic;
          address                         :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          enable                          :   IN    std_logic;
          bit_out                         :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT ram_repeat6
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          In1                             :   IN    std_logic;
          address                         :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          enable                          :   IN    std_logic;
          bit_out                         :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT ram_repeat7
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          In1                             :   IN    std_logic;
          address                         :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          enable                          :   IN    std_logic;
          bit_out                         :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT ram_repeat8
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          In1                             :   IN    std_logic;
          address                         :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          enable                          :   IN    std_logic;
          bit_out                         :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT ram_repeat9
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          In1                             :   IN    std_logic;
          address                         :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          enable                          :   IN    std_logic;
          bit_out                         :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT ram_repeat10
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          In1                             :   IN    std_logic;
          address                         :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          enable                          :   IN    std_logic;
          bit_out                         :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT ram_repeat11
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          In1                             :   IN    std_logic;
          address                         :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          enable                          :   IN    std_logic;
          bit_out                         :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : ram_repeat
    USE ENTITY work.ram_repeat(rtl);

  FOR ALL : ram_repeat1
    USE ENTITY work.ram_repeat1(rtl);

  FOR ALL : ram_repeat2
    USE ENTITY work.ram_repeat2(rtl);

  FOR ALL : ram_repeat3
    USE ENTITY work.ram_repeat3(rtl);

  FOR ALL : ram_repeat4
    USE ENTITY work.ram_repeat4(rtl);

  FOR ALL : ram_repeat5
    USE ENTITY work.ram_repeat5(rtl);

  FOR ALL : ram_repeat6
    USE ENTITY work.ram_repeat6(rtl);

  FOR ALL : ram_repeat7
    USE ENTITY work.ram_repeat7(rtl);

  FOR ALL : ram_repeat8
    USE ENTITY work.ram_repeat8(rtl);

  FOR ALL : ram_repeat9
    USE ENTITY work.ram_repeat9(rtl);

  FOR ALL : ram_repeat10
    USE ENTITY work.ram_repeat10(rtl);

  FOR ALL : ram_repeat11
    USE ENTITY work.ram_repeat11(rtl);

  -- Signals
  SIGNAL ram_repeat_out1                  : std_logic;
  SIGNAL ram_repeat1_out1                 : std_logic;
  SIGNAL ram_repeat2_out1                 : std_logic;
  SIGNAL ram_repeat3_out1                 : std_logic;
  SIGNAL ram_repeat4_out1                 : std_logic;
  SIGNAL ram_repeat5_out1                 : std_logic;
  SIGNAL ram_repeat6_out1                 : std_logic;
  SIGNAL ram_repeat7_out1                 : std_logic;
  SIGNAL ram_repeat8_out1                 : std_logic;
  SIGNAL ram_repeat9_out1                 : std_logic;
  SIGNAL ram_repeat10_out1                : std_logic;
  SIGNAL ram_repeat11_out1                : std_logic;

BEGIN
  u_ram_repeat : ram_repeat
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              In1 => input,
              address => address,  -- ufix14
              enable => enable,
              bit_out => ram_repeat_out1
              );

  u_ram_repeat1 : ram_repeat1
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              In1 => input,
              address => address1,  -- ufix14
              enable => enable,
              bit_out => ram_repeat1_out1
              );

  u_ram_repeat2 : ram_repeat2
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              In1 => input,
              address => address2,  -- ufix14
              enable => enable,
              bit_out => ram_repeat2_out1
              );

  u_ram_repeat3 : ram_repeat3
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              In1 => input,
              address => address3,  -- ufix14
              enable => enable,
              bit_out => ram_repeat3_out1
              );

  u_ram_repeat4 : ram_repeat4
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              In1 => input,
              address => address4,  -- ufix14
              enable => enable,
              bit_out => ram_repeat4_out1
              );

  u_ram_repeat5 : ram_repeat5
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              In1 => input,
              address => address5,  -- ufix14
              enable => enable,
              bit_out => ram_repeat5_out1
              );

  u_ram_repeat6 : ram_repeat6
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              In1 => input,
              address => address6,  -- ufix14
              enable => enable,
              bit_out => ram_repeat6_out1
              );

  u_ram_repeat7 : ram_repeat7
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              In1 => input,
              address => address7,  -- ufix14
              enable => enable,
              bit_out => ram_repeat7_out1
              );

  u_ram_repeat8 : ram_repeat8
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              In1 => input,
              address => address8,  -- ufix14
              enable => enable,
              bit_out => ram_repeat8_out1
              );

  u_ram_repeat9 : ram_repeat9
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              In1 => input,
              address => address9,  -- ufix14
              enable => enable,
              bit_out => ram_repeat9_out1
              );

  u_ram_repeat10 : ram_repeat10
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              In1 => input,
              address => address10,  -- ufix14
              enable => enable,
              bit_out => ram_repeat10_out1
              );

  u_ram_repeat11 : ram_repeat11
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              In1 => input,
              address => address11,  -- ufix14
              enable => enable,
              bit_out => ram_repeat11_out1
              );

  bit_out <= ram_repeat_out1;

  bit_out1 <= ram_repeat1_out1;

  bit_out2 <= ram_repeat2_out1;

  bit_out3 <= ram_repeat3_out1;

  bit_out4 <= ram_repeat4_out1;

  bit_out5 <= ram_repeat5_out1;

  bit_out6 <= ram_repeat6_out1;

  bit_out7 <= ram_repeat7_out1;

  bit_out8 <= ram_repeat8_out1;

  bit_out9 <= ram_repeat9_out1;

  bit_out10 <= ram_repeat10_out1;

  bit_out11 <= ram_repeat11_out1;

END rtl;


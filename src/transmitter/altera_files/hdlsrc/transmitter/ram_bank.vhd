-- -------------------------------------------------------------
-- 
-- File Name: /home/wardo/Documents/DVBS2/DVBS2/src/transmitter/altera_files/hdlsrc/transmitter/ram_bank.vhd
-- Created: 2021-02-07 15:24:31
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ram_bank
-- Source Path: transmitter/tran_dut/ldpc_encoder/ram_bank
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY ram_bank IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_8_1                         :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_8_0                         :   IN    std_logic;
        input                             :   IN    std_logic;
        enable                            :   IN    std_logic;
        address                           :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        address1                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        address2                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        address3                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        address4                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        address5                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        address6                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        address7                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        address8                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        address9                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        address10                         :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        address11                         :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        bit_out                           :   OUT   std_logic;
        bit_out1                          :   OUT   std_logic;
        bit_out2                          :   OUT   std_logic;
        bit_out3                          :   OUT   std_logic;
        bit_out4                          :   OUT   std_logic;
        bit_out5                          :   OUT   std_logic;
        bit_out6                          :   OUT   std_logic;
        bit_out7                          :   OUT   std_logic;
        bit_out8                          :   OUT   std_logic;
        bit_out9                          :   OUT   std_logic;
        bit_out10                         :   OUT   std_logic;
        bit_out11                         :   OUT   std_logic
        );
END ram_bank;


ARCHITECTURE rtl OF ram_bank IS

  ATTRIBUTE multstyle : string;

  -- Component Declarations
  COMPONENT ram_repeat
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_8_0                       :   IN    std_logic;
          In1                             :   IN    std_logic;
          address                         :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          enable                          :   IN    std_logic;
          bit_out                         :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT ram_repeat1
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_8_0                       :   IN    std_logic;
          In1                             :   IN    std_logic;
          address                         :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          enable                          :   IN    std_logic;
          bit_out                         :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT ram_repeat2
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_8_0                       :   IN    std_logic;
          In1                             :   IN    std_logic;
          address                         :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          enable                          :   IN    std_logic;
          bit_out                         :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT ram_repeat3
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_8_0                       :   IN    std_logic;
          In1                             :   IN    std_logic;
          address                         :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          enable                          :   IN    std_logic;
          bit_out                         :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT ram_repeat4
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_8_0                       :   IN    std_logic;
          In1                             :   IN    std_logic;
          address                         :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          enable                          :   IN    std_logic;
          bit_out                         :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT ram_repeat5
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_8_0                       :   IN    std_logic;
          In1                             :   IN    std_logic;
          address                         :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          enable                          :   IN    std_logic;
          bit_out                         :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT ram_repeat6
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_8_0                       :   IN    std_logic;
          In1                             :   IN    std_logic;
          address                         :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          enable                          :   IN    std_logic;
          bit_out                         :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT ram_repeat7
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_8_0                       :   IN    std_logic;
          In1                             :   IN    std_logic;
          address                         :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          enable                          :   IN    std_logic;
          bit_out                         :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT ram_repeat8
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_8_0                       :   IN    std_logic;
          In1                             :   IN    std_logic;
          address                         :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          enable                          :   IN    std_logic;
          bit_out                         :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT ram_repeat9
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_8_0                       :   IN    std_logic;
          In1                             :   IN    std_logic;
          address                         :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          enable                          :   IN    std_logic;
          bit_out                         :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT ram_repeat10
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_8_0                       :   IN    std_logic;
          In1                             :   IN    std_logic;
          address                         :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          enable                          :   IN    std_logic;
          bit_out                         :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT ram_repeat11
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_8_0                       :   IN    std_logic;
          In1                             :   IN    std_logic;
          address                         :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          enable                          :   IN    std_logic;
          bit_out                         :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : ram_repeat
    USE ENTITY work.ram_repeat(rtl);

  FOR ALL : ram_repeat1
    USE ENTITY work.ram_repeat1(rtl);

  FOR ALL : ram_repeat2
    USE ENTITY work.ram_repeat2(rtl);

  FOR ALL : ram_repeat3
    USE ENTITY work.ram_repeat3(rtl);

  FOR ALL : ram_repeat4
    USE ENTITY work.ram_repeat4(rtl);

  FOR ALL : ram_repeat5
    USE ENTITY work.ram_repeat5(rtl);

  FOR ALL : ram_repeat6
    USE ENTITY work.ram_repeat6(rtl);

  FOR ALL : ram_repeat7
    USE ENTITY work.ram_repeat7(rtl);

  FOR ALL : ram_repeat8
    USE ENTITY work.ram_repeat8(rtl);

  FOR ALL : ram_repeat9
    USE ENTITY work.ram_repeat9(rtl);

  FOR ALL : ram_repeat10
    USE ENTITY work.ram_repeat10(rtl);

  FOR ALL : ram_repeat11
    USE ENTITY work.ram_repeat11(rtl);

  -- Signals
  SIGNAL From_out1                        : std_logic;
  SIGNAL Delay_bypass_reg                 : std_logic;  -- ufix1
  SIGNAL From_out1_1                      : std_logic;
  SIGNAL From1_out1                       : std_logic;
  SIGNAL ram_repeat_out1                  : std_logic;
  SIGNAL From2_out1                       : std_logic;
  SIGNAL Delay6_bypass_reg                : std_logic;  -- ufix1
  SIGNAL From2_out1_1                     : std_logic;
  SIGNAL From3_out1                       : std_logic;
  SIGNAL ram_repeat1_out1                 : std_logic;
  SIGNAL From4_out1                       : std_logic;
  SIGNAL Delay3_bypass_reg                : std_logic;  -- ufix1
  SIGNAL From4_out1_1                     : std_logic;
  SIGNAL From5_out1                       : std_logic;
  SIGNAL ram_repeat2_out1                 : std_logic;
  SIGNAL From6_out1                       : std_logic;
  SIGNAL Delay2_bypass_reg                : std_logic;  -- ufix1
  SIGNAL From6_out1_1                     : std_logic;
  SIGNAL From7_out1                       : std_logic;
  SIGNAL ram_repeat3_out1                 : std_logic;
  SIGNAL From8_out1                       : std_logic;
  SIGNAL Delay1_bypass_reg                : std_logic;  -- ufix1
  SIGNAL From8_out1_1                     : std_logic;
  SIGNAL From9_out1                       : std_logic;
  SIGNAL ram_repeat4_out1                 : std_logic;
  SIGNAL From10_out1                      : std_logic;
  SIGNAL Delay11_bypass_reg               : std_logic;  -- ufix1
  SIGNAL From10_out1_1                    : std_logic;
  SIGNAL From11_out1                      : std_logic;
  SIGNAL ram_repeat5_out1                 : std_logic;
  SIGNAL From12_out1                      : std_logic;
  SIGNAL Delay10_bypass_reg               : std_logic;  -- ufix1
  SIGNAL From12_out1_1                    : std_logic;
  SIGNAL From13_out1                      : std_logic;
  SIGNAL ram_repeat6_out1                 : std_logic;
  SIGNAL From16_out1                      : std_logic;
  SIGNAL Delay8_bypass_reg                : std_logic;  -- ufix1
  SIGNAL From16_out1_1                    : std_logic;
  SIGNAL From17_out1                      : std_logic;
  SIGNAL ram_repeat7_out1                 : std_logic;
  SIGNAL From18_out1                      : std_logic;
  SIGNAL Delay7_bypass_reg                : std_logic;  -- ufix1
  SIGNAL From18_out1_1                    : std_logic;
  SIGNAL From19_out1                      : std_logic;
  SIGNAL ram_repeat8_out1                 : std_logic;
  SIGNAL From20_out1                      : std_logic;
  SIGNAL Delay5_bypass_reg                : std_logic;  -- ufix1
  SIGNAL From20_out1_1                    : std_logic;
  SIGNAL From21_out1                      : std_logic;
  SIGNAL ram_repeat9_out1                 : std_logic;
  SIGNAL From22_out1                      : std_logic;
  SIGNAL Delay4_bypass_reg                : std_logic;  -- ufix1
  SIGNAL From22_out1_1                    : std_logic;
  SIGNAL From23_out1                      : std_logic;
  SIGNAL ram_repeat10_out1                : std_logic;
  SIGNAL From14_out1                      : std_logic;
  SIGNAL Delay9_bypass_reg                : std_logic;  -- ufix1
  SIGNAL From14_out1_1                    : std_logic;
  SIGNAL From15_out1                      : std_logic;
  SIGNAL ram_repeat11_out1                : std_logic;

BEGIN
  u_ram_repeat : ram_repeat
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_8_0 => enb_1_8_0,
              In1 => From_out1_1,
              address => address,  -- ufix14
              enable => From1_out1,
              bit_out => ram_repeat_out1
              );

  u_ram_repeat1 : ram_repeat1
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_8_0 => enb_1_8_0,
              In1 => From2_out1_1,
              address => address1,  -- ufix14
              enable => From3_out1,
              bit_out => ram_repeat1_out1
              );

  u_ram_repeat2 : ram_repeat2
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_8_0 => enb_1_8_0,
              In1 => From4_out1_1,
              address => address2,  -- ufix14
              enable => From5_out1,
              bit_out => ram_repeat2_out1
              );

  u_ram_repeat3 : ram_repeat3
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_8_0 => enb_1_8_0,
              In1 => From6_out1_1,
              address => address3,  -- ufix14
              enable => From7_out1,
              bit_out => ram_repeat3_out1
              );

  u_ram_repeat4 : ram_repeat4
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_8_0 => enb_1_8_0,
              In1 => From8_out1_1,
              address => address4,  -- ufix14
              enable => From9_out1,
              bit_out => ram_repeat4_out1
              );

  u_ram_repeat5 : ram_repeat5
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_8_0 => enb_1_8_0,
              In1 => From10_out1_1,
              address => address5,  -- ufix14
              enable => From11_out1,
              bit_out => ram_repeat5_out1
              );

  u_ram_repeat6 : ram_repeat6
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_8_0 => enb_1_8_0,
              In1 => From12_out1_1,
              address => address6,  -- ufix14
              enable => From13_out1,
              bit_out => ram_repeat6_out1
              );

  u_ram_repeat7 : ram_repeat7
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_8_0 => enb_1_8_0,
              In1 => From16_out1_1,
              address => address7,  -- ufix14
              enable => From17_out1,
              bit_out => ram_repeat7_out1
              );

  u_ram_repeat8 : ram_repeat8
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_8_0 => enb_1_8_0,
              In1 => From18_out1_1,
              address => address8,  -- ufix14
              enable => From19_out1,
              bit_out => ram_repeat8_out1
              );

  u_ram_repeat9 : ram_repeat9
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_8_0 => enb_1_8_0,
              In1 => From20_out1_1,
              address => address9,  -- ufix14
              enable => From21_out1,
              bit_out => ram_repeat9_out1
              );

  u_ram_repeat10 : ram_repeat10
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_8_0 => enb_1_8_0,
              In1 => From22_out1_1,
              address => address10,  -- ufix14
              enable => From23_out1,
              bit_out => ram_repeat10_out1
              );

  u_ram_repeat11 : ram_repeat11
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_8_0 => enb_1_8_0,
              In1 => From14_out1_1,
              address => address11,  -- ufix14
              enable => From15_out1,
              bit_out => ram_repeat11_out1
              );

  crp_out_delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        From_out1 <= '0';
      ELSIF enb = '1' THEN
        From_out1 <= input;
      END IF;
    END IF;
  END PROCESS crp_out_delay_process;


  Delay_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_bypass_reg <= '0';
      ELSIF enb_1_8_1 = '1' THEN
        Delay_bypass_reg <= From_out1;
      END IF;
    END IF;
  END PROCESS Delay_bypass_process;

  
  From_out1_1 <= From_out1 WHEN enb_1_8_1 = '1' ELSE
      Delay_bypass_reg;

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        From1_out1 <= '0';
      ELSIF enb_1_8_0 = '1' THEN
        From1_out1 <= enable;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  bit_out <= ram_repeat_out1;

  crp_out_delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        From2_out1 <= '0';
      ELSIF enb = '1' THEN
        From2_out1 <= input;
      END IF;
    END IF;
  END PROCESS crp_out_delay6_process;


  Delay6_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay6_bypass_reg <= '0';
      ELSIF enb_1_8_1 = '1' THEN
        Delay6_bypass_reg <= From2_out1;
      END IF;
    END IF;
  END PROCESS Delay6_bypass_process;

  
  From2_out1_1 <= From2_out1 WHEN enb_1_8_1 = '1' ELSE
      Delay6_bypass_reg;

  delayMatch4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        From3_out1 <= '0';
      ELSIF enb_1_8_0 = '1' THEN
        From3_out1 <= enable;
      END IF;
    END IF;
  END PROCESS delayMatch4_process;


  bit_out1 <= ram_repeat1_out1;

  crp_out_delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        From4_out1 <= '0';
      ELSIF enb = '1' THEN
        From4_out1 <= input;
      END IF;
    END IF;
  END PROCESS crp_out_delay3_process;


  Delay3_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_bypass_reg <= '0';
      ELSIF enb_1_8_1 = '1' THEN
        Delay3_bypass_reg <= From4_out1;
      END IF;
    END IF;
  END PROCESS Delay3_bypass_process;

  
  From4_out1_1 <= From4_out1 WHEN enb_1_8_1 = '1' ELSE
      Delay3_bypass_reg;

  delayMatch3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        From5_out1 <= '0';
      ELSIF enb_1_8_0 = '1' THEN
        From5_out1 <= enable;
      END IF;
    END IF;
  END PROCESS delayMatch3_process;


  bit_out2 <= ram_repeat2_out1;

  crp_out_delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        From6_out1 <= '0';
      ELSIF enb = '1' THEN
        From6_out1 <= input;
      END IF;
    END IF;
  END PROCESS crp_out_delay2_process;


  Delay2_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_bypass_reg <= '0';
      ELSIF enb_1_8_1 = '1' THEN
        Delay2_bypass_reg <= From6_out1;
      END IF;
    END IF;
  END PROCESS Delay2_bypass_process;

  
  From6_out1_1 <= From6_out1 WHEN enb_1_8_1 = '1' ELSE
      Delay2_bypass_reg;

  delayMatch2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        From7_out1 <= '0';
      ELSIF enb_1_8_0 = '1' THEN
        From7_out1 <= enable;
      END IF;
    END IF;
  END PROCESS delayMatch2_process;


  bit_out3 <= ram_repeat3_out1;

  crp_out_delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        From8_out1 <= '0';
      ELSIF enb = '1' THEN
        From8_out1 <= input;
      END IF;
    END IF;
  END PROCESS crp_out_delay1_process;


  Delay1_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_bypass_reg <= '0';
      ELSIF enb_1_8_1 = '1' THEN
        Delay1_bypass_reg <= From8_out1;
      END IF;
    END IF;
  END PROCESS Delay1_bypass_process;

  
  From8_out1_1 <= From8_out1 WHEN enb_1_8_1 = '1' ELSE
      Delay1_bypass_reg;

  delayMatch1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        From9_out1 <= '0';
      ELSIF enb_1_8_0 = '1' THEN
        From9_out1 <= enable;
      END IF;
    END IF;
  END PROCESS delayMatch1_process;


  bit_out4 <= ram_repeat4_out1;

  crp_out_delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        From10_out1 <= '0';
      ELSIF enb = '1' THEN
        From10_out1 <= input;
      END IF;
    END IF;
  END PROCESS crp_out_delay11_process;


  Delay11_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay11_bypass_reg <= '0';
      ELSIF enb_1_8_1 = '1' THEN
        Delay11_bypass_reg <= From10_out1;
      END IF;
    END IF;
  END PROCESS Delay11_bypass_process;

  
  From10_out1_1 <= From10_out1 WHEN enb_1_8_1 = '1' ELSE
      Delay11_bypass_reg;

  delayMatch11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        From11_out1 <= '0';
      ELSIF enb_1_8_0 = '1' THEN
        From11_out1 <= enable;
      END IF;
    END IF;
  END PROCESS delayMatch11_process;


  bit_out5 <= ram_repeat5_out1;

  crp_out_delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        From12_out1 <= '0';
      ELSIF enb = '1' THEN
        From12_out1 <= input;
      END IF;
    END IF;
  END PROCESS crp_out_delay10_process;


  Delay10_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay10_bypass_reg <= '0';
      ELSIF enb_1_8_1 = '1' THEN
        Delay10_bypass_reg <= From12_out1;
      END IF;
    END IF;
  END PROCESS Delay10_bypass_process;

  
  From12_out1_1 <= From12_out1 WHEN enb_1_8_1 = '1' ELSE
      Delay10_bypass_reg;

  delayMatch10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        From13_out1 <= '0';
      ELSIF enb_1_8_0 = '1' THEN
        From13_out1 <= enable;
      END IF;
    END IF;
  END PROCESS delayMatch10_process;


  bit_out6 <= ram_repeat6_out1;

  crp_out_delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        From16_out1 <= '0';
      ELSIF enb = '1' THEN
        From16_out1 <= input;
      END IF;
    END IF;
  END PROCESS crp_out_delay8_process;


  Delay8_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay8_bypass_reg <= '0';
      ELSIF enb_1_8_1 = '1' THEN
        Delay8_bypass_reg <= From16_out1;
      END IF;
    END IF;
  END PROCESS Delay8_bypass_process;

  
  From16_out1_1 <= From16_out1 WHEN enb_1_8_1 = '1' ELSE
      Delay8_bypass_reg;

  delayMatch8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        From17_out1 <= '0';
      ELSIF enb_1_8_0 = '1' THEN
        From17_out1 <= enable;
      END IF;
    END IF;
  END PROCESS delayMatch8_process;


  bit_out7 <= ram_repeat7_out1;

  crp_out_delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        From18_out1 <= '0';
      ELSIF enb = '1' THEN
        From18_out1 <= input;
      END IF;
    END IF;
  END PROCESS crp_out_delay7_process;


  Delay7_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay7_bypass_reg <= '0';
      ELSIF enb_1_8_1 = '1' THEN
        Delay7_bypass_reg <= From18_out1;
      END IF;
    END IF;
  END PROCESS Delay7_bypass_process;

  
  From18_out1_1 <= From18_out1 WHEN enb_1_8_1 = '1' ELSE
      Delay7_bypass_reg;

  delayMatch7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        From19_out1 <= '0';
      ELSIF enb_1_8_0 = '1' THEN
        From19_out1 <= enable;
      END IF;
    END IF;
  END PROCESS delayMatch7_process;


  bit_out8 <= ram_repeat8_out1;

  crp_out_delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        From20_out1 <= '0';
      ELSIF enb = '1' THEN
        From20_out1 <= input;
      END IF;
    END IF;
  END PROCESS crp_out_delay5_process;


  Delay5_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay5_bypass_reg <= '0';
      ELSIF enb_1_8_1 = '1' THEN
        Delay5_bypass_reg <= From20_out1;
      END IF;
    END IF;
  END PROCESS Delay5_bypass_process;

  
  From20_out1_1 <= From20_out1 WHEN enb_1_8_1 = '1' ELSE
      Delay5_bypass_reg;

  delayMatch6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        From21_out1 <= '0';
      ELSIF enb_1_8_0 = '1' THEN
        From21_out1 <= enable;
      END IF;
    END IF;
  END PROCESS delayMatch6_process;


  bit_out9 <= ram_repeat9_out1;

  crp_out_delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        From22_out1 <= '0';
      ELSIF enb = '1' THEN
        From22_out1 <= input;
      END IF;
    END IF;
  END PROCESS crp_out_delay4_process;


  Delay4_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_bypass_reg <= '0';
      ELSIF enb_1_8_1 = '1' THEN
        Delay4_bypass_reg <= From22_out1;
      END IF;
    END IF;
  END PROCESS Delay4_bypass_process;

  
  From22_out1_1 <= From22_out1 WHEN enb_1_8_1 = '1' ELSE
      Delay4_bypass_reg;

  delayMatch5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        From23_out1 <= '0';
      ELSIF enb_1_8_0 = '1' THEN
        From23_out1 <= enable;
      END IF;
    END IF;
  END PROCESS delayMatch5_process;


  bit_out10 <= ram_repeat10_out1;

  crp_out_delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        From14_out1 <= '0';
      ELSIF enb = '1' THEN
        From14_out1 <= input;
      END IF;
    END IF;
  END PROCESS crp_out_delay9_process;


  Delay9_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay9_bypass_reg <= '0';
      ELSIF enb_1_8_1 = '1' THEN
        Delay9_bypass_reg <= From14_out1;
      END IF;
    END IF;
  END PROCESS Delay9_bypass_process;

  
  From14_out1_1 <= From14_out1 WHEN enb_1_8_1 = '1' ELSE
      Delay9_bypass_reg;

  delayMatch9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        From15_out1 <= '0';
      ELSIF enb_1_8_0 = '1' THEN
        From15_out1 <= enable;
      END IF;
    END IF;
  END PROCESS delayMatch9_process;


  bit_out11 <= ram_repeat11_out1;

END rtl;


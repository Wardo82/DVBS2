-- -------------------------------------------------------------
-- 
-- File Name: /home/wardo/Documents/DVBS2/DVBS2/src/transmitter/altera_files/hdlsrc/transmitter/address_calculator.vhd
-- Created: 2021-02-07 15:24:31
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: address_calculator
-- Source Path: transmitter/tran_dut/ldpc_encoder/address_calculator
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.tran_dut_pac.ALL;

ENTITY address_calculator IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_8_0                         :   IN    std_logic;
        rst                               :   IN    std_logic;
        addresses1                        :   OUT   vector_of_std_logic_vector14(0 TO 11)  -- ufix14 [12]
        );
END address_calculator;


ARCHITECTURE rtl OF address_calculator IS

  ATTRIBUTE multstyle : string;

  -- Component Declarations
  COMPONENT addresses
    PORT( slot                            :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          counter                         :   IN    std_logic_vector(8 DOWNTO 0);  -- ufix9
          q_factor                        :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          addresses_1                     :   OUT   vector_of_std_logic_vector14(0 TO 11)  -- ufix14 [12]
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : addresses
    USE ENTITY work.addresses(rtl);

  -- Signals
  SIGNAL bit_count_out1                   : std_logic;
  SIGNAL bit_counter1_out1                : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL delayMatch_reg                   : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL delayMatch_reg_next              : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL bit_count_out1_1                 : std_logic;
  SIGNAL slot_counter_out1                : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL slot_counter_out1_1              : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL delayMatch1_reg                  : vector_of_unsigned9(0 TO 1);  -- ufix9 [2]
  SIGNAL delayMatch1_reg_next             : vector_of_unsigned9(0 TO 1);  -- ufix9 [2]
  SIGNAL bit_counter1_out1_1              : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL bit_counter1_out1_2              : std_logic_vector(8 DOWNTO 0);  -- ufix9
  SIGNAL q_out1                           : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL addresses_1                      : vector_of_std_logic_vector14(0 TO 11);  -- ufix14 [12]

BEGIN
  u_addresses : addresses
    PORT MAP( slot => slot_counter_out1_1,  -- uint8
              counter => bit_counter1_out1_2,  -- ufix9
              q_factor => std_logic_vector(q_out1),  -- uint8
              addresses_1 => addresses_1  -- ufix14 [12]
              );

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 359
  bit_counter1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        bit_counter1_out1 <= to_unsigned(16#000#, 9);
      ELSIF enb_1_8_0 = '1' THEN
        IF bit_count_out1 = '1' THEN 
          bit_counter1_out1 <= to_unsigned(16#000#, 9);
        ELSIF bit_counter1_out1 >= to_unsigned(16#167#, 9) THEN 
          bit_counter1_out1 <= to_unsigned(16#000#, 9);
        ELSE 
          bit_counter1_out1 <= bit_counter1_out1 + to_unsigned(16#001#, 9);
        END IF;
      END IF;
    END IF;
  END PROCESS bit_counter1_process;


  
  bit_count_out1 <= '1' WHEN bit_counter1_out1 = to_unsigned(16#167#, 9) ELSE
      '0';

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch_reg(0) <= '0';
        delayMatch_reg(1) <= '0';
      ELSIF enb_1_8_0 = '1' THEN
        delayMatch_reg(0) <= delayMatch_reg_next(0);
        delayMatch_reg(1) <= delayMatch_reg_next(1);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  bit_count_out1_1 <= delayMatch_reg(1);
  delayMatch_reg_next(0) <= bit_count_out1;
  delayMatch_reg_next(1) <= delayMatch_reg(0);

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 135
  slot_counter_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        slot_counter_out1 <= to_unsigned(16#01#, 8);
      ELSIF enb_1_8_0 = '1' THEN
        IF rst = '1' THEN 
          slot_counter_out1 <= to_unsigned(16#01#, 8);
        ELSIF bit_count_out1_1 = '1' THEN 
          IF slot_counter_out1 >= to_unsigned(16#87#, 8) THEN 
            slot_counter_out1 <= to_unsigned(16#01#, 8);
          ELSE 
            slot_counter_out1 <= slot_counter_out1 + to_unsigned(16#01#, 8);
          END IF;
        END IF;
      END IF;
    END IF;
  END PROCESS slot_counter_process;


  slot_counter_out1_1 <= std_logic_vector(slot_counter_out1);

  delayMatch1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch1_reg(0) <= to_unsigned(16#000#, 9);
        delayMatch1_reg(1) <= to_unsigned(16#000#, 9);
      ELSIF enb_1_8_0 = '1' THEN
        delayMatch1_reg(0) <= delayMatch1_reg_next(0);
        delayMatch1_reg(1) <= delayMatch1_reg_next(1);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  bit_counter1_out1_1 <= delayMatch1_reg(1);
  delayMatch1_reg_next(0) <= bit_counter1_out1;
  delayMatch1_reg_next(1) <= delayMatch1_reg(0);

  bit_counter1_out1_2 <= std_logic_vector(bit_counter1_out1_1);

  q_out1 <= to_unsigned(16#2D#, 8);

  addresses1 <= addresses_1;

END rtl;


-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\bit_mapping_model\bit_mapping.vhd
-- Created: 2021-01-03 10:46:21
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 3
-- Target subsystem base rate: 3
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        3
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- inphase                       ce_out        3
-- quadrature                    ce_out        3
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: bit_mapping
-- Source Path: bit_mapping_model/bit_mapping
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.bit_mapping_pac.ALL;

ENTITY bit_mapping IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        input_sequence_0                  :   IN    std_logic;  -- boolean
        input_sequence_1                  :   IN    std_logic;  -- boolean
        input_sequence_2                  :   IN    std_logic;  -- boolean
        amplitude                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        ce_out                            :   OUT   std_logic;
        inphase                           :   OUT   std_logic_vector(32 DOWNTO 0);  -- sfix33_En27
        quadrature                        :   OUT   std_logic_vector(32 DOWNTO 0)  -- sfix33_En27
        );
END bit_mapping;


ARCHITECTURE rtl OF bit_mapping IS

  -- Component Declarations
  COMPONENT angle_selector
    PORT( input_sequence                  :   IN    std_logic_vector(0 TO 2);  -- boolean [3]
          phase                           :   OUT   std_logic_vector(22 DOWNTO 0)  -- ufix23_En14
          );
  END COMPONENT;

  COMPONENT Cosine_HDL_Optimized
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          u                               :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          x                               :   OUT   std_logic_vector(16 DOWNTO 0);  -- sfix17_En15
          y                               :   OUT   std_logic_vector(16 DOWNTO 0)  -- sfix17_En15
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : angle_selector
    USE ENTITY work.angle_selector(rtl);

  FOR ALL : Cosine_HDL_Optimized
    USE ENTITY work.Cosine_HDL_Optimized(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL input_sequence                   : std_logic_vector(0 TO 2);  -- boolean [3]
  SIGNAL phase                            : std_logic_vector(22 DOWNTO 0);  -- ufix23
  SIGNAL phase_unsigned                   : unsigned(22 DOWNTO 0);  -- ufix23_En14
  SIGNAL Constant_out1                    : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Divide_out1                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Sine                             : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL Cosine                           : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL Cosine_signed                    : signed(16 DOWNTO 0);  -- sfix17_En15
  SIGNAL Cosine_1                         : signed(16 DOWNTO 0);  -- sfix17_En15
  SIGNAL amplitude_signed                 : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL reduced_reg                      : vector_of_signed16(0 TO 1);  -- sfix16 [2]
  SIGNAL reduced_reg_next                 : vector_of_signed16(0 TO 1);  -- sfix16_En12 [2]
  SIGNAL amplitude_1                      : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Product_out1                     : signed(32 DOWNTO 0);  -- sfix33_En27
  SIGNAL Product_out1_1                   : signed(32 DOWNTO 0);  -- sfix33_En27
  SIGNAL Sine_signed                      : signed(16 DOWNTO 0);  -- sfix17_En15
  SIGNAL Sine_1                           : signed(16 DOWNTO 0);  -- sfix17_En15
  SIGNAL Product1_out1                    : signed(32 DOWNTO 0);  -- sfix33_En27
  SIGNAL Product1_out1_1                  : signed(32 DOWNTO 0);  -- sfix33_En27

  ATTRIBUTE multstyle : string;

BEGIN
  u_angle_selector : angle_selector
    PORT MAP( input_sequence => input_sequence,  -- boolean [3]
              phase => phase  -- ufix23_En14
              );

  u_Cosine_HDL_Optimized : Cosine_HDL_Optimized
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => clk_enable,
              u => std_logic_vector(Divide_out1),  -- sfix16_En14
              x => Sine,  -- sfix17_En15
              y => Cosine  -- sfix17_En15
              );

  input_sequence(0) <= input_sequence_0;
  input_sequence(1) <= input_sequence_1;
  input_sequence(2) <= input_sequence_2;

  phase_unsigned <= unsigned(phase);

  Constant_out1 <= to_unsigned(16#168#, 9);

  Divide_output : PROCESS (Constant_out1, phase_unsigned)
    VARIABLE c : unsigned(22 DOWNTO 0);
    VARIABLE div_temp : unsigned(23 DOWNTO 0);
    VARIABLE cast : unsigned(23 DOWNTO 0);
  BEGIN
    div_temp := to_unsigned(16#000000#, 24);
    cast := to_unsigned(16#000000#, 24);
    IF Constant_out1 = to_unsigned(16#000#, 9) THEN 
      c := to_unsigned(16#7FFFFF#, 23);
    ELSE 
      cast := resize(phase_unsigned, 24);
      div_temp := cast / Constant_out1;
      IF div_temp(23) /= '0' THEN 
        c := "11111111111111111111111";
      ELSE 
        c := div_temp(22 DOWNTO 0);
      END IF;
    END IF;
    IF c(22 DOWNTO 15) /= "00000000" THEN 
      Divide_out1 <= X"7FFF";
    ELSE 
      Divide_out1 <= signed(c(15 DOWNTO 0));
    END IF;
  END PROCESS Divide_output;


  Cosine_signed <= signed(Cosine);

  enb <= clk_enable;

  HwModeRegister_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Cosine_1 <= to_signed(16#00000#, 17);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Cosine_1 <= Cosine_signed;
      END IF;
    END IF;
  END PROCESS HwModeRegister_process;


  amplitude_signed <= signed(amplitude);

  reduced_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      reduced_reg(0) <= to_signed(16#0000#, 16);
      reduced_reg(1) <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        reduced_reg(0) <= reduced_reg_next(0);
        reduced_reg(1) <= reduced_reg_next(1);
      END IF;
    END IF;
  END PROCESS reduced_process;

  amplitude_1 <= reduced_reg(1);
  reduced_reg_next(0) <= amplitude_signed;
  reduced_reg_next(1) <= reduced_reg(0);

  Product_out1 <= Cosine_1 * amplitude_1;

  PipelineRegister_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Product_out1_1 <= to_signed(0, 33);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Product_out1_1 <= Product_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;


  inphase <= std_logic_vector(Product_out1_1);

  Sine_signed <= signed(Sine);

  HwModeRegister2_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Sine_1 <= to_signed(16#00000#, 17);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Sine_1 <= Sine_signed;
      END IF;
    END IF;
  END PROCESS HwModeRegister2_process;


  Product1_out1 <= Sine_1 * amplitude_1;

  PipelineRegister1_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Product1_out1_1 <= to_signed(0, 33);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Product1_out1_1 <= Product1_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister1_process;


  quadrature <= std_logic_vector(Product1_out1_1);

  ce_out <= clk_enable;

END rtl;


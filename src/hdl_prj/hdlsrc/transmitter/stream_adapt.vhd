-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/transmitter/stream_adapt.vhd
-- Created: 2021-02-07 15:21:35
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: stream_adapt
-- Source Path: transmitter/tran_dut/stream_adapt
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY stream_adapt IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_8_1                         :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_8_0                         :   IN    std_logic;
        input_bit                         :   IN    std_logic;  -- ufix1
        start                             :   IN    std_logic;
        valid                             :   IN    std_logic;
        end_rsvd                          :   IN    std_logic;
        out_rsvd                          :   OUT   std_logic
        );
END stream_adapt;


ARCHITECTURE rtl OF stream_adapt IS

  -- Signals
  SIGNAL start_1                          : std_logic;
  SIGNAL reduced_reg                      : std_logic_vector(0 TO 6);  -- ufix1 [7]
  SIGNAL reduced_reg_next                 : std_logic_vector(0 TO 6);  -- ufix1 [7]
  SIGNAL start_2                          : std_logic;
  SIGNAL Delay7_lowered_ctrl_const_out    : std_logic;
  SIGNAL delayMatch8_reg                  : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL delayMatch8_reg_next             : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay7_lowered_ctrl_const_out_1  : std_logic;
  SIGNAL Delay7_lowered_ctrl_delay_out    : std_logic;
  SIGNAL Delay7_lowered_Initial_Val_out   : std_logic;
  SIGNAL Delay5_lowered_ctrl_const_out    : std_logic;
  SIGNAL delayMatch9_reg                  : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL delayMatch9_reg_next             : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay5_lowered_ctrl_const_out_1  : std_logic;
  SIGNAL Delay5_lowered_ctrl_delay_out    : std_logic;
  SIGNAL Delay5_lowered_Initial_Val_out   : std_logic;
  SIGNAL Delay3_lowered_ctrl_const_out    : std_logic;
  SIGNAL delayMatch10_reg                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL delayMatch10_reg_next            : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay3_lowered_ctrl_const_out_1  : std_logic;
  SIGNAL Delay3_lowered_ctrl_delay_out    : std_logic;
  SIGNAL Delay3_lowered_Initial_Val_out   : std_logic;
  SIGNAL Delay_lowered_ctrl_const_out     : std_logic;
  SIGNAL delayMatch11_reg                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL delayMatch11_reg_next            : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay_lowered_ctrl_const_out_1   : std_logic;
  SIGNAL Delay_lowered_ctrl_delay_out     : std_logic;
  SIGNAL Delay_lowered_Initial_Val_out    : std_logic;
  SIGNAL Delay_iv                         : std_logic;
  SIGNAL Delay1_iv                        : std_logic;
  SIGNAL Delay2_iv                        : std_logic;
  SIGNAL Delay3_iv                        : std_logic;
  SIGNAL Delay4_iv                        : std_logic;
  SIGNAL Delay5_iv                        : std_logic;
  SIGNAL Delay6_iv                        : std_logic;
  SIGNAL Delay7_iv                        : std_logic;
  SIGNAL Delay8_iv                        : std_logic;
  SIGNAL Delay9_iv                        : std_logic;
  SIGNAL Delay10_iv                       : std_logic;
  SIGNAL Delay11_iv                       : std_logic;
  SIGNAL Delay12_iv                       : std_logic;
  SIGNAL Delay13_iv                       : std_logic;
  SIGNAL Delay14_iv                       : std_logic;
  SIGNAL Delay13_out1                     : std_logic;
  SIGNAL Delay14_toDel                    : std_logic;
  SIGNAL Delay14_toDel_1                  : std_logic;
  SIGNAL Delay14_lowered_bypass_reg       : std_logic;  -- ufix1
  SIGNAL Delay14_toDel_2                  : std_logic;
  SIGNAL Delay14_delOut                   : std_logic;
  SIGNAL Delay14_out1                     : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL Delay_toDel                      : std_logic;
  SIGNAL Delay_toDel_1                    : std_logic;
  SIGNAL Delay_lowered_bypass_reg         : std_logic;  -- ufix1
  SIGNAL Delay_toDel_2                    : std_logic;
  SIGNAL Delay_lowered_out                : std_logic;
  SIGNAL Delay_delOut                     : std_logic;
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL Delay1_toDel                     : std_logic;
  SIGNAL Delay1_toDel_1                   : std_logic;
  SIGNAL Delay1_lowered_bypass_reg        : std_logic;  -- ufix1
  SIGNAL Delay1_toDel_2                   : std_logic;
  SIGNAL Delay1_delOut                    : std_logic;
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Delay2_toDel                     : std_logic;
  SIGNAL Delay2_toDel_1                   : std_logic;
  SIGNAL Delay2_lowered_bypass_reg        : std_logic;  -- ufix1
  SIGNAL Delay2_toDel_2                   : std_logic;
  SIGNAL Delay2_delOut                    : std_logic;
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL Delay3_toDel                     : std_logic;
  SIGNAL Delay3_toDel_1                   : std_logic;
  SIGNAL Delay3_lowered_bypass_reg        : std_logic;  -- ufix1
  SIGNAL Delay3_toDel_2                   : std_logic;
  SIGNAL Delay3_lowered_out               : std_logic;
  SIGNAL Delay3_delOut                    : std_logic;
  SIGNAL Delay3_out1                      : std_logic;
  SIGNAL Delay4_toDel                     : std_logic;
  SIGNAL Delay4_toDel_1                   : std_logic;
  SIGNAL Delay4_lowered_bypass_reg        : std_logic;  -- ufix1
  SIGNAL Delay4_toDel_2                   : std_logic;
  SIGNAL Delay4_delOut                    : std_logic;
  SIGNAL Delay4_out1                      : std_logic;
  SIGNAL Delay5_toDel                     : std_logic;
  SIGNAL Delay5_toDel_1                   : std_logic;
  SIGNAL Delay5_lowered_bypass_reg        : std_logic;  -- ufix1
  SIGNAL Delay5_toDel_2                   : std_logic;
  SIGNAL Delay5_lowered_out               : std_logic;
  SIGNAL Delay5_delOut                    : std_logic;
  SIGNAL Delay5_out1                      : std_logic;
  SIGNAL Delay6_toDel                     : std_logic;
  SIGNAL Delay6_toDel_1                   : std_logic;
  SIGNAL Delay6_lowered_bypass_reg        : std_logic;  -- ufix1
  SIGNAL Delay6_toDel_2                   : std_logic;
  SIGNAL Delay6_delOut                    : std_logic;
  SIGNAL Delay6_out1                      : std_logic;
  SIGNAL Delay7_toDel                     : std_logic;
  SIGNAL Delay7_toDel_1                   : std_logic;
  SIGNAL Delay7_lowered_bypass_reg        : std_logic;  -- ufix1
  SIGNAL Delay7_toDel_2                   : std_logic;
  SIGNAL Delay7_lowered_out               : std_logic;
  SIGNAL Delay7_delOut                    : std_logic;
  SIGNAL Delay7_out1                      : std_logic;
  SIGNAL Delay8_toDel                     : std_logic;
  SIGNAL Delay8_toDel_1                   : std_logic;
  SIGNAL Delay8_lowered_bypass_reg        : std_logic;  -- ufix1
  SIGNAL Delay8_toDel_2                   : std_logic;
  SIGNAL Delay8_delOut                    : std_logic;
  SIGNAL Delay8_out1                      : std_logic;
  SIGNAL Delay9_toDel                     : std_logic;
  SIGNAL Delay9_toDel_1                   : std_logic;
  SIGNAL Delay9_lowered_bypass_reg        : std_logic;  -- ufix1
  SIGNAL Delay9_toDel_2                   : std_logic;
  SIGNAL Delay9_delOut                    : std_logic;
  SIGNAL Delay9_out1                      : std_logic;
  SIGNAL Delay10_toDel                    : std_logic;
  SIGNAL Delay10_toDel_1                  : std_logic;
  SIGNAL Delay10_lowered_bypass_reg       : std_logic;  -- ufix1
  SIGNAL Delay10_toDel_2                  : std_logic;
  SIGNAL Delay10_delOut                   : std_logic;
  SIGNAL Delay10_out1                     : std_logic;
  SIGNAL Delay11_toDel                    : std_logic;
  SIGNAL Delay11_toDel_1                  : std_logic;
  SIGNAL Delay11_lowered_bypass_reg       : std_logic;  -- ufix1
  SIGNAL Delay11_toDel_2                  : std_logic;
  SIGNAL Delay11_delOut                   : std_logic;
  SIGNAL Delay11_out1                     : std_logic;
  SIGNAL Delay12_toDel                    : std_logic;
  SIGNAL Delay12_toDel_1                  : std_logic;
  SIGNAL Delay12_lowered_bypass_reg       : std_logic;  -- ufix1
  SIGNAL Delay12_toDel_2                  : std_logic;
  SIGNAL Delay12_delOut                   : std_logic;
  SIGNAL Delay12_out1                     : std_logic;
  SIGNAL Delay13_toDel                    : std_logic;
  SIGNAL Delay13_toDel_1                  : std_logic;
  SIGNAL Delay13_lowered_bypass_reg       : std_logic;  -- ufix1
  SIGNAL Delay13_toDel_2                  : std_logic;
  SIGNAL Delay13_delOut                   : std_logic;
  SIGNAL RateTransition_bypass_reg        : std_logic;  -- ufix1
  SIGNAL start_3                          : std_logic;
  SIGNAL valid_1                          : std_logic;
  SIGNAL frame_counter_out1               : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL frame_counter_out1_1             : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL Logical_Operator2_out1           : std_logic;
  SIGNAL delayMatch6_reg                  : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL delayMatch6_reg_next             : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL end_rsvd_1                       : std_logic;
  SIGNAL ended_flag_iv                    : std_logic;
  SIGNAL ended_flag_out1                  : std_logic;
  SIGNAL Switch_out1                      : std_logic;
  SIGNAL ended_flag_toDel                 : std_logic;
  SIGNAL ended_flag_toDel_1               : std_logic;
  SIGNAL ended_flag_lowered_bypass_reg    : std_logic;  -- ufix1
  SIGNAL ended_flag_toDel_2               : std_logic;
  SIGNAL ended_flag_delOut                : std_logic;
  SIGNAL Compare_To_Constant1_out1        : std_logic;
  SIGNAL Logical_Operator3_out1           : std_logic;
  SIGNAL input_bit_1                      : std_logic;  -- ufix1
  SIGNAL input_bit_2                      : std_logic;  -- ufix1
  SIGNAL Constant_out1                    : std_logic;  -- ufix1_En1000
  SIGNAL Constant_out1_dtc                : std_logic;  -- ufix1
  SIGNAL Switch1_out1                     : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1           : std_logic;
  SIGNAL Logical_Operator1_out1_1         : std_logic;

BEGIN
  -- Padding unit
  -- 
  -- If the counter has not reached the end of a frame and the end flag was risen,
  -- padd with 0's.

  reduced_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        start_1 <= '0';
      ELSIF enb = '1' THEN
        start_1 <= start;
      END IF;
    END IF;
  END PROCESS reduced_process;


  reduced_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        reduced_reg(0) <= '0';
        reduced_reg(1) <= '0';
        reduced_reg(2) <= '0';
        reduced_reg(3) <= '0';
        reduced_reg(4) <= '0';
        reduced_reg(5) <= '0';
        reduced_reg(6) <= '0';
      ELSIF enb = '1' THEN
        reduced_reg(0) <= reduced_reg_next(0);
        reduced_reg(1) <= reduced_reg_next(1);
        reduced_reg(2) <= reduced_reg_next(2);
        reduced_reg(3) <= reduced_reg_next(3);
        reduced_reg(4) <= reduced_reg_next(4);
        reduced_reg(5) <= reduced_reg_next(5);
        reduced_reg(6) <= reduced_reg_next(6);
      END IF;
    END IF;
  END PROCESS reduced_1_process;

  start_2 <= reduced_reg(6);
  reduced_reg_next(0) <= start_1;
  reduced_reg_next(1) <= reduced_reg(0);
  reduced_reg_next(2) <= reduced_reg(1);
  reduced_reg_next(3) <= reduced_reg(2);
  reduced_reg_next(4) <= reduced_reg(3);
  reduced_reg_next(5) <= reduced_reg(4);
  reduced_reg_next(6) <= reduced_reg(5);

  Delay7_lowered_ctrl_const_out <= '1';

  delayMatch8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch8_reg(0) <= '0';
        delayMatch8_reg(1) <= '0';
      ELSIF enb_1_8_0 = '1' THEN
        delayMatch8_reg(0) <= delayMatch8_reg_next(0);
        delayMatch8_reg(1) <= delayMatch8_reg_next(1);
      END IF;
    END IF;
  END PROCESS delayMatch8_process;

  Delay7_lowered_ctrl_const_out_1 <= delayMatch8_reg(1);
  delayMatch8_reg_next(0) <= Delay7_lowered_ctrl_const_out;
  delayMatch8_reg_next(1) <= delayMatch8_reg(0);

  Delay7_lowered_ctrl_delay_out <= Delay7_lowered_ctrl_const_out_1;

  Delay7_lowered_Initial_Val_out <= '1';

  Delay5_lowered_ctrl_const_out <= '1';

  delayMatch9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch9_reg(0) <= '0';
        delayMatch9_reg(1) <= '0';
      ELSIF enb_1_8_0 = '1' THEN
        delayMatch9_reg(0) <= delayMatch9_reg_next(0);
        delayMatch9_reg(1) <= delayMatch9_reg_next(1);
      END IF;
    END IF;
  END PROCESS delayMatch9_process;

  Delay5_lowered_ctrl_const_out_1 <= delayMatch9_reg(1);
  delayMatch9_reg_next(0) <= Delay5_lowered_ctrl_const_out;
  delayMatch9_reg_next(1) <= delayMatch9_reg(0);

  Delay5_lowered_ctrl_delay_out <= Delay5_lowered_ctrl_const_out_1;

  Delay5_lowered_Initial_Val_out <= '1';

  Delay3_lowered_ctrl_const_out <= '1';

  delayMatch10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch10_reg(0) <= '0';
        delayMatch10_reg(1) <= '0';
      ELSIF enb_1_8_0 = '1' THEN
        delayMatch10_reg(0) <= delayMatch10_reg_next(0);
        delayMatch10_reg(1) <= delayMatch10_reg_next(1);
      END IF;
    END IF;
  END PROCESS delayMatch10_process;

  Delay3_lowered_ctrl_const_out_1 <= delayMatch10_reg(1);
  delayMatch10_reg_next(0) <= Delay3_lowered_ctrl_const_out;
  delayMatch10_reg_next(1) <= delayMatch10_reg(0);

  Delay3_lowered_ctrl_delay_out <= Delay3_lowered_ctrl_const_out_1;

  Delay3_lowered_Initial_Val_out <= '1';

  Delay_lowered_ctrl_const_out <= '1';

  delayMatch11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch11_reg(0) <= '0';
        delayMatch11_reg(1) <= '0';
      ELSIF enb_1_8_0 = '1' THEN
        delayMatch11_reg(0) <= delayMatch11_reg_next(0);
        delayMatch11_reg(1) <= delayMatch11_reg_next(1);
      END IF;
    END IF;
  END PROCESS delayMatch11_process;

  Delay_lowered_ctrl_const_out_1 <= delayMatch11_reg(1);
  delayMatch11_reg_next(0) <= Delay_lowered_ctrl_const_out;
  delayMatch11_reg_next(1) <= delayMatch11_reg(0);

  Delay_lowered_ctrl_delay_out <= Delay_lowered_ctrl_const_out_1;

  Delay_lowered_Initial_Val_out <= '1';

  Delay_iv <= '1';

  Delay1_iv <= '0';

  Delay2_iv <= '0';

  Delay3_iv <= '1';

  Delay4_iv <= '0';

  Delay5_iv <= '1';

  Delay6_iv <= '0';

  Delay7_iv <= '1';

  Delay8_iv <= '0';

  Delay9_iv <= '0';

  Delay10_iv <= '0';

  Delay11_iv <= '0';

  Delay12_iv <= '0';

  Delay13_iv <= '0';

  Delay14_iv <= '0';

  
  Delay14_toDel <= Delay13_out1 WHEN start_2 = '0' ELSE
      Delay14_iv;

  crp_out_delay15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay14_toDel_1 <= '0';
      ELSIF enb = '1' THEN
        Delay14_toDel_1 <= Delay14_toDel;
      END IF;
    END IF;
  END PROCESS crp_out_delay15_process;


  Delay14_lowered_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay14_lowered_bypass_reg <= '0';
      ELSIF enb_1_8_1 = '1' THEN
        Delay14_lowered_bypass_reg <= Delay14_toDel_1;
      END IF;
    END IF;
  END PROCESS Delay14_lowered_bypass_process;

  
  Delay14_toDel_2 <= Delay14_toDel_1 WHEN enb_1_8_1 = '1' ELSE
      Delay14_lowered_bypass_reg;

  Delay14_delOut <= Delay14_toDel_2;

  
  Delay14_out1 <= Delay14_delOut WHEN start_2 = '0' ELSE
      Delay14_iv;

  
  Delay_toDel <= Logical_Operator_out1 WHEN start_2 = '0' ELSE
      Delay_iv;

  crp_out_delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_toDel_1 <= '0';
      ELSIF enb = '1' THEN
        Delay_toDel_1 <= Delay_toDel;
      END IF;
    END IF;
  END PROCESS crp_out_delay1_process;


  Delay_lowered_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_lowered_bypass_reg <= '0';
      ELSIF enb_1_8_1 = '1' THEN
        Delay_lowered_bypass_reg <= Delay_toDel_1;
      END IF;
    END IF;
  END PROCESS Delay_lowered_bypass_process;

  
  Delay_toDel_2 <= Delay_toDel_1 WHEN enb_1_8_1 = '1' ELSE
      Delay_lowered_bypass_reg;

  Delay_lowered_out <= Delay_toDel_2;

  
  Delay_delOut <= Delay_lowered_Initial_Val_out WHEN Delay_lowered_ctrl_delay_out = '0' ELSE
      Delay_lowered_out;

  
  Delay_out1 <= Delay_delOut WHEN start_2 = '0' ELSE
      Delay_iv;

  
  Delay1_toDel <= Delay_out1 WHEN start_2 = '0' ELSE
      Delay1_iv;

  crp_out_delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_toDel_1 <= '0';
      ELSIF enb = '1' THEN
        Delay1_toDel_1 <= Delay1_toDel;
      END IF;
    END IF;
  END PROCESS crp_out_delay2_process;


  Delay1_lowered_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_lowered_bypass_reg <= '0';
      ELSIF enb_1_8_1 = '1' THEN
        Delay1_lowered_bypass_reg <= Delay1_toDel_1;
      END IF;
    END IF;
  END PROCESS Delay1_lowered_bypass_process;

  
  Delay1_toDel_2 <= Delay1_toDel_1 WHEN enb_1_8_1 = '1' ELSE
      Delay1_lowered_bypass_reg;

  Delay1_delOut <= Delay1_toDel_2;

  
  Delay1_out1 <= Delay1_delOut WHEN start_2 = '0' ELSE
      Delay1_iv;

  
  Delay2_toDel <= Delay1_out1 WHEN start_2 = '0' ELSE
      Delay2_iv;

  crp_out_delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_toDel_1 <= '0';
      ELSIF enb = '1' THEN
        Delay2_toDel_1 <= Delay2_toDel;
      END IF;
    END IF;
  END PROCESS crp_out_delay3_process;


  Delay2_lowered_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_lowered_bypass_reg <= '0';
      ELSIF enb_1_8_1 = '1' THEN
        Delay2_lowered_bypass_reg <= Delay2_toDel_1;
      END IF;
    END IF;
  END PROCESS Delay2_lowered_bypass_process;

  
  Delay2_toDel_2 <= Delay2_toDel_1 WHEN enb_1_8_1 = '1' ELSE
      Delay2_lowered_bypass_reg;

  Delay2_delOut <= Delay2_toDel_2;

  
  Delay2_out1 <= Delay2_delOut WHEN start_2 = '0' ELSE
      Delay2_iv;

  
  Delay3_toDel <= Delay2_out1 WHEN start_2 = '0' ELSE
      Delay3_iv;

  crp_out_delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_toDel_1 <= '0';
      ELSIF enb = '1' THEN
        Delay3_toDel_1 <= Delay3_toDel;
      END IF;
    END IF;
  END PROCESS crp_out_delay4_process;


  Delay3_lowered_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_lowered_bypass_reg <= '0';
      ELSIF enb_1_8_1 = '1' THEN
        Delay3_lowered_bypass_reg <= Delay3_toDel_1;
      END IF;
    END IF;
  END PROCESS Delay3_lowered_bypass_process;

  
  Delay3_toDel_2 <= Delay3_toDel_1 WHEN enb_1_8_1 = '1' ELSE
      Delay3_lowered_bypass_reg;

  Delay3_lowered_out <= Delay3_toDel_2;

  
  Delay3_delOut <= Delay3_lowered_Initial_Val_out WHEN Delay3_lowered_ctrl_delay_out = '0' ELSE
      Delay3_lowered_out;

  
  Delay3_out1 <= Delay3_delOut WHEN start_2 = '0' ELSE
      Delay3_iv;

  
  Delay4_toDel <= Delay3_out1 WHEN start_2 = '0' ELSE
      Delay4_iv;

  crp_out_delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_toDel_1 <= '0';
      ELSIF enb = '1' THEN
        Delay4_toDel_1 <= Delay4_toDel;
      END IF;
    END IF;
  END PROCESS crp_out_delay5_process;


  Delay4_lowered_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_lowered_bypass_reg <= '0';
      ELSIF enb_1_8_1 = '1' THEN
        Delay4_lowered_bypass_reg <= Delay4_toDel_1;
      END IF;
    END IF;
  END PROCESS Delay4_lowered_bypass_process;

  
  Delay4_toDel_2 <= Delay4_toDel_1 WHEN enb_1_8_1 = '1' ELSE
      Delay4_lowered_bypass_reg;

  Delay4_delOut <= Delay4_toDel_2;

  
  Delay4_out1 <= Delay4_delOut WHEN start_2 = '0' ELSE
      Delay4_iv;

  
  Delay5_toDel <= Delay4_out1 WHEN start_2 = '0' ELSE
      Delay5_iv;

  crp_out_delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay5_toDel_1 <= '0';
      ELSIF enb = '1' THEN
        Delay5_toDel_1 <= Delay5_toDel;
      END IF;
    END IF;
  END PROCESS crp_out_delay6_process;


  Delay5_lowered_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay5_lowered_bypass_reg <= '0';
      ELSIF enb_1_8_1 = '1' THEN
        Delay5_lowered_bypass_reg <= Delay5_toDel_1;
      END IF;
    END IF;
  END PROCESS Delay5_lowered_bypass_process;

  
  Delay5_toDel_2 <= Delay5_toDel_1 WHEN enb_1_8_1 = '1' ELSE
      Delay5_lowered_bypass_reg;

  Delay5_lowered_out <= Delay5_toDel_2;

  
  Delay5_delOut <= Delay5_lowered_Initial_Val_out WHEN Delay5_lowered_ctrl_delay_out = '0' ELSE
      Delay5_lowered_out;

  
  Delay5_out1 <= Delay5_delOut WHEN start_2 = '0' ELSE
      Delay5_iv;

  
  Delay6_toDel <= Delay5_out1 WHEN start_2 = '0' ELSE
      Delay6_iv;

  crp_out_delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay6_toDel_1 <= '0';
      ELSIF enb = '1' THEN
        Delay6_toDel_1 <= Delay6_toDel;
      END IF;
    END IF;
  END PROCESS crp_out_delay7_process;


  Delay6_lowered_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay6_lowered_bypass_reg <= '0';
      ELSIF enb_1_8_1 = '1' THEN
        Delay6_lowered_bypass_reg <= Delay6_toDel_1;
      END IF;
    END IF;
  END PROCESS Delay6_lowered_bypass_process;

  
  Delay6_toDel_2 <= Delay6_toDel_1 WHEN enb_1_8_1 = '1' ELSE
      Delay6_lowered_bypass_reg;

  Delay6_delOut <= Delay6_toDel_2;

  
  Delay6_out1 <= Delay6_delOut WHEN start_2 = '0' ELSE
      Delay6_iv;

  
  Delay7_toDel <= Delay6_out1 WHEN start_2 = '0' ELSE
      Delay7_iv;

  crp_out_delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay7_toDel_1 <= '0';
      ELSIF enb = '1' THEN
        Delay7_toDel_1 <= Delay7_toDel;
      END IF;
    END IF;
  END PROCESS crp_out_delay8_process;


  Delay7_lowered_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay7_lowered_bypass_reg <= '0';
      ELSIF enb_1_8_1 = '1' THEN
        Delay7_lowered_bypass_reg <= Delay7_toDel_1;
      END IF;
    END IF;
  END PROCESS Delay7_lowered_bypass_process;

  
  Delay7_toDel_2 <= Delay7_toDel_1 WHEN enb_1_8_1 = '1' ELSE
      Delay7_lowered_bypass_reg;

  Delay7_lowered_out <= Delay7_toDel_2;

  
  Delay7_delOut <= Delay7_lowered_Initial_Val_out WHEN Delay7_lowered_ctrl_delay_out = '0' ELSE
      Delay7_lowered_out;

  
  Delay7_out1 <= Delay7_delOut WHEN start_2 = '0' ELSE
      Delay7_iv;

  
  Delay8_toDel <= Delay7_out1 WHEN start_2 = '0' ELSE
      Delay8_iv;

  crp_out_delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay8_toDel_1 <= '0';
      ELSIF enb = '1' THEN
        Delay8_toDel_1 <= Delay8_toDel;
      END IF;
    END IF;
  END PROCESS crp_out_delay9_process;


  Delay8_lowered_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay8_lowered_bypass_reg <= '0';
      ELSIF enb_1_8_1 = '1' THEN
        Delay8_lowered_bypass_reg <= Delay8_toDel_1;
      END IF;
    END IF;
  END PROCESS Delay8_lowered_bypass_process;

  
  Delay8_toDel_2 <= Delay8_toDel_1 WHEN enb_1_8_1 = '1' ELSE
      Delay8_lowered_bypass_reg;

  Delay8_delOut <= Delay8_toDel_2;

  
  Delay8_out1 <= Delay8_delOut WHEN start_2 = '0' ELSE
      Delay8_iv;

  
  Delay9_toDel <= Delay8_out1 WHEN start_2 = '0' ELSE
      Delay9_iv;

  crp_out_delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay9_toDel_1 <= '0';
      ELSIF enb = '1' THEN
        Delay9_toDel_1 <= Delay9_toDel;
      END IF;
    END IF;
  END PROCESS crp_out_delay10_process;


  Delay9_lowered_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay9_lowered_bypass_reg <= '0';
      ELSIF enb_1_8_1 = '1' THEN
        Delay9_lowered_bypass_reg <= Delay9_toDel_1;
      END IF;
    END IF;
  END PROCESS Delay9_lowered_bypass_process;

  
  Delay9_toDel_2 <= Delay9_toDel_1 WHEN enb_1_8_1 = '1' ELSE
      Delay9_lowered_bypass_reg;

  Delay9_delOut <= Delay9_toDel_2;

  
  Delay9_out1 <= Delay9_delOut WHEN start_2 = '0' ELSE
      Delay9_iv;

  
  Delay10_toDel <= Delay9_out1 WHEN start_2 = '0' ELSE
      Delay10_iv;

  crp_out_delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay10_toDel_1 <= '0';
      ELSIF enb = '1' THEN
        Delay10_toDel_1 <= Delay10_toDel;
      END IF;
    END IF;
  END PROCESS crp_out_delay11_process;


  Delay10_lowered_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay10_lowered_bypass_reg <= '0';
      ELSIF enb_1_8_1 = '1' THEN
        Delay10_lowered_bypass_reg <= Delay10_toDel_1;
      END IF;
    END IF;
  END PROCESS Delay10_lowered_bypass_process;

  
  Delay10_toDel_2 <= Delay10_toDel_1 WHEN enb_1_8_1 = '1' ELSE
      Delay10_lowered_bypass_reg;

  Delay10_delOut <= Delay10_toDel_2;

  
  Delay10_out1 <= Delay10_delOut WHEN start_2 = '0' ELSE
      Delay10_iv;

  
  Delay11_toDel <= Delay10_out1 WHEN start_2 = '0' ELSE
      Delay11_iv;

  crp_out_delay12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay11_toDel_1 <= '0';
      ELSIF enb = '1' THEN
        Delay11_toDel_1 <= Delay11_toDel;
      END IF;
    END IF;
  END PROCESS crp_out_delay12_process;


  Delay11_lowered_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay11_lowered_bypass_reg <= '0';
      ELSIF enb_1_8_1 = '1' THEN
        Delay11_lowered_bypass_reg <= Delay11_toDel_1;
      END IF;
    END IF;
  END PROCESS Delay11_lowered_bypass_process;

  
  Delay11_toDel_2 <= Delay11_toDel_1 WHEN enb_1_8_1 = '1' ELSE
      Delay11_lowered_bypass_reg;

  Delay11_delOut <= Delay11_toDel_2;

  
  Delay11_out1 <= Delay11_delOut WHEN start_2 = '0' ELSE
      Delay11_iv;

  
  Delay12_toDel <= Delay11_out1 WHEN start_2 = '0' ELSE
      Delay12_iv;

  crp_out_delay13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay12_toDel_1 <= '0';
      ELSIF enb = '1' THEN
        Delay12_toDel_1 <= Delay12_toDel;
      END IF;
    END IF;
  END PROCESS crp_out_delay13_process;


  Delay12_lowered_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay12_lowered_bypass_reg <= '0';
      ELSIF enb_1_8_1 = '1' THEN
        Delay12_lowered_bypass_reg <= Delay12_toDel_1;
      END IF;
    END IF;
  END PROCESS Delay12_lowered_bypass_process;

  
  Delay12_toDel_2 <= Delay12_toDel_1 WHEN enb_1_8_1 = '1' ELSE
      Delay12_lowered_bypass_reg;

  Delay12_delOut <= Delay12_toDel_2;

  
  Delay12_out1 <= Delay12_delOut WHEN start_2 = '0' ELSE
      Delay12_iv;

  
  Delay13_toDel <= Delay12_out1 WHEN start_2 = '0' ELSE
      Delay13_iv;

  crp_out_delay14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay13_toDel_1 <= '0';
      ELSIF enb = '1' THEN
        Delay13_toDel_1 <= Delay13_toDel;
      END IF;
    END IF;
  END PROCESS crp_out_delay14_process;


  Delay13_lowered_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay13_lowered_bypass_reg <= '0';
      ELSIF enb_1_8_1 = '1' THEN
        Delay13_lowered_bypass_reg <= Delay13_toDel_1;
      END IF;
    END IF;
  END PROCESS Delay13_lowered_bypass_process;

  
  Delay13_toDel_2 <= Delay13_toDel_1 WHEN enb_1_8_1 = '1' ELSE
      Delay13_lowered_bypass_reg;

  Delay13_delOut <= Delay13_toDel_2;

  
  Delay13_out1 <= Delay13_delOut WHEN start_2 = '0' ELSE
      Delay13_iv;

  Logical_Operator_out1 <= Delay13_out1 XOR Delay14_out1;

  RateTransition_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        RateTransition_bypass_reg <= '0';
      ELSIF enb_1_8_1 = '1' THEN
        RateTransition_bypass_reg <= start_1;
      END IF;
    END IF;
  END PROCESS RateTransition_bypass_process;

  
  start_3 <= start_1 WHEN enb_1_8_1 = '1' ELSE
      RateTransition_bypass_reg;

  delayMatch5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        valid_1 <= '0';
      ELSIF enb_1_8_0 = '1' THEN
        valid_1 <= valid;
      END IF;
    END IF;
  END PROCESS delayMatch5_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 48408
  frame_counter_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        frame_counter_out1 <= to_unsigned(16#0000#, 16);
      ELSIF enb_1_8_0 = '1' THEN
        IF start_3 = '1' THEN 
          frame_counter_out1 <= to_unsigned(16#0000#, 16);
        ELSIF valid_1 = '1' THEN 
          IF frame_counter_out1 >= to_unsigned(16#BD18#, 16) THEN 
            frame_counter_out1 <= to_unsigned(16#0000#, 16);
          ELSE 
            frame_counter_out1 <= frame_counter_out1 + to_unsigned(16#0001#, 16);
          END IF;
        END IF;
      END IF;
    END IF;
  END PROCESS frame_counter_process;


  frame_counter_out1_1 <= frame_counter_out1;

  
  Compare_To_Constant_out1 <= '1' WHEN frame_counter_out1_1 >= to_unsigned(16#BD18#, 16) ELSE
      '0';

  Logical_Operator2_out1 <=  NOT Compare_To_Constant_out1;

  delayMatch6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch6_reg(0) <= '0';
        delayMatch6_reg(1) <= '0';
        delayMatch6_reg(2) <= '0';
        delayMatch6_reg(3) <= '0';
        delayMatch6_reg(4) <= '0';
        delayMatch6_reg(5) <= '0';
        delayMatch6_reg(6) <= '0';
        delayMatch6_reg(7) <= '0';
      ELSIF enb = '1' THEN
        delayMatch6_reg(0) <= delayMatch6_reg_next(0);
        delayMatch6_reg(1) <= delayMatch6_reg_next(1);
        delayMatch6_reg(2) <= delayMatch6_reg_next(2);
        delayMatch6_reg(3) <= delayMatch6_reg_next(3);
        delayMatch6_reg(4) <= delayMatch6_reg_next(4);
        delayMatch6_reg(5) <= delayMatch6_reg_next(5);
        delayMatch6_reg(6) <= delayMatch6_reg_next(6);
        delayMatch6_reg(7) <= delayMatch6_reg_next(7);
      END IF;
    END IF;
  END PROCESS delayMatch6_process;

  end_rsvd_1 <= delayMatch6_reg(7);
  delayMatch6_reg_next(0) <= end_rsvd;
  delayMatch6_reg_next(1) <= delayMatch6_reg(0);
  delayMatch6_reg_next(2) <= delayMatch6_reg(1);
  delayMatch6_reg_next(3) <= delayMatch6_reg(2);
  delayMatch6_reg_next(4) <= delayMatch6_reg(3);
  delayMatch6_reg_next(5) <= delayMatch6_reg(4);
  delayMatch6_reg_next(6) <= delayMatch6_reg(5);
  delayMatch6_reg_next(7) <= delayMatch6_reg(6);

  ended_flag_iv <= '0';

  
  Switch_out1 <= end_rsvd_1 WHEN ended_flag_out1 = '0' ELSE
      ended_flag_out1;

  
  ended_flag_toDel <= Switch_out1 WHEN Compare_To_Constant_out1 = '0' ELSE
      ended_flag_iv;

  crp_out_delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        ended_flag_toDel_1 <= '0';
      ELSIF enb = '1' THEN
        ended_flag_toDel_1 <= ended_flag_toDel;
      END IF;
    END IF;
  END PROCESS crp_out_delay_process;


  ended_flag_lowered_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        ended_flag_lowered_bypass_reg <= '0';
      ELSIF enb_1_8_1 = '1' THEN
        ended_flag_lowered_bypass_reg <= ended_flag_toDel_1;
      END IF;
    END IF;
  END PROCESS ended_flag_lowered_bypass_process;

  
  ended_flag_toDel_2 <= ended_flag_toDel_1 WHEN enb_1_8_1 = '1' ELSE
      ended_flag_lowered_bypass_reg;

  ended_flag_delOut <= ended_flag_toDel_2;

  
  ended_flag_out1 <= ended_flag_delOut WHEN Compare_To_Constant_out1 = '0' ELSE
      ended_flag_iv;

  
  Compare_To_Constant1_out1 <= '1' WHEN ended_flag_out1 = '1' ELSE
      '0';

  Logical_Operator3_out1 <= Logical_Operator2_out1 AND Compare_To_Constant1_out1;

  delayMatch12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        input_bit_1 <= '0';
      ELSIF enb_1_8_0 = '1' THEN
        input_bit_1 <= input_bit;
      END IF;
    END IF;
  END PROCESS delayMatch12_process;


  input_bit_2 <= input_bit_1;

  Constant_out1 <= '0';

  Constant_out1_dtc <= '0';

  
  Switch1_out1 <= input_bit_2 WHEN Logical_Operator3_out1 = '0' ELSE
      Constant_out1_dtc;

  Logical_Operator1_out1 <= Logical_Operator_out1 XOR Switch1_out1;

  delayMatch4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator1_out1_1 <= '0';
      ELSIF enb = '1' THEN
        Logical_Operator1_out1_1 <= Logical_Operator1_out1;
      END IF;
    END IF;
  END PROCESS delayMatch4_process;


  out_rsvd <= Logical_Operator1_out1_1;

END rtl;


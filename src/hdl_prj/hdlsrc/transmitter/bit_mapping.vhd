-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/transmitter/bit_mapping.vhd
-- Created: 2021-02-07 15:21:35
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: bit_mapping
-- Source Path: transmitter/tran_dut/bit_mapping
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY bit_mapping IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        input_sequence                    :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
        amplitude                         :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        inphase                           :   OUT   std_logic_vector(24 DOWNTO 0);  -- sfix25_En15
        quadrature                        :   OUT   std_logic_vector(24 DOWNTO 0)  -- sfix25_En15
        );
END bit_mapping;


ARCHITECTURE rtl OF bit_mapping IS

  -- Component Declarations
  COMPONENT angle_selector
    PORT( input                           :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
          phase                           :   OUT   std_logic_vector(22 DOWNTO 0)  -- ufix23_En14
          );
  END COMPONENT;

  COMPONENT Cosine_HDL_Optimized
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          u                               :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          x                               :   OUT   std_logic_vector(16 DOWNTO 0);  -- sfix17_En15
          y                               :   OUT   std_logic_vector(16 DOWNTO 0)  -- sfix17_En15
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : angle_selector
    USE ENTITY work.angle_selector(rtl);

  FOR ALL : Cosine_HDL_Optimized
    USE ENTITY work.Cosine_HDL_Optimized(rtl);

  -- Signals
  SIGNAL phase                            : std_logic_vector(22 DOWNTO 0);  -- ufix23
  SIGNAL phase_unsigned                   : unsigned(22 DOWNTO 0);  -- ufix23_En14
  SIGNAL Constant_out1                    : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Divide_out1                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Sine                             : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL Cosine                           : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL Cosine_signed                    : signed(16 DOWNTO 0);  -- sfix17_En15
  SIGNAL amplitude_unsigned               : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL amplitude_1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Product_cast                     : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL Product_mul_temp                 : signed(25 DOWNTO 0);  -- sfix26_En15
  SIGNAL Product_out1                     : signed(24 DOWNTO 0);  -- sfix25_En15
  SIGNAL Sine_signed                      : signed(16 DOWNTO 0);  -- sfix17_En15
  SIGNAL Product1_cast                    : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL Product1_mul_temp                : signed(25 DOWNTO 0);  -- sfix26_En15
  SIGNAL Product1_out1                    : signed(24 DOWNTO 0);  -- sfix25_En15

BEGIN
  u_angle_selector : angle_selector
    PORT MAP( input => input_sequence,  -- ufix3
              phase => phase  -- ufix23_En14
              );

  u_Cosine_HDL_Optimized : Cosine_HDL_Optimized
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              u => std_logic_vector(Divide_out1),  -- sfix16_En14
              x => Sine,  -- sfix17_En15
              y => Cosine  -- sfix17_En15
              );

  phase_unsigned <= unsigned(phase);

  Constant_out1 <= to_unsigned(16#168#, 9);

  Divide_output : PROCESS (Constant_out1, phase_unsigned)
    VARIABLE c : unsigned(22 DOWNTO 0);
    VARIABLE div_temp : unsigned(23 DOWNTO 0);
    VARIABLE cast : unsigned(23 DOWNTO 0);
  BEGIN
    div_temp := to_unsigned(16#000000#, 24);
    cast := to_unsigned(16#000000#, 24);
    IF Constant_out1 = to_unsigned(16#000#, 9) THEN 
      c := to_unsigned(16#7FFFFF#, 23);
    ELSE 
      cast := resize(phase_unsigned, 24);
      div_temp := cast / Constant_out1;
      IF div_temp(23) /= '0' THEN 
        c := "11111111111111111111111";
      ELSE 
        c := div_temp(22 DOWNTO 0);
      END IF;
    END IF;
    IF c(22 DOWNTO 15) /= "00000000" THEN 
      Divide_out1 <= X"7FFF";
    ELSE 
      Divide_out1 <= signed(c(15 DOWNTO 0));
    END IF;
  END PROCESS Divide_output;


  Cosine_signed <= signed(Cosine);

  amplitude_unsigned <= unsigned(amplitude);

  reduced_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        amplitude_1 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        amplitude_1 <= amplitude_unsigned;
      END IF;
    END IF;
  END PROCESS reduced_process;


  Product_cast <= signed(resize(amplitude_1, 9));
  Product_mul_temp <= Cosine_signed * Product_cast;
  Product_out1 <= Product_mul_temp(24 DOWNTO 0);

  inphase <= std_logic_vector(Product_out1);

  Sine_signed <= signed(Sine);

  Product1_cast <= signed(resize(amplitude_1, 9));
  Product1_mul_temp <= Sine_signed * Product1_cast;
  Product1_out1 <= Product1_mul_temp(24 DOWNTO 0);

  quadrature <= std_logic_vector(Product1_out1);

END rtl;

